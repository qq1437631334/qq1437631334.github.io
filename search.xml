<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ELK综合实例</title>
    <url>/2021/01/07/ELK%E7%BB%BC%E5%90%88%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ElasticStack综合案例"><a href="#ElasticStack综合案例" class="headerlink" title="ElasticStack综合案例"></a>ElasticStack综合案例</h1><p>本篇将我们前面学习到的技术：ElasticSearch、Beats、Kibana、Logstash 整合起来，做一个综合性的学习，目的是为了让小伙伴们能够更加深刻的理解ElasticStack的使用</p>
<h2 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h2><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095437.png" alt="image-20200925083514711"></p>
<ul>
<li>应用APP生产日志，用来记录用户的操作<ul>
<li>[INFO] 2019-03-15 22:55:20 [Main] - DAU|5206|使用优惠券|2019-03-15 03:37:20</li>
<li>[INFO] 2019-03-15 22:55:21 [Main] - DAU|3880|浏览页面|2019-03-15 07:25:09</li>
</ul>
</li>
<li>通过Filebeat读取日志文件中的内容，并且将内容发送给Logstash，原因是需要对内容做处理</li>
<li>Logstash接收到内容后，进行处理，如分割操作，然后将内容发送到Elasticsearch中</li>
<li>Kibana会读取Elasticsearch中的数据，并且在Kibana中进行设计Dashboard，最后进行展示</li>
</ul>
<blockquote>
<p>说明：日志格式、图表、Dashboard都是自定义的</p>
</blockquote>
<h2 id="App介绍"><a href="#App介绍" class="headerlink" title="App介绍"></a>App介绍</h2><p>APP在生产环境应该是真实系统，然而，现在我们学习的话，为了简化操作，所以就做数据的模拟生成即可。</p>
<p>业务代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.RandomUtils;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] VISIT = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;浏览页面&quot;</span>, <span class="string">&quot;评论商品&quot;</span>, <span class="string">&quot;加入收藏&quot;</span>, <span class="string">&quot;加入购物车&quot;</span>, <span class="string">&quot;提交订单&quot;</span>, <span class="string">&quot;使用优惠券&quot;</span>, <span class="string">&quot;领取优惠券&quot;</span>, <span class="string">&quot;搜索&quot;</span>, <span class="string">&quot;查看订单&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Long sleep = RandomUtils.nextLong(<span class="number">200</span>, <span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line">            Thread.sleep(sleep);</span><br><span class="line">            Long maxUserId = <span class="number">9999L</span>;</span><br><span class="line">            Long userId = RandomUtils.nextLong(<span class="number">1</span>, maxUserId);</span><br><span class="line">            String visit = VISIT[RandomUtils.nextInt(<span class="number">0</span>, VISIT.length)];</span><br><span class="line">            DateTime now = <span class="keyword">new</span> DateTime();</span><br><span class="line">            <span class="keyword">int</span> maxHour = now.getHourOfDay();</span><br><span class="line">            <span class="keyword">int</span> maxMillis = now.getMinuteOfHour();</span><br><span class="line">            <span class="keyword">int</span> maxSeconds = now.getSecondOfMinute();</span><br><span class="line">            String date = now.plusHours(-(RandomUtils.nextInt(<span class="number">0</span>, maxHour)))</span><br><span class="line">                    .plusMinutes(-(RandomUtils.nextInt(<span class="number">0</span>, maxMillis)))</span><br><span class="line">                    .plusSeconds(-(RandomUtils.nextInt(<span class="number">0</span>, maxSeconds)))</span><br><span class="line">                    .toString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">            String result = <span class="string">&quot;DAU|&quot;</span> + userId + <span class="string">&quot;|&quot;</span> + visit + <span class="string">&quot;|&quot;</span> + date;</span><br><span class="line">            log.error(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以启动运行，就是不断的生成日志，模拟了我们的实际业务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">09:18:32.721 [main] ERROR com.log.Main - DAU|8183|加入购物车|2020-09-25 06:10:25</span><br><span class="line">09:18:33.599 [main] ERROR com.log.Main - DAU|7097|提交订单|2020-09-25 06:18:31</span><br><span class="line">09:18:37.265 [main] ERROR com.log.Main - DAU|1468|查看订单|2020-09-25 02:04:10</span><br><span class="line">09:18:39.634 [main] ERROR com.log.Main - DAU|7821|领取优惠券|2020-09-25 02:04:07</span><br><span class="line">09:18:41.909 [main] ERROR com.log.Main - DAU|7962|提交订单|2020-09-25 03:02:39</span><br><span class="line">09:18:43.596 [main] ERROR com.log.Main - DAU|3358|评论商品|2020-09-25 08:14:19</span><br></pre></td></tr></table></figure>
<p>然后我们将该项目使用下面命令进行打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure>
<p>打包完成后，到target目录下，能够看到我们生成的jar包</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095438.png" alt="image-20200925092119075"></p>
<p>我们将其复制到我们的服务器上，然后创建一个启动的脚本 startup.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash     </span></span><br><span class="line">nohup java  -Xms256m -Xmx512m -jar  mogu-dashboard-generate-0.0.1-SNAPSHOT.jar  &gt; app.log  2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>然后就使用脚本进行启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./startup.sh</span><br><span class="line"><span class="comment"># 启动成功后，会看到一个日志 app.log，我们可以查看</span></span><br><span class="line">tail -f app.log</span><br></pre></td></tr></table></figure>
<h2 id="配置Filebeat"><a href="#配置Filebeat" class="headerlink" title="配置Filebeat"></a>配置Filebeat</h2><p>在有了不断产生日志的应用程序后，我们就需要创建一个Filebeat的配置文件，用于日志的收集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">vim  mogu-dashboard.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /soft/app/*.<span class="built_in">log</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">&quot;127.0.0.1:5044&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>然后我们就可以启动了【需要我们把Logstash启动起来】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./filebeat -e -c mogu-dashboard.yml</span><br></pre></td></tr></table></figure>
<h2 id="配置Logstash"><a href="#配置Logstash" class="headerlink" title="配置Logstash"></a>配置Logstash</h2><h3 id="Logstash输出到控制台"><a href="#Logstash输出到控制台" class="headerlink" title="Logstash输出到控制台"></a>Logstash输出到控制台</h3><p>Logstash的主要目的就是处理Filebeat发送过来的数据，进行数据的清洗，过滤等，我们首先简单的将logstash获得的数据输出到控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">vim  mogu-dashboard.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line">input &#123;</span><br><span class="line">	beats &#123;</span><br><span class="line">		port =&gt; <span class="string">&quot;5044&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">	stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后启动我们的logstash 【注意，启动时间比较长，需要我们等待】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/logstash -f mogu-dashboard.conf</span><br></pre></td></tr></table></figure>
<p>启动logstash完成后，我们需要再次启动filebeat，回到上面的启动步骤，然后就能看到logstash输出我们的日志</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095439.png" alt="image-20200925095319950"></p>
<h3 id="配置Logstash连接ElasticSearch"><a href="#配置Logstash连接ElasticSearch" class="headerlink" title="配置Logstash连接ElasticSearch"></a>配置Logstash连接ElasticSearch</h3><p>上面的数据，其实还是我们的原始数据，并没有经过处理，所以我们这个时候就需要使用到Logstash的其它功能了。我们继续修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">vim  mogu-dashboard.conf</span><br></pre></td></tr></table></figure>
<p>然后修改一下的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">        beats &#123;</span><br><span class="line">                port =&gt; <span class="string">&quot;5044&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">        mutate &#123;</span><br><span class="line">                split =&gt; &#123;<span class="string">&quot;message&quot;</span>=&gt;<span class="string">&quot;|&quot;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mutate &#123;</span><br><span class="line">                add_field =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][1]&#125;&quot;</span></span><br><span class="line">                <span class="string">&quot;visit&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][2]&#125;&quot;</span></span><br><span class="line">                <span class="string">&quot;date&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][3]&#125;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mutate &#123;</span><br><span class="line">                convert =&gt; &#123;</span><br><span class="line">                <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line">                <span class="string">&quot;visit&quot;</span> =&gt; <span class="string">&quot;string&quot;</span></span><br><span class="line">                <span class="string">&quot;date&quot;</span> =&gt; <span class="string">&quot;string&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mutate &#123;</span><br><span class="line">           remove_field =&gt; [ <span class="string">&quot;host&quot;</span> ]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#output &#123;</span></span><br><span class="line"><span class="comment"># stdout &#123; codec =&gt; rubydebug &#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [ <span class="string">&quot;127.0.0.1:9200&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后再次启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/logstash -f mogu-dashboard.conf</span><br></pre></td></tr></table></figure>
<p>其实能够看到，我们原来的数据，就经过了处理了，产生了新的字段</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095440.png" alt="image-20200925095824693"></p>
<p>同时我们还可以对我们的数据，进行类型转换，为了方便我们的下游进行处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mutate &#123;</span><br><span class="line">	convert =&gt; &#123;</span><br><span class="line">	<span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;integer&quot;</span></span><br><span class="line">	<span class="string">&quot;visit&quot;</span> =&gt; <span class="string">&quot;string&quot;</span></span><br><span class="line">	<span class="string">&quot;date&quot;</span> =&gt; <span class="string">&quot;string&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="遇到的问题1"><a href="#遇到的问题1" class="headerlink" title="遇到的问题1"></a>遇到的问题1</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2020-09-25T02:32:44,042][WARN ][logstash.filters.mutate  ][main][5fd6a2f2f396816d849f2e3e2e0a53f2500a9b58c6819e23f42d2bfd34cde207] Exception caught <span class="keyword">while</span> applying mutate filter &#123;:exception=&gt;<span class="string">&quot;Invalid FieldReference: `message[1]`&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>不断的刷这个错误，配置文件没问题，但添加字段那一个mutate需要给message套一层中括号：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mutate &#123;</span><br><span class="line">    add_field =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;userId&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][1]&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;visit&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][2]&#125;&quot;</span></span><br><span class="line">        <span class="string">&quot;date&quot;</span> =&gt; <span class="string">&quot;%&#123;[message][3]&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="遇到的问题2"><a href="#遇到的问题2" class="headerlink" title="遇到的问题2"></a>遇到的问题2</h3><p>filebeat 传输到host的字段中host是一个对象</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">failed to parse field [host] of <span class="built_in">type</span> [text] <span class="keyword">in</span> document</span><br></pre></td></tr></table></figure>
<p>解决方法就是过滤掉host字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mutate &#123;</span><br><span class="line">	remove_field =&gt; [ <span class="string">&quot;host&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="启动ElasticSearch"><a href="#启动ElasticSearch" class="headerlink" title="启动ElasticSearch"></a>启动ElasticSearch</h2><p>在我们通过Logstash发送数据到ElasticSearch，所以我们还需要启动我们的ElasticSearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到elsearch用户</span></span><br><span class="line">su elsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 到目录</span></span><br><span class="line"><span class="built_in">cd</span> /soft/elsearch/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure>
<h2 id="启动Kibana"><a href="#启动Kibana" class="headerlink" title="启动Kibana"></a>启动Kibana</h2><p>我们最后就需要通过Kibana来展示我们的图形化数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动kibana</span></span><br><span class="line">./bin/kibana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过浏览器访问</span></span><br><span class="line">http://202.193.56.222:5601/app/kibana</span><br></pre></td></tr></table></figure>
<h3 id="添加到索引库"><a href="#添加到索引库" class="headerlink" title="添加到索引库"></a>添加到索引库</h3><p>添加Logstash索引到Kibana中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://202.193.56.222:5601/app/management/kibana/indexPatterns/create</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095441.png" alt="image-20200925112345791"></p>
<p>输入我们的匹配规则，然后匹配到logstash，然后选择时间字段后创建</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095442.png" alt="image-20200925112534588"></p>
<h3 id="创建柱形图"><a href="#创建柱形图" class="headerlink" title="创建柱形图"></a>创建柱形图</h3><p>我们点击右侧Visualizations，然后开始创建图标</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095443.png" alt="image-20200925112621210"></p>
<p>然后选择柱形图</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095444.png" alt="image-20200925112705557"></p>
<p>在选择我们的索引</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095445.png" alt="image-20200925112758534"></p>
<p>最后我们定义我们的X轴，选择按照时间进行添加</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095446.png" alt="image-20200925113054316"></p>
<p>最后更新我们的页面，然后在选择最近的30分钟</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095447.png" alt="image-20200925113133267"></p>
<p>就能够看到我们的日志在源源不断的生成了，同时我们可以对我们的这个图表进行保存</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095448.png" alt="image-20200925113154752"></p>
<h3 id="创建饼图"><a href="#创建饼图" class="headerlink" title="创建饼图"></a>创建饼图</h3><p>我们继续选择饼图</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095449.png" alt="image-20200925144902642"></p>
<p>然后选择我们的索引</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095450.png" alt="image-20200925144939062"></p>
<p>添加完成后，我们就看到这样一个页面了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095451.png" alt="image-20200925145116116"></p>
<p>但是这样还不死很直观，所以我们还需要做处理，找到右侧的Buckets，然后选择Split Slices，然后把我们的每个字段都添加上去，其中visit指的是我们es中的属性</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095452.png" alt="image-20200925145451255"></p>
<p>最后选择update，得到的效果如下所示</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095453.png" alt="image-20200925145553509"></p>
<p>我们还可以继续给每个字段都添加label标签</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095454.png" alt="image-20200925145747292"></p>
<p>添加完成后，更新页面，就得到非常不错的效果了~</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095455.png" alt="image-20200925145807688"></p>
<h3 id="数据表格"><a href="#数据表格" class="headerlink" title="数据表格"></a>数据表格</h3><p>在图标中，选择我们需要显示的字段即可</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095456.png" alt="image-20200925150415045"></p>
<h2 id="制作Dashboard"><a href="#制作Dashboard" class="headerlink" title="制作Dashboard"></a>制作Dashboard</h2><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095457.png" alt="image-20200925151827734"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>Kibana学习笔记</title>
    <url>/2021/01/07/Kibana%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Kibana入门"><a href="#Kibana入门" class="headerlink" title="Kibana入门"></a>Kibana入门</h1><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p>
<p>官网：<a href="https://www.elastic.co/cn/kibana">https://www.elastic.co/cn/kibana</a></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095308.png" alt="image-20200924193926486"></p>
<h2 id="配置和安装"><a href="#配置和安装" class="headerlink" title="配置和安装"></a>配置和安装</h2><p>到下载地址，选择对应的版本：<a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095309.png" alt="image-20200924194324366">下载完成后，将文件拷贝到我们的服务器上，然后解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf kibana-7.9.1-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">mv kibana-7.9.1-linux-x86_64 kibana</span><br></pre></td></tr></table></figure>
<p>然后在进入kibana目录，找到config文件夹下的kibana.yml进行配置的修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /soft/kibana/config/kibana.yml</span><br></pre></td></tr></table></figure>
<p>然后找到下面的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对外暴露服务的地址</span></span><br><span class="line">server.host: <span class="string">&quot;0.0.0.0&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#配置Elasticsearch</span></span><br><span class="line">elasticsearch.url: <span class="string">&quot;http://127.0.0.1:9200&quot;</span> </span><br></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>修改配置完成后，我们就可以启动kibana了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">./bin/kibana</span><br></pre></td></tr></table></figure>
<p>点击启动，发现报错了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095310.png" alt="image-20200924195011533"></p>
<p>原因是kibana不能使用root用户进行启动，所以我们切换到elsearch用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将soft文件夹的所属者改成elsearch</span></span><br><span class="line">chown elsearch:elsearch /soft/ -R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su elsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./bin/kibana</span><br></pre></td></tr></table></figure>
<p>然后打开下面的地址，即可访问我们的kibana了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://202.193.56.222:5601/</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095311.png" alt="image-20200924200502907"></p>
<h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095312.png" alt="image-20200924200615995"></p>
<ul>
<li>Discover：数据探索</li>
<li>Visualize：可视化</li>
<li>Dashboard：仪表盘</li>
<li>Timelion：时序控件</li>
<li>Canvas：画布</li>
<li>Machine Learning：机器学习</li>
<li>Infrastructure：基本信息</li>
<li>Logs：数据日志展示</li>
<li>APM：性能监控</li>
<li>Dev Tools：开发者工具</li>
<li>Monitoring：监控</li>
<li>Management：管理</li>
</ul>
<h2 id="数据探索"><a href="#数据探索" class="headerlink" title="数据探索"></a>数据探索</h2><p>先添加索引信息</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095313.png" alt="image-20200924201110208"></p>
<p>然后我们就输入匹配规则进行匹配</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095314.png" alt="image-20200924201234997"></p>
<p>然后选择时间字段，一般选择第一个</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095315.png" alt="image-20200924201312845"></p>
<p>索引创建完毕后</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095316.png" alt="image-20200924201354838"></p>
<p>然后我们就可以往nginx error.log日志文件中，添加几天错误记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello error&quot;</span> &gt;&gt; error.log</span><br></pre></td></tr></table></figure>
<p>我们追加了两条数据，然后到kibana的discover中，刷新页面，就能够看到我们刚添加的日志了，同时我们点击右侧还可以选择需要展示的字段，非常的方便</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095317.png" alt="image-20200924201952010"></p>
<p>点击右上角，我们还可以针对时间来进行过滤</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095318.png" alt="image-20200924202210114"></p>
<h2 id="Metricbeat仪表盘"><a href="#Metricbeat仪表盘" class="headerlink" title="Metricbeat仪表盘"></a>Metricbeat仪表盘</h2><p>现在将Metricbeat的数据展示在Kibana中，首先需要修改我们的MetricBeat配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改metricbeat配置</span></span><br><span class="line">setup.kibana:</span><br><span class="line">  host: <span class="string">&quot;192.168.40.133:5601&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#安装仪表盘到Kibana【需要确保Kibana在正常运行，这个过程可能会有些耗时】</span></span><br><span class="line">./metricbeat setup --dashboards</span><br></pre></td></tr></table></figure>
<p>安装完成后，如下所示</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095319.png" alt="image-20200924203831606"></p>
<p>然后我们启动Metricbeat</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;metricbeat -e</span><br></pre></td></tr></table></figure>
<p>然后到kibana页面下，找到我们刚刚安装的仪表盘</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095320.png" alt="image-20200924204708099"></p>
<p>然后我们就能够看到非常多的指标数据了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095321.png" alt="image-20200924204636176"></p>
<h2 id="Nginx指标仪表盘【Metricbeat】"><a href="#Nginx指标仪表盘【Metricbeat】" class="headerlink" title="Nginx指标仪表盘【Metricbeat】"></a>Nginx指标仪表盘【Metricbeat】</h2><p>选择Metricbeat的nginx仪表盘即可</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095322.png" alt="image-20200924205523107"></p>
<p>然后就能够看到Nginx的指标信息了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095323.png" alt="image-20200924205552446"></p>
<h2 id="Nginx日志仪表盘"><a href="#Nginx日志仪表盘" class="headerlink" title="Nginx日志仪表盘"></a>Nginx日志仪表盘</h2><p>我们可以和刚刚Metricbeat的仪表盘一样，也可以将filebeat收集的日志记录，推送到Kibana中</p>
<p>首先我们需要修改filebeat的 mogublog-nginx.yml配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">  <span class="attr">index.number_of_shards:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;127.0.0.1:9200&quot;</span>]</span><br><span class="line"><span class="attr">filebeat.config.modules:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class="line">  <span class="attr">reload.enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">setup.kibana:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;127.0.0.1:5601&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后按照仪表盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./filebeat -c mogublog-nginx.yml setup</span><br></pre></td></tr></table></figure>
<p>等待一会后，仪表盘也安装成功了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095324.png" alt="image-20200924210454873"></p>
<p>然后我们启动filebeat即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./filebeat -e -c mogublog-nginx.yml</span><br></pre></td></tr></table></figure>
<p>启动完成后，我们回到我们的Kibana中，找到Dashboard，添加我们的filebeat - nginx即可</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095325.png" alt="image-20200924210913557"></p>
<p>然后就能看到我们的仪表盘了，上图就是请求的来源</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095326.png" alt="image-20200924210816489"></p>
<blockquote>
<p>需要注意的是，这些仪表盘本身是没有的，我们需要通过filebeat来进行安装</p>
</blockquote>
<h2 id="Kibana自定义仪表盘"><a href="#Kibana自定义仪表盘" class="headerlink" title="Kibana自定义仪表盘"></a>Kibana自定义仪表盘</h2><p>在Kibana中，我们也可以自定义图标，如制作柱形图</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095327.png" alt="image-20200924211227780"></p>
<p>我们选择最下面的 Vertical Bar，也就是柱形图，然后在选择我们的索引</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095328.png" alt="image-20200924211318386"></p>
<p>这样就出来了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095329.png" alt="image-20200924211427643"></p>
<h2 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h2><p>在Kibana中，为开发者的测试提供了便捷的工具使用，如下：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095330.png" alt="image-20200924211727920"></p>
<p>我们就可以在这里面写一些请求了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095331.png" alt="image-20200924212137167"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>ELK</category>
        <category>Kibana</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>Logstash学习笔记</title>
    <url>/2021/01/07/Logstash%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Logstash入门简介"><a href="#Logstash入门简介" class="headerlink" title="Logstash入门简介"></a>Logstash入门简介</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Logstash是一个开源的服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到最喜欢的存储库中（我们的存储库当然是ElasticSearch）</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095421.png" alt="image-20200924213006328"></p>
<p>我们回到我们ElasticStack的架构图，可以看到Logstash是充当数据处理的需求的，当我们的数据需要处理的时候，会将它发送到Logstash进行处理，否则直接送到ElasticSearch中</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095422.png" alt="image-20200924213319642"></p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>Logstash可以处理各种各样的输入，从文档，图表中=，数据库中，然后处理完后，发送到</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095423.png" alt="image-20200924213350345"></p>
<h2 id="部署安装"><a href="#部署安装" class="headerlink" title="部署安装"></a>部署安装</h2><p>Logstash主要是将数据源的数据进行一行一行的处理，同时还直接过滤切割等功能。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095424.png" alt="image-20200924214152859"></p>
<p>首先到官网下载logstash：<a href="https://www.elastic.co/cn/downloads/logstash">https://www.elastic.co/cn/downloads/logstash</a></p>
<p>选择我们需要下载的版本：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095425.png" alt="image-20200924215805219"></p>
<p>下载完成后，使用xftp工具，将其丢入到服务器中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查jdk环境，要求jdk1.8+</span></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压安装包</span></span><br><span class="line">tar -xvf logstash-7.9.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一个logstash示例</span></span><br><span class="line">bin/logstash -e <span class="string">&#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>其实原来的logstash的作用，就是为了做数据的采集，但是因为logstash的速度比较慢，所以后面使用beats来代替了Logstash，当我们使用上面的命令进行启动的时候，就可以发现了，因为logstash使用java写的，首先需要启动虚拟机，最后下图就是启动完成的截图</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095426.png" alt="image-20200924221006644"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们在控制台输入 hello，马上就能看到它的输出信息</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095427.png" alt="image-20200924221052791"></p>
<h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><p>Logstash的配置有三部分，如下所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input &#123; <span class="comment">#输入</span></span><br><span class="line">stdin &#123; ... &#125; <span class="comment">#标准输入</span></span><br><span class="line">&#125;</span><br><span class="line">filter &#123; <span class="comment">#过滤，对数据进行分割、截取等处理</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">output &#123; <span class="comment">#输出</span></span><br><span class="line">stdout &#123; ... &#125; <span class="comment">#标准输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ul>
<li>采集各种样式、大小和来源的数据，数据往往以各种各样的形式，或分散或集中地存在于很多系统中。</li>
<li>Logstash 支持各种输入选择 ，可以在同一时间从众多常用来源捕捉事件。能够以连续的流式传输方式，轻松地从您的日志、指标、Web 应用、数据存储以及各种 AWS 服务采集数据。</li>
</ul>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095428.png" alt="image-20200924221256569"></p>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><ul>
<li>实时解析和转换数据</li>
<li>数据从源传输到存储库的过程中，Logstash 过滤器能够解析各个事件，识别已命名的字段以构建结构，并将它们转换成通用格式，以便更轻松、更快速地分析和实现商业价值。</li>
</ul>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095429.png" alt="image-20200924221459397"></p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>Logstash 提供众多输出选择，您可以将数据发送到您要指定的地方，并且能够灵活地解锁众多下游用例。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095430.png" alt="image-20200924221528089"></p>
<h2 id="读取自定义日志"><a href="#读取自定义日志" class="headerlink" title="读取自定义日志"></a>读取自定义日志</h2><p>前面我们通过Filebeat读取了nginx的日志，如果是自定义结构的日志，就需要读取处理后才能使用，所以，这个时候就需要使用Logstash了，因为Logstash有着强大的处理能力，可以应对各种各样的场景。</p>
<h3 id="日志结构"><a href="#日志结构" class="headerlink" title="日志结构"></a>日志结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2019-03-15 21:21:21|ERROR|1 读取数据出错|参数：id=1002</span><br></pre></td></tr></table></figure>
<p>可以看到，日志中的内容是使用“|”进行分割的，使用，我们在处理的时候，也需要对数据做分割处理。</p>
<h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim mogublog-pipeline.conf</span><br></pre></td></tr></table></figure>
<p>然后添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; <span class="string">&quot;/soft/beats/logs/app.log&quot;</span></span><br><span class="line">        start_position =&gt; <span class="string">&quot;beginning&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">    	split =&gt; &#123;<span class="string">&quot;message&quot;</span>=&gt;<span class="string">&quot;|&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">	stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">./bin/logstash -f ./mogublog-pipeline.conf</span><br></pre></td></tr></table></figure>
<p>然后我们就插入我们的测试数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2019-03-15 21:21:21|ERROR|读取数据出错|参数：id=1002&quot;</span> &gt;&gt; app.log</span><br></pre></td></tr></table></figure>
<p>然后我们就可以看到logstash就会捕获到刚刚我们插入的数据，同时我们的数据也被分割了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095431.png" alt="image-20200924224710757"></p>
<h3 id="输出到Elasticsearch"><a href="#输出到Elasticsearch" class="headerlink" title="输出到Elasticsearch"></a>输出到Elasticsearch</h3><p>我们可以修改我们的配置文件，将我们的日志记录输出到ElasticSearch中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; <span class="string">&quot;/soft/beats/logs/app.log&quot;</span></span><br><span class="line">        start_position =&gt; <span class="string">&quot;beginning&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">    	split =&gt; &#123;<span class="string">&quot;message&quot;</span>=&gt;<span class="string">&quot;|&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">	elasticsearch &#123;</span><br><span class="line">		hosts =&gt; [<span class="string">&quot;127.0.0.1:9200&quot;</span>]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在重启我们的logstash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/logstash -f ./mogublog-pipeline.conf</span><br></pre></td></tr></table></figure>
<p>然后向日志记录中，插入两条数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2019-03-15 21:21:21|ERROR|读取数据出错|参数：id=1002&quot;</span> &gt;&gt; app.log</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2019-03-15 21:21:21|ERROR|读取数据出错|参数：id=1002&quot;</span> &gt;&gt; app.log</span><br></pre></td></tr></table></figure>
<p>最后就能够看到我们刚刚插入的数据了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095432.png" alt="image-20200924230314560"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>ELK</category>
        <category>Logstash</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis &lt;if&gt;标签的使用问题</title>
    <url>/2021/01/07/Mybatis%20%EF%BC%9Cif%EF%BC%9E%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mybatis-标签的使用问题"><a href="#Mybatis-标签的使用问题" class="headerlink" title="Mybatis 标签的使用问题"></a>Mybatis <if>标签的使用问题</h1><p>今天在使用Mybatis的时候发现前端传参’0’无效，无法更新字段，于是第一想到的就是百度解决，果然百度上已经有不少的案例了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update bl_type</span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeName!=null and typeNmae!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    type_name = #&#123;typeName&#125;,</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeBlogCount!=null and typeBlogCount!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    type_blog_count = #&#123;typeBlogCount&#125;,</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;enable!=null&quot;</span>&gt;</span></span><br><span class="line">                    enable = #&#123;enable&#125;,</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where type_id = #&#123;typeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用mybatis 写mapper.xml文件时，使用if标签如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeName!=null and typeNmae!=&#x27;&#x27;&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>这时如果传入的参数为0的话会被忽略掉 无法正常的更新</p>
<p>使用if标签的嵌套经测试也是会忽略参数’0</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update bl_type</span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeName!=null&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeName!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    type_name = #&#123;typeName&#125;,</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeBlogCount!=null&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeBlogCount!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    type_blog_count = #&#123;typeBlogCount&#125;,</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;enable!=null&quot;</span>&gt;</span></span><br><span class="line">                    enable = #&#123;enable&#125;,</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where type_id = #&#123;typeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果if标签判断的是字段是否为空字符串也会忽略参数’0’</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update bl_type</span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeName!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    type_name = #&#123;typeName&#125;,</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeBlogCount!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    type_blog_count = #&#123;typeBlogCount&#125;,</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;enable!=null&quot;</span>&gt;</span></span><br><span class="line">                    enable = #&#123;enable&#125;,</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where type_id = #&#123;typeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结论是if标签只有如以下代码时才不省略参数’’0’：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update bl_type</span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeName!=null&quot;</span>&gt;</span></span><br><span class="line">                    type_name = #&#123;typeName&#125;,</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeBlogCount!=null&quot;</span>&gt;</span></span><br><span class="line">                    type_blog_count = #&#123;typeBlogCount&#125;,</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;enable!=null&quot;</span>&gt;</span></span><br><span class="line">                    enable = #&#123;enable&#125;,</span><br><span class="line">                <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where type_id = #&#123;typeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>那么又有问题来了，如果前台传来一个字符串时，某些字段就会被置为空字符串，这个怎么解决呢？</p>
<p>—————————————更新————————————-</p>
<p>问题已解决</p>
<p>为什么会出现这个问题？</p>
<p>因为在mybatis源码中有将空字符串给转换为0这个操作 所以我们传入的参数’0’时就会被判断与空字符串相等 所以if标签的结果值为false</p>
<p><img src="https://img-blog.csdnimg.cn/20200810225335144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 参考资料：<a href="https://blog.csdn.net/Dongguabai/article/details/82981250">https://blog.csdn.net/Dongguabai/article/details/82981250</a></p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>dubbo-admin登录问题</title>
    <url>/2021/01/07/dubbo-admin%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="dubbo-admin登录问题"><a href="#dubbo-admin登录问题" class="headerlink" title="dubbo-admin登录问题"></a>dubbo-admin登录问题</h1><p>今天在学习dubbo时，clone了dubbo-admin这个dubbo的后台管理项目，结果配置了密码之后发现一直登录不上，也没有任何报错等消息，经过了不少时间的测试和在网上翻阅博客，发现了原来是配置文件里面有一个坑，我习惯性的认为是配置的是账号与密码，结果发现是配置的root的密码和guest的密码。无语。。。。。<br><img src="https://img-blog.csdnimg.cn/20200915205347940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>shiroFilter踩坑</title>
    <url>/2021/01/07/shiroFilter%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="shiroFilter踩坑"><a href="#shiroFilter踩坑" class="headerlink" title="shiroFilter踩坑"></a>shiroFilter踩坑</h1><p>今天出门了一趟，没有关电脑，服务器一直开着，回来发现某一些shiro设置了放行的后端接口竟然无法访问了。经过一段时间的debug，总的来说找到了原因，就是shiro过滤器的问题，通过搜索资料找到了问题根源。原来是HashMap和LinkedMap的问题。 我使用的是HashMap，HashMap不会按照顺序去存储，而shiro有个要求，就是”<strong>authc”</strong> 这个权限必须得放在放行权限的后面”<strong>anon</strong>“。所以使用HashMap时会导致某一些需要放行的接口被放在了authc下面，导致放行无效。</p>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro+redis整合实现session持久化登陆失败时也会生成session问题</title>
    <url>/2021/01/07/shiro+redis%E6%95%B4%E5%90%88%E5%AE%9E%E7%8E%B0session%E6%8C%81%E4%B9%85%E5%8C%96%E7%99%BB%E9%99%86%E5%A4%B1%E8%B4%A5%E6%97%B6%E4%B9%9F%E4%BC%9A%E7%94%9F%E6%88%90session%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在给博客更新，将session存到redis中持久化存储，正常操作是没问题的，但是后来尝试发现，在我输入的密码是错误的时候，他也创建了session，经过我的一番从尾到头的debug。。。。<br>复杂的debug过程就不贴出来了，放出问题的根源<br>在登陆时，会访问到我用来记录日志的切面,而我的记录日志方法中有一个需要获取到当前登录的用户的信息，来完善日志的字段</p>
<blockquote>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9126eb184f07ef4079eddf3e1361a4c4.png" alt="image.png"><br>以下是工具类中的原方法：<br><img src="https://img-blog.csdnimg.cn/img_convert/7cd9178191e483f567ef7b0f94e7ffae.png" alt="image.png"><br>以下是修改后的方法<br><img src="https://img-blog.csdnimg.cn/img_convert/be57bae0b018c7e7f5257c8f40856bd8.png" alt="image.png"><br>这就是问题的根源，因为在我登录的时候，要记录日志，然后去调用工具类，工具类去获取session，如果没有getSession(false)的话，就会判断session是否存在，如果不存在的话就会自动创建session，这就是为什么明明密码错了还会创建session的原因</p>
</blockquote>
]]></content>
      <categories>
        <category>Shiro</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot 后端传给前端相差8小时</title>
    <url>/2021/01/07/springboot%20%E5%90%8E%E7%AB%AF%E4%BC%A0%E7%BB%99%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%B7%AE8%E5%B0%8F%E6%97%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 在开发中日期最常打交道的东西之一，但是日期又会存在各式各样的格式，常见的情形就是，从数据库取出的日期往往都是时间戳（毫秒数）的形式，这个一般情况下是前端不想要的结果，需要进行处理，那在springboot中比较简单：<br>因为后端传给前端时默认使用jackson转换格式所以我们可以</p>
<ol>
<li>在application.yml中设置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br></pre></td></tr></table></figure></li>
<li>在pojo对象上添加@JsonFormat注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date createdTime;</span><br></pre></td></tr></table></figure>
但是我在尝试了这两个方法以及相类似的方法，但是都无效，要么就是格式化无效，直接返回的时间戳，要么就是时间还是相差8个小时，但是格式化有效。</li>
</ol>
<p>这时我看到了另外一篇不一样的博客，随后明白了为什么我的配置没有用，原来是因为我添加拦截器时写的配置类的问题。<br>以下代码是我更改之前的配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.blog.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.wsy.blog.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/10 11:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginInterceptor <span class="title">getLoginInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry  拦截器注册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/*/login&quot;</span>);;</span><br><span class="line">        <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里大家注意，看看自己的代码有没有因为添加拦截器而创建了一个配置类，该类继承了<code>WebMvcConfigurationSupport</code>，就是他！以前是用 <code>WebMvcConfigurerAdapter</code> ，springboot 2.0 建议使用 <code>WebMvcConfigurationSupport</code> 。但是在添加拦截器并继承 <code>WebMvcConfigurationSupport</code> 后会覆盖<code>@EnableAutoConfiguration</code>关于<code>WebMvcAutoConfiguration</code>的配置！从而导致所有的Date返回都变成时间戳！<br>可以采用另外一种方式，在你继承<code>WebMvcConfigurationSupport</code>的子类中添加日期转换的bean<br>以下是我更改后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.blog.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.wsy.blog.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/8/10 11:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginInterceptor <span class="title">getLoginInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义时间格式转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  MappingJackson2HttpMessageConverter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MappingJackson2HttpMessageConverter <span class="title">jackson2HttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MappingJackson2HttpMessageConverter converter = <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">        mapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        converter.setObjectMapper(mapper);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters    converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将我们定义的时间格式转换器添加到转换器列表中,</span></span><br><span class="line">        <span class="comment">//这样jackson格式化时候但凡遇到Date类型就会转换成我们定义的格式</span></span><br><span class="line">        converters.add(jackson2HttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry  拦截器注册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/*/login&quot;</span>);;</span><br><span class="line">        <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 感谢博主的分享经验<br>参考博客：<a href="https://blog.csdn.net/qq_34975710/article/details/84872489">https://blog.csdn.net/qq_34975710/article/details/84872489</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希表学习笔记</title>
    <url>/2021/01/17/%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-哈希表"><a href="#1-哈希表" class="headerlink" title="1.哈希表"></a>1.哈希表</h2><h3 id="1-1-哈希表-散列-Google-上机题"><a href="#1-1-哈希表-散列-Google-上机题" class="headerlink" title="1.1 哈希表(散列)-Google 上机题"></a>1.1 哈希表(散列)-Google 上机题</h3><ol>
<li><p>看一个实际需求，google 公司的一个上机题: </p>
</li>
<li><p>有一个公司,当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,住址..),当输入该员工的 id 时,要求查 找到该员工的 所有信息. </p>
</li>
<li><p>要求: 不使用数据库,尽量节省内存,速度越快越好=&gt;哈希表(散列)</p>
</li>
</ol>
<h3 id="1-2-哈希表的基本介绍"><a href="#1-2-哈希表的基本介绍" class="headerlink" title="1.2 哈希表的基本介绍"></a>1.2 哈希表的基本介绍</h3><p>散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通 过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组 叫做散列表。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210117151659.png" alt="image-20210117151611781"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210117151700.png" alt="image-20210117151618499"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210117151701.png" alt="image-20210117151628457"></p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.hashTable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-17 14:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 哈希表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashTableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建哈希表</span></span><br><span class="line">        HashTable hashTab = <span class="keyword">new</span> HashTable(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写一个简单的菜单</span></span><br><span class="line">        String key = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;add:  添加雇员&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;list: 显示雇员&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;find: 查找雇员&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;delete: 删除雇员&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;exit: 退出系统&quot;</span>);</span><br><span class="line"></span><br><span class="line">            key = scanner.next();</span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入id&quot;</span>);</span><br><span class="line">                    <span class="keyword">int</span> id = scanner.nextInt();</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入名字&quot;</span>);</span><br><span class="line">                    String name = scanner.next();</span><br><span class="line">                    <span class="comment">//创建 雇员</span></span><br><span class="line">                    Emp emp = <span class="keyword">new</span> Emp(id, name);</span><br><span class="line">                    hashTab.add(emp);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;list&quot;</span>:</span><br><span class="line">                    hashTab.list();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;find&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入要查找的id&quot;</span>);</span><br><span class="line">                    id = scanner.nextInt();</span><br><span class="line">                    hashTab.findEmpById(id);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入要删除的id&quot;</span>);</span><br><span class="line">                    id = scanner.nextInt();</span><br><span class="line">                    hashTab.deleteEmpById(id);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 哈希表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashTable</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        empLinkedListArray = <span class="keyword">new</span> EmpLinkedList[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; empLinkedListArray.length; i++) &#123;</span><br><span class="line">            empLinkedListArray[i] = <span class="keyword">new</span> EmpLinkedList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emp 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> empLinkedListIndex = hash(emp.id);</span><br><span class="line">        empLinkedListArray[empLinkedListIndex].add(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; empLinkedListArray.length; i++) &#123;</span><br><span class="line">            empLinkedListArray[i].list(i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查找</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> empLinkedListIndex = hash(id);</span><br><span class="line">        Emp emp = empLinkedListArray[empLinkedListIndex].find(id);</span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到该节点&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在第&quot;</span> + (empLinkedListIndex + <span class="number">1</span>) + <span class="string">&quot;条链表找到了&quot;</span> + emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmpById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> empLinkedListIndex = hash(id);</span><br><span class="line">        Emp emp = empLinkedListArray[empLinkedListIndex].delete(id);</span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到该节点&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在第&quot;</span> + (empLinkedListIndex + <span class="number">1</span>) + <span class="string">&quot;条删除了了&quot;</span> + emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 散列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id % <span class="keyword">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 雇员链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmpLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Emp head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emp 雇员信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = emp;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Emp temp = head;</span><br><span class="line">        <span class="comment">//移动到最后一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = emp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + (no + <span class="number">1</span>) + <span class="string">&quot;条链表为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Emp temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(temp + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 雇员节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">find</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Emp temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span> &amp;&amp; temp.id != id) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除的节点信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Emp temp = head;</span><br><span class="line">        Emp lastTemp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//如果要删除的是头节点</span></span><br><span class="line">        <span class="keyword">if</span> (head.id == id) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span> &amp;&amp; temp.id != id) &#123;</span><br><span class="line">            lastTemp = temp;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            lastTemp.next = temp.next;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 雇员节点类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Emp next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构</category>
        <category>HashTable</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>HashTable</tag>
      </tags>
  </entry>
  <entry>
    <title>稀疏矩阵学习笔记</title>
    <url>/2021/01/07/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-稀疏数组"><a href="#1-稀疏数组" class="headerlink" title="1.稀疏数组"></a>1.稀疏数组</h2><blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107182140.png" alt="image-20210107181603999"></p>
</blockquote>
<h3 id="1-1分析问题"><a href="#1-1分析问题" class="headerlink" title="1.1分析问题"></a>1.1分析问题</h3><p>因为该二维数组的很多值是默认值 0, 因此记录了很多没有意义的数据.-&gt;稀疏数组。</p>
<h3 id="1-2基本介绍"><a href="#1-2基本介绍" class="headerlink" title="1.2基本介绍"></a>1.2基本介绍</h3><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。 稀疏数组的处理方法是: 1) 记录数组一共有几行几列，有多少个不同的值 2) 把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</p>
<ul>
<li><p>稀疏数组举例说明</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107182141.png" alt="image-20210107181647446"></p>
</li>
</ul>
<h3 id="1-3应用实例"><a href="#1-3应用实例" class="headerlink" title="1.3应用实例"></a>1.3应用实例</h3><ol>
<li><p>使用稀疏数组，来保留类似前面的二维数组(棋盘、地图等等) </p>
</li>
<li><p>把稀疏数组存盘，并且可以从新恢复原来的二维数组数</p>
</li>
<li><p>整体思路分析</p>
</li>
</ol>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107182142.png" alt="image-20210107181808332"></p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.sparsearray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-28 2:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 稀疏数组实现棋盘的存储和加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个原始的二维数组 11 * 11</span></span><br><span class="line">        <span class="comment">//0: 表示没有棋子， 1 表示 黑子 2 表蓝子</span></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        <span class="comment">//设置已经下的棋子</span></span><br><span class="line">        arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        arr[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;原数组：&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 遍历  原始的二维数组，得到有效数据的个数 sum</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : arr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> num : ints) &#123;</span><br><span class="line">                System.out.print(num + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;有效数值共：&quot;</span> + sum);</span><br><span class="line">        <span class="comment">//2. 根据sum 就可以创建 稀疏数组 sparseArr   int[sum + 1] [3]</span></span><br><span class="line">        <span class="keyword">int</span>[][] sparseArr = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//存取稀疏数组第一行 分别存储原数组的行、列、有效数据</span></span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">0</span>] = arr.length;</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">1</span>] = arr[<span class="number">0</span>].length;</span><br><span class="line">        sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line">        <span class="comment">//3. 将二维数组的有效数据数据存入到 稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">                <span class="comment">//如果数组的数据不是0的话就需要存入稀疏矩阵</span></span><br><span class="line">                <span class="keyword">if</span> (arr[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArr[count][<span class="number">2</span>] = arr[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.将稀疏数组写入文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;d:/arr.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//如果该文件不存在，就创建</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> newFile = file.createNewFile();</span><br><span class="line">            <span class="keyword">if</span>(newFile) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;成功创建文件！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;稀疏数组：&quot;</span>);</span><br><span class="line">        <span class="comment">//创建文件字符输出流</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : sparseArr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> num : ints) &#123;</span><br><span class="line">                System.out.print(num + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                fw.write(num + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            fw.write(<span class="string">&quot;\t\n&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        fw.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.读取稀疏数组文件恢复稀疏数组</span></span><br><span class="line">        <span class="comment">//创建恢复稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] resotreSparseArr = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//创建文件字符输入流</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        <span class="comment">//创建字符输入缓冲流</span></span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">        String str;</span><br><span class="line">        <span class="comment">//逐行遍历</span></span><br><span class="line">        <span class="keyword">int</span> line = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((str = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//用\t来做分割</span></span><br><span class="line">            String[] split = str.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            resotreSparseArr[line][<span class="number">0</span>] = Integer.parseInt(split[<span class="number">0</span>]);</span><br><span class="line">            resotreSparseArr[line][<span class="number">1</span>] = Integer.parseInt(split[<span class="number">1</span>]);</span><br><span class="line">            resotreSparseArr[line][<span class="number">2</span>] = Integer.parseInt(split[<span class="number">2</span>]);</span><br><span class="line">            line++;</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        fr.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复后的稀疏数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : resotreSparseArr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> num : ints) &#123;</span><br><span class="line">                System.out.print(num + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，比如上面的  chessArr2 = int [11][11]</span></span><br><span class="line">        <span class="keyword">int</span>[][] restoreArr = <span class="keyword">new</span> <span class="keyword">int</span>[resotreSparseArr[<span class="number">0</span>][<span class="number">0</span>]][resotreSparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="comment">//3. 在读取稀疏数组后几行的数据，并赋给 原始的二维数组 即可.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; resotreSparseArr.length; i++) &#123;</span><br><span class="line">            restoreArr[resotreSparseArr[i][<span class="number">0</span>]][resotreSparseArr[i][<span class="number">1</span>]] = resotreSparseArr[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复后的源原数组：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : restoreArr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> num : ints) &#123;</span><br><span class="line">                System.out.print(num + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>递归回溯学习笔记</title>
    <url>/2021/01/08/%E9%80%92%E5%BD%92%E5%9B%9E%E6%BA%AF%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-递归"><a href="#1-递归" class="headerlink" title="1.递归"></a>1.递归</h2><h3 id="1-1递归应用场景"><a href="#1-1递归应用场景" class="headerlink" title="1.1递归应用场景"></a>1.1递归应用场景</h3><p>看个实际应用场景，迷宫问题(回溯)， 递归(Recursion)</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108172010.png" alt="image-20210108153737509"></p>
<h3 id="1-2递归的概念"><a href="#1-2递归的概念" class="headerlink" title="1.2递归的概念"></a>1.2递归的概念</h3><p>简单的说: 递归就是<strong>方法自己调用自己</strong>,每次调用时<strong>传入不同的变量</strong>.递归有助于编程者解决复杂的问题,同时 可以让代码变得简洁。</p>
<h3 id="1-3递归调用机制"><a href="#1-3递归调用机制" class="headerlink" title="1.3递归调用机制"></a>1.3递归调用机制</h3><p>我列举两个小案例,来帮助大家理解递归，部分学员已经学习过递归了，这里在给大家回顾一下递归调用机制</p>
<ol>
<li><p>打印问题 </p>
</li>
<li><p>阶乘问题 </p>
</li>
<li><p>使用图解方式说明了递归的调用机制</p>
</li>
</ol>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108172011.png" alt="image-20210108153832379"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//通过打印问题，回顾递归调用机制</span></span><br><span class="line"><span class="comment">//test(4);</span></span><br><span class="line">        <span class="keyword">int</span> res = factorial(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;res=&quot;</span> + res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印问题.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            test(n - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="comment">//else &#123;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n=&quot;</span> + n);</span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//阶乘问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> factorial(n - <span class="number">1</span>) * n; <span class="comment">// 1 * 2 * 3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-4递归能解决什么样的问题"><a href="#1-4递归能解决什么样的问题" class="headerlink" title="1.4递归能解决什么样的问题"></a>1.4递归能解决什么样的问题</h3><p>递归用于解决什么样的问题</p>
<ol>
<li><p>各种数学问题如: 8 皇后问题 , 汉诺塔, 阶乘问题, 迷宫问题, 球和篮子的问题(google 编程大赛) </p>
</li>
<li><p>各种算法中也会使用到递归，比如快排，归并排序，二分查找，分治算法等. </p>
</li>
<li><p>将用栈解决的问题–&gt;递归代码比较简洁</p>
</li>
</ol>
<h4 id="1-5递归需要遵守的重要规则"><a href="#1-5递归需要遵守的重要规则" class="headerlink" title="1.5递归需要遵守的重要规则"></a>1.5递归需要遵守的重要规则</h4><p>递归需要遵守的重要规则</p>
<ol>
<li><p>执行一个方法时，就创建一个新的受保护的独立空间(栈空间) </p>
</li>
<li><p>方法的局部变量是独立的，不会相互影响, 比如 n 变量 </p>
</li>
<li><p>如果方法中使用的是引用类型变量(比如数组)，就会共享该引用类型的数据. </p>
</li>
<li><p>递归必须向退出递归的条件逼近，否则就是无限递归,出现 StackOverflowError，死龟了:) </p>
</li>
<li><p>当一个方法执行完毕，或者遇到 return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或 者返回时，该方法也就执行完毕</p>
</li>
</ol>
<h3 id="1-6递归-迷宫问题"><a href="#1-6递归-迷宫问题" class="headerlink" title="1.6递归-迷宫问题"></a>1.6递归-迷宫问题</h3><h4 id="1-6-1迷宫问题"><a href="#1-6-1迷宫问题" class="headerlink" title="1.6.1迷宫问题"></a>1.6.1迷宫问题</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108172012.png" alt="image-20210108170740965"></p>
<h4 id="1-6-2代码实现"><a href="#1-6-2代码实现" class="headerlink" title="1.6.2代码实现"></a>1.6.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.recursion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-01 13:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 迷宫</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Maze</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个大小为8行7列的地图</span></span><br><span class="line">        <span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line">        <span class="comment">// 使用1 表示墙</span></span><br><span class="line">        <span class="comment">// 上下全部置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左右全部置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置挡板, 1 表示</span></span><br><span class="line">        map[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//		map[1][2] = 1;</span></span><br><span class="line"><span class="comment">//		map[2][2] = 1;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出地图</span></span><br><span class="line">        System.out.println(<span class="string">&quot;地图的情况&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用递归回溯给小球找路</span></span><br><span class="line">        setWay(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出新的地图, 小球走过，并标识过的递归</span></span><br><span class="line">        System.out.println(<span class="string">&quot;小球走过，并标识过的 地图的情况&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * //使用递归回溯来给小球找路</span></span><br><span class="line"><span class="comment">     * //说明</span></span><br><span class="line"><span class="comment">     * //1. map 表示地图</span></span><br><span class="line"><span class="comment">     * //2. i,j 表示从地图的哪个位置开始出发 (1,1)</span></span><br><span class="line"><span class="comment">     * //3. 如果小球能到 map[6][5] 位置，则说明通路找到.</span></span><br><span class="line"><span class="comment">     * //4. 约定： 当map[i][j] 为 0 表示该点没有走过 当为 1 表示墙  ； 2 表示通路可以走 ； 3 表示该点已经走过，但是走不通</span></span><br><span class="line"><span class="comment">     * //5. 在走迷宫时，需要确定一个策略(方法) 右-&gt;下-&gt;左-&gt;上 , 如果该点走不通，再回溯</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 地图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i   表示地图开始的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j   表示地图开始的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">setWay</span><span class="params">(<span class="keyword">int</span>[][] map, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>+(++count)+<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">7</span>; l++) &#123;</span><br><span class="line">                System.out.print(map[k][l] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//map[6][5]代表终点 如果终点被标注为2了代表已经走通了 直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果该点还没有走过则暂定他是可以走通的</span></span><br><span class="line">                map[i][j] = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (setWay(map, i, j + <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i + <span class="number">1</span>, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i, j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i - <span class="number">1</span>, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//代表上下左右都走不通 是死路则标注为3</span></span><br><span class="line">                    map[i][j] = <span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//表示该点为1,2,3 而不是0 直接返回false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-6-3对迷宫问题的讨论"><a href="#1-6-3对迷宫问题的讨论" class="headerlink" title="1.6.3对迷宫问题的讨论"></a>1.6.3对迷宫问题的讨论</h4><ol>
<li><p>小球得到的路径，和程序员设置的找路策略有关即：找路的上下左右的顺序相关 </p>
</li>
<li><p>再得到小球路径时，可以先使用(下右上左)，再改成(上右下左)，看看路径是不是有变化 </p>
</li>
<li><p>测试回溯现象</p>
</li>
</ol>
<h3 id="1-7递归-八皇后问题-回溯算法"><a href="#1-7递归-八皇后问题-回溯算法" class="headerlink" title="1.7递归-八皇后问题(回溯算法)"></a>1.7递归-八皇后问题(回溯算法)</h3><h4 id="1-7-1八皇后问题介绍"><a href="#1-7-1八皇后问题介绍" class="headerlink" title="1.7.1八皇后问题介绍"></a>1.7.1八皇后问题介绍</h4><p>八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于 1848 年提出：在 8×8 格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、 同一列或同一斜线上，问有多少种摆法(92)。1.</p>
<h4 id="1-7-2八皇后问题算法思路分析"><a href="#1-7-2八皇后问题算法思路分析" class="headerlink" title="1.7.2八皇后问题算法思路分析"></a>1.7.2八皇后问题算法思路分析</h4><ol>
<li><p>第一个皇后先放第一行第一列 </p>
</li>
<li><p>第二个皇后放在第二行第一列、然后判断是否 OK， 如果不 OK，继续放在第二列、第三列、依次把所有列都 放完，找到一个合适 </p>
</li>
<li><p>继续第三个皇后，还是第一列、第二列……直到第 8 个皇后也能放在一个不冲突的位置，算是找到了一个正确 解 </p>
</li>
<li><p>当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解， 全部得到. </p>
</li>
<li><p>然后回头继续第一个皇后放第二列，后面继续循环执行 1,2,3,4 的步骤 </p>
</li>
<li><p>示意图:</p>
</li>
</ol>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108172013.png" alt="image-20210108171019528"></p>
<p>说明： </p>
<p>理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题. arr[8] = {0 , 4, 7, 5, 2, 6, 1, 3} //对应 arr 下标 表示第几行，即第几个皇后，arr[i] = val , val 表示第 i+1 个皇后，放在第 i+1 行的第 val+1 列</p>
<h4 id="1-7-3八皇后问题算法代码实现"><a href="#1-7-3八皇后问题算法代码实现" class="headerlink" title="1.7.3八皇后问题算法代码实现"></a>1.7.3八皇后问题算法代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.recursion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-02 20:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 八皇后问题</span></span><br><span class="line"><span class="comment"> * 八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于</span></span><br><span class="line"><span class="comment"> * 1848 年提出：在 8×8 格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、</span></span><br><span class="line"><span class="comment"> * 同一列或同一斜线上，问有多少种摆法(92)。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue8</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认是8个皇后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> max = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题. arr[8] =</span></span><br><span class="line"><span class="comment">     * &#123;0 , 4, 7, 5, 2, 6, 1, 3&#125; //对应 arr 下标 表示第几行，即第几个皇后，arr[i] = val , val 表示第 i+1 个皇后，放在第 i+1</span></span><br><span class="line"><span class="comment">     * 行的第 val+1 列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> judgeCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Queue8 queue8 = <span class="keyword">new</span> Queue8();</span><br><span class="line">        queue8.check(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;总共有解法：&quot;</span> + count);</span><br><span class="line">        System.out.println(<span class="string">&quot;总共进行了判断：&quot;</span> + judgeCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放置皇后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 代表n+1个皇后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="comment">//这时代表放置第9个皇后 说明8个皇后已经放置好了 代表一个解法已经做出来了</span></span><br><span class="line">            print();</span><br><span class="line">            <span class="comment">//在回溯后会继续执行循环 就是尝试将皇后移动到下一列 是否能够得到新解法 循环结束还没有找到则会继续回溯到上一个皇后</span></span><br><span class="line">            <span class="comment">//直到第一行的皇后将所有列尝试完</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环尝试放置第n+1个皇后的列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max ; i++) &#123;</span><br><span class="line">            <span class="comment">//尝试放置</span></span><br><span class="line">            arr[n] = i;</span><br><span class="line">            <span class="comment">//判断是否出冲突</span></span><br><span class="line">            <span class="keyword">if</span>(judge(n)) &#123;</span><br><span class="line">                <span class="comment">//如果结果为true代表没冲突可以放置下一个皇后</span></span><br><span class="line">                check(n+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果有冲突则执行下一次循环尝试将皇后放置在下一列</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断传入的皇后与之前的皇后是否有冲突</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 代表第n+1个皇后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  true：没冲突 false：有冲突</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        judgeCount++;</span><br><span class="line">        <span class="comment">//遍历传入的皇后之前放置的皇后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//arr[i] == arr[n] 判断的是传入的皇后与第i+1个皇后是否在同一列</span></span><br><span class="line">            <span class="comment">//Math.abs(n-i) == Math.abs(array[n] - array[i]) 表示判断第 n 个皇后是否和第 i 皇后是否在同一斜线</span></span><br><span class="line">            <span class="comment">//Math.abs(n-1)代表当前需要放置的皇后与当前判断的第i+1个皇后相差多少行</span></span><br><span class="line">            <span class="comment">//Math.abc(arr[n]-arr[i])代表当前需要放置的皇后与当前判断的第i+1个皇后相差多少列</span></span><br><span class="line">            <span class="comment">//如果相差的行和列是相等的则代表是在同一条斜线上</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i] == arr[n] || Math.abs(n-i) == Math.abs(arr[n] - arr[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构</category>
        <category>递归回溯</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>递归回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>队列学习笔记</title>
    <url>/2021/01/07/%E9%98%9F%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-队列"><a href="#1-队列" class="headerlink" title="1.队列"></a>1.队列</h2><h3 id="1-1队列的使用"><a href="#1-1队列的使用" class="headerlink" title="1.1队列的使用"></a>1.1队列的使用</h3><p>银行排队的案例:</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107182931.png" alt="image-20210107182107201"></p>
</blockquote>
<h3 id="1-2队列的介绍"><a href="#1-2队列的介绍" class="headerlink" title="1.2队列的介绍"></a>1.2队列的介绍</h3><ol>
<li><p>队列是一个有序列表，可以用数组或是链表来实现。 </p>
</li>
<li><p>遵循先入先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出</p>
</li>
<li><p>示意图：(使用数组模拟队列示意图)</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107182932.png" alt="image-20210107182313878"></p>
</li>
</ol>
<h3 id="1-3数组模拟队列思路"><a href="#1-3数组模拟队列思路" class="headerlink" title="1.3数组模拟队列思路"></a>1.3数组模拟队列思路</h3><ul>
<li><p>队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下图, 其中 maxSize 是该队 列的最大容量。 </p>
</li>
<li><p>因为队列的输出、输入是分别从前后端来处理，因此需要两个变量 front 及 rear 分别记录队列前后端的下标， front 会随着数据输出而改变，而 rear 则是随着数据输入而改变，如图所示:</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107182933.png" alt="image-20210107182359479"></p>
</li>
<li><p>当我们将数据存入队列时称为”addQueue”，addQueue 的处理需要有两个步骤：思路分析 1) 将尾指针往后移：rear+1 , 当 front == rear 【空】 2) 若尾指针 rear 小于队列的最大下标 maxSize-1，则将数据存入 rear 所指的数组元素中，否则无法存入数据。 rear == maxSize - 1[队列满]</p>
</li>
</ul>
<p>ArrayQueue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-28 8:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 数组队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> arr[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxSize 最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        <span class="comment">//让前指针指向头部的前一个</span></span><br><span class="line">        front = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//让后指针指向头部的前一个</span></span><br><span class="line">        rear = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否队列满</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否队列空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断是否队列满</span></span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前队列容量已满无法插入！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后指针后移</span></span><br><span class="line">        rear++;</span><br><span class="line">        arr[rear] = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列首部取出数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断是否队列空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;当前队列是空的无法取出数据！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//前指针后移</span></span><br><span class="line">        front++;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出队列所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断是否队列空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;当前队列是空的无法取出数据！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(i + <span class="string">&quot;  :&quot;</span> + arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示头元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  头元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">showHeadQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断是否队列空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;当前队列是空的无法取出数据！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArrayQueueDemo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-28 8:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 数组队列案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试一把</span></span><br><span class="line">        <span class="comment">//创建一个队列</span></span><br><span class="line">        ArrayQueue queue = <span class="keyword">new</span> ArrayQueue(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">char</span> key = <span class="string">&#x27; &#x27;</span>; <span class="comment">//接收用户输入</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//</span></span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s(show): 显示队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;e(exit): 退出程序&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;a(add): 添加数据到队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;g(get): 从队列取出数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;h(head): 查看队列头的数据&quot;</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">//接收一个字符</span></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        queue.showQueue();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入一个数&quot;</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    queue.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>: <span class="comment">//取出数据</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            res = queue.getQueue();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.printf(<span class="string">&quot;取出的数据是%d\n&quot;</span>, res);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>: <span class="comment">//查看队列头的数据</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = queue.showHeadQueue();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;队列头的数据是%d\n&quot;</span>, res);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: <span class="comment">//退出</span></span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序退出~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-4问题分析并优化"><a href="#1-4问题分析并优化" class="headerlink" title="1.4问题分析并优化"></a>1.4问题分析并优化</h3><ol>
<li><p>目前数组使用一次就不能用， 没有达到复用的效果</p>
</li>
<li><p>将这个数组使用算法，改进成一个环形的队列 取模：%</p>
</li>
</ol>
<h3 id="1-5数组模拟环形队列"><a href="#1-5数组模拟环形队列" class="headerlink" title="1.5数组模拟环形队列"></a>1.5数组模拟环形队列</h3><p>对前面的数组模拟队列的优化，充分利用数组. 因此将数组看做是一个环形的。(通过取模的方式来实现即可)</p>
<p>分析说明： </p>
<ol>
<li><p>尾索引的下一个为头索引时表示队列满，即将队列容量空出一个作为约定,这个在做判断队列满的 时候需要注意 (rear + 1) % maxSize == front 满] </p>
</li>
<li><p>rear == front [空]</p>
</li>
<li><p>分析示意图:</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107182934.png" alt="image-20210107182709464"></p>
</li>
</ol>
<p>CircleArrayQueue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-28 9:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 环形队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleArrayQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> arr[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxSize 最大容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleArrayQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        <span class="comment">//1.  front 变量的含义做一个调整： front 就指向队列的第一个元素, 也就是说 arr[front] 就是队列的第一个元素front 的初始值 = 0</span></span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//2.  rear 变量的含义做一个调整：rear 指向队列的最后一个元素的后一个位置. 因为希望空出一个空间做为约定.</span></span><br><span class="line">        rear = <span class="number">0</span>;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否队列满</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//假设rear = 3 maxSize = 4 front = 0 这时rear在数组的最后一个下标 而front在首个下标</span></span><br><span class="line">        <span class="comment">//这时通过+1 模取最大容量判断是否相等 如果相等的话则表示此事队列满了</span></span><br><span class="line">        <span class="keyword">return</span> (rear + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否队列空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断是否队列满</span></span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前队列容量已满无法插入！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//直接存入rear位置</span></span><br><span class="line">        arr[rear] = num;</span><br><span class="line">        <span class="comment">//rear下移 如果超过下标则需要进行模取后的下标</span></span><br><span class="line">        rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列首部取出数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断是否队列空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;当前队列是空的无法取出数据！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存储需要返回的值</span></span><br><span class="line">        <span class="keyword">int</span> value = arr[front];</span><br><span class="line">        <span class="comment">//front下移 需要考虑模取</span></span><br><span class="line">        front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出队列所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断是否队列空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;当前队列是空的无法取出数据！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//小于有效数值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++) &#123;</span><br><span class="line">            System.out.println((front + i) % maxSize + <span class="string">&quot; :&quot;</span> + arr[(front + i) % maxSize]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取有效数值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 有效数值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 假设 rear = 1 maxSize = 3 front = 2</span></span><br><span class="line">        <span class="keyword">return</span> (rear + maxSize - front) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示头元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 头元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">showHeadQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断是否队列空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;当前队列是空的无法取出数据！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CircleArrayQueueDemo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-28 8:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 数组队列案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleArrayQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试一把</span></span><br><span class="line">        <span class="comment">//创建一个循环队列 因我们在设置循环队列类时给rear设计了一个预留空间，则我们创建循环队列时实际存储的比输入的maxSize小1</span></span><br><span class="line">        CircleArrayQueue queue = <span class="keyword">new</span> CircleArrayQueue(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">char</span> key = <span class="string">&#x27; &#x27;</span>; <span class="comment">//接收用户输入</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//</span></span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s(show): 显示队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;e(exit): 退出程序&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;a(add): 添加数据到队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;g(get): 从队列取出数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;h(head): 查看队列头的数据&quot;</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">//接收一个字符</span></span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        queue.showQueue();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入一个数&quot;</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    queue.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>: <span class="comment">//取出数据</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            res = queue.getQueue();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.printf(<span class="string">&quot;取出的数据是%d\n&quot;</span>, res);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>: <span class="comment">//查看队列头的数据</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = queue.showHeadQueue();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;队列头的数据是%d\n&quot;</span>, res);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: <span class="comment">//退出</span></span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序退出~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构</category>
        <category>Queue</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>Beats学习笔记</title>
    <url>/2021/01/07/Beats%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Beats入门简介"><a href="#Beats入门简介" class="headerlink" title="Beats入门简介"></a>Beats入门简介</h1><p>使用Beat收集nginx日志和指标数据</p>
<h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p>Nginx是一款非常优秀的web服务器，往往nginx服务会作为项目的访问入口，那么，nginx的性能保障就变得非常重要了，如果nginx的运行出现了问题就会对项目有较大的影响，所以，我们需要对nginx的运行有监控措施，实时掌握nginx的运行情况，那就需要收集nginx的运行指标和分析nginx的运行日志了。</p>
<h2 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h2><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095354.png" alt="image-20200924081614472"></p>
<p>说明：</p>
<ul>
<li>通过Beats采集Nginx的指标数据和日志数据</li>
<li>Beats采集到数据后发送到Elasticsearch中</li>
<li>Kibana读取数据进行分析</li>
<li>用户通过Kibana进行查看分析报表</li>
</ul>
<h2 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h2><p>部署教程可以参考这篇博客：<a href="http://www.moguit.cn/#/info?blogUid=e8d3e38ba35b4765ae128256eb44e341">CentOS下如何安装Nginx？</a></p>
<p>部署完成后，我们就可以启动nginx了</p>
<p>启动完成后，我们通过下面命令，就可以获取到nginx中的内容了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/nginx/access.log</span><br></pre></td></tr></table></figure>
<h2 id="Beats简介"><a href="#Beats简介" class="headerlink" title="Beats简介"></a>Beats简介</h2><p>通过查看ElasticStack可以发现，Beats主要用于采集数据</p>
<p>官网地址：<a href="https://www.elastic.co/cn/beats/">https://www.elastic.co/cn/beats/</a></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095355.png" alt="image-20200924091657242"></p>
<p>Beats平台其实是一个轻量性数据采集器，通过集合多种单一用途的采集器，从成百上千台机器中向Logstash或ElasticSearch中发送数据。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095356.png" alt="image-20200924091716757"></p>
<p>通过Beats包含以下的数据采集功能</p>
<ul>
<li>Filebeat：采集日志文件</li>
<li>Metricbeat：采集指标</li>
<li>Packetbeat：采集网络数据</li>
</ul>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095357.png" alt="image-20200924092015934"></p>
<p>如果我们的数据不需要任何处理，那么就可以直接发送到ElasticSearch中</p>
<p>如果们的数据需要经过一些处理的话，那么就可以发送到Logstash中，然后处理完成后，在发送到ElasticSearch</p>
<p>最后在通过Kibana对我们的数据进行一系列的可视化展示</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095358.png" alt="image-20200924092348121"></p>
<h2 id="Filebeat"><a href="#Filebeat" class="headerlink" title="Filebeat"></a>Filebeat</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Filebeat是一个轻量级的日志采集器</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095359.png" alt="image-20200924092551044"></p>
<h3 id="为什么要用Filebeat？"><a href="#为什么要用Filebeat？" class="headerlink" title="为什么要用Filebeat？"></a>为什么要用Filebeat？</h3><p>当你面对成百上千、甚至成千上万的服务器、虚拟机和溶气气生成的日志时，请告别SSH吧！Filebeat将为你提供一种轻量型方法，用于转发和汇总日志与文件，让简单的事情不再繁华，关于Filebeat的记住以下两点：</p>
<ul>
<li>轻量级日志采集器</li>
<li>输送至ElasticSearch或者Logstash，在Kibana中实现可视化</li>
</ul>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>用于监控、收集服务器日志文件.</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095400.png" alt="image-20200924092749077"></p>
<p>流程如下：</p>
<ul>
<li>首先是input输入，我们可以指定多个数据输入源，然后通过通配符进行日志文件的匹配</li>
<li>匹配到日志后，就会使用Harvester（收割机），将日志源源不断的读取到来</li>
<li>然后收割机收割到的日志，就传递到Spooler（卷轴），然后卷轴就在将他们传到对应的地方</li>
</ul>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网地址：<a href="https://www.elastic.co/cn/downloads/beats/filebeat">https://www.elastic.co/cn/downloads/beats/filebeat</a></p>
<p>选中对应版本的Filebeat，我这里是Centos部署的，所以下载Linux版本</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095401.png" alt="image-20200924093459418"></p>
<p>下载后，我们上传到服务器上，然后创建一个文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir -p /soft/beats</span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">tar -zxvf filebeat-7.9.1-linux-x86_64.tar.gz </span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">mv filebeat-7.9.1-linux-x86_64/ filebeat</span><br></pre></td></tr></table></figure>
<p>然后我们进入到filebeat目录下，创建对应的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入文件夹</span></span><br><span class="line"><span class="built_in">cd</span> filebeats</span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">vim mogublog.yml</span><br></pre></td></tr></table></figure>
<p>添加如下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span> <span class="comment"># filebeat input输入</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">stdin</span>    <span class="comment"># 标准输入</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 启用标准输入</span></span><br><span class="line"><span class="attr">setup.template.settings:</span> </span><br><span class="line">  <span class="attr">index.number_of_shards:</span> <span class="number">3</span> <span class="comment"># 指定下载数</span></span><br><span class="line"><span class="attr">output.console:</span>  <span class="comment"># 控制台输出</span></span><br><span class="line">  <span class="attr">pretty:</span> <span class="literal">true</span>   <span class="comment"># 启用美化功能</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>在我们添加完配置文件后，我们就可以对filebeat进行启动了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./filebeat -e -c mogublog.yml</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095402.png" alt="image-20200924094825962"></p>
<p>然后我们在控制台输入hello，就能看到我们会有一个json的输出，是通过读取到我们控制台的内容后输出的</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095403.png" alt="image-20200924095032365"></p>
<p>内容如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@timestamp&quot;</span>:<span class="string">&quot;2019-01-12T12:50:03.585Z&quot;</span>,</span><br><span class="line">    &quot;@metadata&quot;:&#123; #元数据信息</span><br><span class="line">        &quot;beat&quot;:&quot;filebeat&quot;,</span><br><span class="line">        &quot;type&quot;:&quot;doc&quot;,</span><br><span class="line">        &quot;version&quot;:&quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;source&quot;:&quot;&quot;,</span><br><span class="line">    &quot;offset&quot;:0,</span><br><span class="line">    &quot;message&quot;:&quot;hello&quot;, #元数据信息</span><br><span class="line">    &quot;prospector&quot;:&#123;</span><br><span class="line">        &quot;type&quot;:&quot;stdin&quot; #元数据信息</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;input&quot;:&#123; #控制台标准输入</span><br><span class="line">        &quot;type&quot;:&quot;stdin&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;beat&quot;:&#123;  #beat版本以及主机信息</span><br><span class="line">        &quot;name&quot;:&quot;itcast01&quot;,</span><br><span class="line">        &quot;hostname&quot;:&quot;ElasticStack&quot;,</span><br><span class="line">        &quot;version&quot;:&quot;6.5.4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;host&quot;:&#123;</span><br><span class="line">        &quot;name&quot;:&quot;ElasticStack&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>我们需要再次创建一个文件，叫 mogublog-log.yml，然后在文件里添加如下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/soft/beats/logs/*.log</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">  <span class="attr">index.number_of_shards:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">output.console:</span></span><br><span class="line">  <span class="attr">pretty:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>添加完成后，我们在到下面目录创建一个日志文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">mkdir -p /soft/beats/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /soft/beats/logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt;&gt; a.log</span><br></pre></td></tr></table></figure>
<p>然后我们再次启动filebeat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./filebeat -e -c mogublog-log.yml</span><br></pre></td></tr></table></figure>
<p>能够发现，它已经成功加载到了我们的日志文件 a.log</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095404.png" alt="image-20200924095926036"></p>
<p>同时我们还可以继续往文件中追加内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;are you ok ?&quot;</span> &gt;&gt; a.log</span><br></pre></td></tr></table></figure>
<p>追加后，我们再次查看filebeat，也能看到刚刚我们追加的内容</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095405.png" alt="image-20200924102409656"></p>
<p>可以看出，已经检测到日志文件有更新，立刻就会读取到更新的内容，并且输出到控制台。</p>
<h3 id="自定义字段"><a href="#自定义字段" class="headerlink" title="自定义字段"></a>自定义字段</h3><p>但我们的元数据没办法支撑我们的业务时，我们还可以自定义添加一些字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /soft/beats/logs/*.<span class="built_in">log</span></span><br><span class="line">  tags: [<span class="string">&quot;web&quot;</span>, <span class="string">&quot;test&quot;</span>]  <span class="comment">#添加自定义tag，便于后续的处理</span></span><br><span class="line">  fields:  <span class="comment">#添加自定义字段</span></span><br><span class="line">    from: test-web</span><br><span class="line">  fields_under_root: <span class="literal">true</span> <span class="comment">#true为添加到根节点，false为添加到子节点中</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 3</span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>添加完成后，我们重启 filebeat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./filebeat -e -c mogublog-log.yml</span><br></pre></td></tr></table></figure>
<p>然后添加新的数据到 a.log中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test-web&quot;</span> &gt;&gt; a.log</span><br></pre></td></tr></table></figure>
<p>我们就可以看到字段在原来的基础上，增加了两个</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095406.png" alt="image-20200924103323033"></p>
<h3 id="输出到ElasticSearch"><a href="#输出到ElasticSearch" class="headerlink" title="输出到ElasticSearch"></a>输出到ElasticSearch</h3><p>我们可以通过配置，将修改成如下所示</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/soft/beats/logs/*.log</span></span><br><span class="line">  <span class="attr">tags:</span> [<span class="string">&quot;web&quot;</span>, <span class="string">&quot;test&quot;</span>]</span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">from:</span> <span class="string">test-web</span></span><br><span class="line">  <span class="attr">fields_under_root:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">  <span class="attr">index.number_of_shards:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;127.0.0.1:9200&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>启动成功后，我们就能看到它已经成功连接到了es了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095407.png" alt="image-20200924145624812"></p>
<p>然后我们到刚刚的 logs文件夹向 a.log文件中添加内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello mogublog&quot;</span> &gt;&gt; a.log</span><br></pre></td></tr></table></figure>
<p>在ES中，我们可以看到，多出了一个 filebeat的索引库</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095408.png" alt="image-20200924145928050"></p>
<p>然后我们浏览对应的数据，看看是否有插入的数据内容</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095409.png" alt="image-20200924150500441"></p>
<h3 id="Filebeat工作原理"><a href="#Filebeat工作原理" class="headerlink" title="Filebeat工作原理"></a>Filebeat工作原理</h3><p>Filebeat主要由下面几个组件组成： harvester、prospector 、input</p>
<h4 id="harvester"><a href="#harvester" class="headerlink" title="harvester"></a>harvester</h4><ul>
<li>负责读取单个文件的内容</li>
<li>harvester逐行读取每个文件（一行一行读取），并把这些内容发送到输出</li>
<li>每个文件启动一个harvester，并且harvester负责打开和关闭这些文件，这就意味着harvester运行时文件描述符保持着打开的状态。</li>
<li>在harvester正在读取文件内容的时候，文件被删除或者重命名了，那么Filebeat就会续读这个文件，这就会造成一个问题，就是只要负责这个文件的harvester没用关闭，那么磁盘空间就不会被释放，默认情况下，Filebeat保存问价你打开直到close_inactive到达</li>
</ul>
<h4 id="prospector"><a href="#prospector" class="headerlink" title="prospector"></a>prospector</h4><ul>
<li><p>prospector负责管理harvester并找到所有要读取的文件来源</p>
</li>
<li><p>如果输入类型为日志，则查找器将查找路径匹配的所有文件，并为每个文件启动一个harvester</p>
</li>
<li><p>Filebeat目前支持两种prospector类型：log和stdin</p>
</li>
<li><p>Filebeat如何保持文件的状态</p>
<ul>
<li>Filebeat保存每个文件的状态并经常将状态刷新到磁盘上的注册文件中</li>
<li>该状态用于记住harvester正在读取的最后偏移量，并确保发送所有日志行。</li>
<li>如果输出（例如ElasticSearch或Logstash）无法访问，Filebeat会跟踪最后发送的行，并在输出再次可以用时继续读取文件。</li>
<li>在Filebeat运行时，每个prospector内存中也会保存的文件状态信息，当重新启动Filebat时，将使用注册文件的数量来重建文件状态，Filebeat将每个harvester在从保存的最后偏移量继续读取</li>
<li>文件状态记录在data/registry文件中</li>
</ul>
</li>
</ul>
<h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><ul>
<li><p>一个input负责管理harvester，并找到所有要读取的源</p>
</li>
<li><p>如果input类型是log，则input查找驱动器上与已定义的glob路径匹配的所有文件，并为每个文件启动一个harvester</p>
</li>
<li><p>每个input都在自己的Go例程中运行</p>
</li>
<li><p>下面的例子配置Filebeat从所有匹配指定的glob模式的文件中读取行</p>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/log/*.log</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/path2/*.log</span></span><br></pre></td></tr></table></figure>
<h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./filebeat -e -c mogublog-es.yml</span><br><span class="line">./filebeat -e -c mogublog-es.yml -d <span class="string">&quot;publish&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li><strong>-e：</strong>输出到标准输出，默认输出到syslog和logs下</li>
<li><strong>-c：</strong>指定配置文件</li>
<li><strong>-d：</strong>输出debug信息</li>
</ul>
<h3 id="读取Nginx中的配置文件"><a href="#读取Nginx中的配置文件" class="headerlink" title="读取Nginx中的配置文件"></a>读取Nginx中的配置文件</h3><p>我们需要创建一个 mogublog-nginx.yml配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/soft/nginx/*.log</span></span><br><span class="line">  <span class="attr">tags:</span> [<span class="string">&quot;nginx&quot;</span>]</span><br><span class="line">  <span class="attr">fields_under_root:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">  <span class="attr">index.number_of_shards:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;127.0.0.1:9200&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>启动后，可以在Elasticsearch中看到索引以及查看数据</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095410.png" alt="image-20200924161739842"></p>
<p>可以看到，在message中已经获取到了nginx的日志，但是，内容并没有经过处理，只是读取到原数据，那么对于我们后期的操作是不利的，有办法解决吗？</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095411.png" alt="image-20200924161814066"></p>
<h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>前面要想实现日志数据的读取以及处理都是自己手动配置的，其实，在Filebeat中，有大量的Module，可以简化我们的配置，直接就可以使用，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./filebeat modules list</span><br></pre></td></tr></table></figure>
<p>得到的列表如下所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Disabled:</span><br><span class="line">activemq</span><br><span class="line">apache</span><br><span class="line">auditd</span><br><span class="line">aws</span><br><span class="line">azure</span><br><span class="line">barracuda</span><br><span class="line">bluecoat</span><br><span class="line">cef</span><br><span class="line">checkpoint</span><br><span class="line">cisco</span><br><span class="line">coredns</span><br><span class="line">crowdstrike</span><br><span class="line">cylance</span><br><span class="line">elasticsearch</span><br><span class="line">envoyproxy</span><br><span class="line">f5</span><br><span class="line">fortinet</span><br><span class="line">googlecloud</span><br><span class="line">gsuite</span><br><span class="line">haproxy</span><br><span class="line">ibmmq</span><br><span class="line">icinga</span><br><span class="line">iis</span><br><span class="line">imperva</span><br><span class="line">infoblox</span><br><span class="line">iptables</span><br><span class="line">juniper</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">logstash</span><br><span class="line">microsoft</span><br><span class="line">misp</span><br><span class="line">mongodb</span><br><span class="line">mssql</span><br><span class="line">mysql</span><br><span class="line">nats</span><br><span class="line">netflow</span><br><span class="line">netscout</span><br><span class="line">nginx</span><br><span class="line">o365</span><br><span class="line">okta</span><br><span class="line">osquery</span><br><span class="line">panw</span><br><span class="line">postgresql</span><br><span class="line">rabbitmq</span><br><span class="line">radware</span><br><span class="line">redis</span><br><span class="line">santa</span><br><span class="line">sonicwall</span><br><span class="line">sophos</span><br><span class="line">squid</span><br><span class="line">suricata</span><br><span class="line">system</span><br><span class="line">tomcat</span><br><span class="line">traefik</span><br><span class="line">zeek</span><br><span class="line">zscaler</span><br></pre></td></tr></table></figure>
<p>可以看到，内置了很多的module，但是都没有启用，如果需要启用需要进行enable操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">./filebeat modules <span class="built_in">enable</span> nginx </span><br><span class="line"><span class="comment">#禁用</span></span><br><span class="line">./filebeat modules <span class="built_in">disable</span> nginx </span><br></pre></td></tr></table></figure>
<p>可以发现，nginx的module已经被启用。</p>
<h4 id="nginx-module-配置"><a href="#nginx-module-配置" class="headerlink" title="nginx module 配置"></a>nginx module 配置</h4><p>我们到下面的目录，就能看到module的配置了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到module目录</span></span><br><span class="line"><span class="built_in">cd</span> modules.d/</span><br><span class="line"><span class="comment">#查看文件</span></span><br><span class="line">vim nginx.yml.disabled</span><br></pre></td></tr></table></figure>
<p>得到的文件内容如下所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Module: nginx</span></span><br><span class="line"><span class="comment"># Docs: https://www.elastic.co/guide/en/beats/filebeat/7.9/filebeat-module-nginx.html</span></span><br><span class="line"></span><br><span class="line">- module: nginx</span><br><span class="line">  <span class="comment"># Access logs</span></span><br><span class="line">  access:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 添加日志文件</span></span><br><span class="line">    var.paths: [<span class="string">&quot;/var/log/nginx/access.log*&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set custom paths for the log files. If left empty,</span></span><br><span class="line">    <span class="comment"># Filebeat will choose the paths depending on your OS.</span></span><br><span class="line">    <span class="comment">#var.paths:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Error logs</span></span><br><span class="line">  error:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">    var.paths: [<span class="string">&quot;/var/log/nginx/error.log*&quot;</span>]</span><br></pre></td></tr></table></figure>
<h4 id="配置filebeat"><a href="#配置filebeat" class="headerlink" title="配置filebeat"></a>配置filebeat</h4><p>我们需要修改刚刚的mogublog-nginx.yml文件，然后添加到我们的module</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">  <span class="attr">index.number_of_shards:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;127.0.0.1:9200&quot;</span>]</span><br><span class="line"><span class="attr">filebeat.config.modules:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class="line">  <span class="attr">reload.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我们启动我们的filebeat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./filebeat -e -c itcast-nginx.yml</span><br></pre></td></tr></table></figure>
<p>如果启动的时候发现出错了，错误如下所示，执行如图所示的脚本即可 【新版本的ES好像不会出现这个错误】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动会出错，如下</span></span><br><span class="line">ERROR fileset/factory.go:142 Error loading pipeline: Error loading pipeline <span class="keyword">for</span></span><br><span class="line">fileset nginx/access: This module requires the following Elasticsearch plugins:</span><br><span class="line">ingest-user-agent, ingest-geoip. You can install them by running the following</span><br><span class="line">commands on all the Elasticsearch nodes:</span><br><span class="line">  sudo bin/elasticsearch-plugin install ingest-user-agent</span><br><span class="line">  sudo bin/elasticsearch-plugin install ingest-geoip</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>启动成功后，能看到日志记录已经成功刷新进去了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095412.png" alt="image-20200924164750123"></p>
<p>我们可以测试一下，刷新nginx页面，或者向错误日志中，插入数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;err&quot;</span> &gt;&gt; error.log</span><br></pre></td></tr></table></figure>
<p>能够看到，刚刚的记录已经成功插入了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095413.png" alt="image-20200924164927557"></p>
<p>关于module的其它使用，可以参考文档：</p>
<p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules.html">https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-modules.html</a></p>
<h2 id="Metricbeat"><a href="#Metricbeat" class="headerlink" title="Metricbeat"></a>Metricbeat</h2><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095414.png" alt="image-20200924170741928"></p>
<ul>
<li>定期收集操作系统或应用服务的指标数据</li>
<li>存储到Elasticsearch中，进行实时分析</li>
</ul>
<h3 id="Metricbeat组成"><a href="#Metricbeat组成" class="headerlink" title="Metricbeat组成"></a>Metricbeat组成</h3><p>Metricbeat有2部分组成，一部分是Module，另一个部分为Metricset</p>
<ul>
<li>Module<ul>
<li>收集的对象：如 MySQL、Redis、Nginx、操作系统等</li>
</ul>
</li>
<li>Metricset<ul>
<li>收集指标的集合：如 cpu、memory，network等</li>
</ul>
</li>
</ul>
<p>以Redis Module为例：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095415.png" alt="image-20200924170958343"></p>
<h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p>首先我们到<a href="https://www.elastic.co/cn/downloads/beats/metricbeat">官网</a>，找到Metricbeat进行下载</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095416.png" alt="image-20200924171232384"></p>
<p>下载完成后，我们通过xftp工具，移动到指定的目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 移动到该目录下</span></span><br><span class="line"><span class="built_in">cd</span> /soft/beats</span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">tar -zxvf </span><br><span class="line"><span class="comment"># 修改文件名</span></span><br><span class="line">mv  metricbeat</span><br></pre></td></tr></table></figure>
<p>然后修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim metricbeat.yml</span><br></pre></td></tr></table></figure>
<p>添加如下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">metricbeat.config.modules:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">$&#123;path.config&#125;/modules.d/*.yml</span></span><br><span class="line">  <span class="attr">reload.enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">setup.template.settings:</span></span><br><span class="line">  <span class="attr">index.number_of_shards:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">index.codec:</span> <span class="string">best_compression</span></span><br><span class="line"><span class="attr">setup.kibana:</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;&quot;</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9200&quot;</span>]</span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_host_metadata:</span> <span class="string">~</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">add_cloud_metadata:</span> <span class="string">~</span></span><br></pre></td></tr></table></figure>
<p>默认会指定的配置文件，就是在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br></pre></td></tr></table></figure>
<p>也就是 system.yml文件，我们也可以自行开启其它的收集</p>
<h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><p>在配置完成后，我们通过如下命令启动即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./metricbeat -e</span><br></pre></td></tr></table></figure>
<p>在ELasticsearch中可以看到，系统的一些指标数据已经写入进去了：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095417.png" alt="image-20200924171839291"></p>
<h3 id="system-module配置"><a href="#system-module配置" class="headerlink" title="system module配置"></a>system module配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">module:</span> <span class="string">system</span></span><br><span class="line">  <span class="attr">period:</span> <span class="string">10s</span>  <span class="comment"># 采集的频率，每10秒采集一次</span></span><br><span class="line">  <span class="attr">metricsets:</span>  <span class="comment"># 采集的内容</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cpu</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">load</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">memory</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">network</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">process</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">process_summary</span></span><br></pre></td></tr></table></figure>
<h3 id="Metricbeat-Module"><a href="#Metricbeat-Module" class="headerlink" title="Metricbeat Module"></a>Metricbeat Module</h3><p>Metricbeat Module的用法和我们之前学的filebeat的用法差不多</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看列表</span></span><br><span class="line">./metricbeat modules list </span><br></pre></td></tr></table></figure>
<p>能够看到对应的列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enabled:</span><br><span class="line">system <span class="comment">#默认启用</span></span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">aerospike</span><br><span class="line">apache</span><br><span class="line">ceph</span><br><span class="line">couchbase</span><br><span class="line">docker</span><br><span class="line">dropwizard</span><br><span class="line">elasticsearch</span><br><span class="line">envoyproxy</span><br><span class="line">etcd</span><br><span class="line">golang</span><br><span class="line">graphite</span><br><span class="line">haproxy</span><br><span class="line">http</span><br><span class="line">jolokia</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">kubernetes</span><br><span class="line">kvm</span><br><span class="line">logstash</span><br><span class="line">memcached</span><br><span class="line">mongodb</span><br><span class="line">munin</span><br><span class="line">mysql</span><br><span class="line">nginx</span><br><span class="line">php_fpm</span><br><span class="line">postgresql</span><br><span class="line">prometheus</span><br><span class="line">rabbitmq</span><br><span class="line">redis</span><br><span class="line">traefik</span><br><span class="line">uwsgi</span><br><span class="line">vsphere</span><br><span class="line">windows</span><br></pre></td></tr></table></figure>
<h3 id="Nginx-Module"><a href="#Nginx-Module" class="headerlink" title="Nginx Module"></a>Nginx Module</h3><h4 id="开启Nginx-Module"><a href="#开启Nginx-Module" class="headerlink" title="开启Nginx Module"></a>开启Nginx Module</h4><p>在nginx中，需要开启状态查询，才能查询到指标数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重新编译nginx</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">./nginx -V <span class="comment">#查询版本信息</span></span><br><span class="line">nginx version: nginx/1.11.6</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-23) (GCC)</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置nginx</span></span><br><span class="line">vim nginx.conf</span><br><span class="line">location /nginx-status &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>
<p>测试</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095418.png" alt="image-20200924172317526"></p>
<p>结果说明：</p>
<ul>
<li>Active connections：正在处理的活动连接数</li>
<li>server accepts handled requests<ul>
<li>第一个 server 表示Nginx启动到现在共处理了9个连接</li>
<li>第二个 accepts 表示Nginx启动到现在共成功创建 9 次握手</li>
<li>第三个 handled requests 表示总共处理了 21 次请求</li>
<li>请求丢失数 = 握手数 - 连接数 ，可以看出目前为止没有丢失请求</li>
</ul>
</li>
<li>Reading: 0 Writing: 1 Waiting: 1<ul>
<li>Reading：Nginx 读取到客户端的 Header 信息数</li>
<li>Writing：Nginx 返回给客户端 Header 信息数</li>
<li>Waiting：Nginx 已经处理完正在等候下一次请求指令的驻留链接（开启keep-alive的情况下，这个值等于<br>Active - (Reading+Writing)）</li>
</ul>
</li>
</ul>
<h3 id="配置nginx-module"><a href="#配置nginx-module" class="headerlink" title="配置nginx module"></a>配置nginx module</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启用redis module</span></span><br><span class="line">./metricbeat modules <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改redis module配置</span></span><br><span class="line">vim modules.d/nginx.yml</span><br></pre></td></tr></table></figure>
<p>然后修改下面的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Module: nginx</span></span><br><span class="line"><span class="comment"># Docs: https://www.elastic.co/guide/en/beats/metricbeat/6.5/metricbeat-modulenginx.</span></span><br><span class="line">html</span><br><span class="line">  - module: nginx</span><br><span class="line"><span class="comment">#metricsets:</span></span><br><span class="line"><span class="comment"># - stubstatus</span></span><br><span class="line">  period: 10s</span><br><span class="line"><span class="comment"># Nginx hosts</span></span><br><span class="line">  hosts: [<span class="string">&quot;http://127.0.0.1&quot;</span>]</span><br><span class="line"><span class="comment"># Path to server status. Default server-status</span></span><br><span class="line">  server_status_path: <span class="string">&quot;nginx-status&quot;</span></span><br><span class="line"><span class="comment">#username: &quot;user&quot;</span></span><br><span class="line"><span class="comment">#password: &quot;secret&quot;</span></span><br></pre></td></tr></table></figure>
<p>修改完成后，启动nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">./metricbeat -e</span><br></pre></td></tr></table></figure>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>我们能看到，我们的nginx数据已经成功的采集到我们的系统中了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095419.png" alt="image-20200924173058267"></p>
<p>可以看到，nginx的指标数据已经写入到了Elasticsearch。</p>
<p>更多的Module使用参见官方文档：</p>
<p><a href="https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-modules.html">https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-modules.html</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://www.cnblogs.com/cjsblog/p/9495024.html">Filebeat 模块与配置</a></p>
<p><a href="https://www.bilibili.com/video/BV1iJ411c7Az">Elastic Stack（ELK）从入门到实践</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>ELK</category>
        <category>Beats</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>Beats</tag>
      </tags>
  </entry>
  <entry>
    <title>nacos集群环境搭建</title>
    <url>/2021/01/07/nacos%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="预备环境准备"><a href="#预备环境准备" class="headerlink" title="预备环境准备"></a>预备环境准备</h2><p>Nacos 依赖 <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href="https://maven.apache.org/index.html">Maven</a>环境，请确保是在以下版本环境中安装使用:</p>
<ol>
<li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li>
<li>64 bit JDK 1.8+；<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">下载</a> &amp; <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">配置</a>。</li>
<li>Maven 3.2.x+；<a href="https://maven.apache.org/download.cgi">下载</a> &amp; <a href="https://maven.apache.org/settings.html">配置</a>。</li>
</ol>
<h2 id="下载nacos安装包"><a href="#下载nacos安装包" class="headerlink" title="下载nacos安装包"></a>下载nacos安装包</h2><p><a href="https://github.com/alibaba/nacos/releases/tag/1.4.0">https://github.com/alibaba/nacos/releases/tag/1.4.0</a></p>
<blockquote>
<p> <img src="https://img-blog.csdnimg.cn/20201130205557917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<p>linux选择第一个</p>
<p>windows选择第二个</p>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="集群模式部署"><a href="#集群模式部署" class="headerlink" title="集群模式部署"></a>集群模式部署</h3><p>这个快速开始手册是帮忙您快速在你的电脑上，下载安装并使用Nacos，部署生产使用的集群模式。</p>
<h3 id="集群部署架构图"><a href="#集群部署架构图" class="headerlink" title="集群部署架构图"></a>集群部署架构图</h3><p><img src="https://img-blog.csdnimg.cn/20201130205609797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>VIP:虚拟ip</p>
<p>因此开源的时候推荐用户把所有服务列表放到一个vip下面，然后挂到一个域名下面</p>
<p><a href="http://ip1/">http://ip1</a>:port/openAPI 直连ip模式，机器挂则需要修改ip才可以使用。</p>
<p><a href="http://vip/">http://VIP</a>:port/openAPI 挂载VIP模式，直连vip即可，下面挂server真实ip，可读性不好。</p>
<p><a href="http://nacos.com/">http://nacos.com</a>:port/openAPI 域名 + VIP模式，可读性好，而且换ip方便，推荐模式</p>
<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>该目录存放nacos集群</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/nacos</span><br></pre></td></tr></table></figure>
<h3 id="上传nacos"><a href="#上传nacos" class="headerlink" title="上传nacos"></a>上传nacos</h3><blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201130205630233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<h3 id="解压nacos"><a href="#解压nacos" class="headerlink" title="解压nacos"></a>解压nacos</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf nacos-server-1.4.0.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="创建nacos持久化数据库"><a href="#创建nacos持久化数据库" class="headerlink" title="创建nacos持久化数据库"></a>创建nacos持久化数据库</h3><p>首先使用navicat连接mysql数据库，然后创建数据库</p>
<p><img src="https://img-blog.csdnimg.cn/20201130205643439.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>新建查询后导入SQL脚本即可</p>
<p><img src="https://img-blog.csdnimg.cn/20201130205705669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>红色框选那栏填写你的SQL脚本位置，SQL脚本在nacos文件夹下的conf下</p>
<h3 id="nacos文件夹改名"><a href="#nacos文件夹改名" class="headerlink" title="nacos文件夹改名"></a>nacos文件夹改名</h3><p>将文件夹名改为nacos3333代表这个nacos的端口号是3333</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv nacos nacos3333</span><br></pre></td></tr></table></figure>
<h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><p>首先进入到配置目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nacos/nacos3333/conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020113020572431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<p>在更改配置之前先备份配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp application.properties application.properties.example</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cp cluster.conf.example cluster.conf</span><br></pre></td></tr></table></figure>
<h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim cluster.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201130205739435.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p>注意这里不能填写localhost 或者127.0.0.1，这里如果是在本机搭建可以查看本机ip后填写</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;hostname -i</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20201130205749116.png" alt="在这里插入图片描述"></p>
</blockquote>
<h3 id="nacos配置"><a href="#nacos配置" class="headerlink" title="nacos配置"></a>nacos配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim application.properties</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#*************** Spring Boot Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### Default web context path:</span></span><br><span class="line"><span class="meta">server.servlet.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="comment">### Default web server port:</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">3333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Network Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If prefer hostname over ip for Nacos server addresses in cluster.conf:</span></span><br><span class="line"><span class="comment"># nacos.inetutils.prefer-hostname-over-ip=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Specify local server&#x27;s IP:</span></span><br><span class="line"><span class="comment"># nacos.inetutils.ip-address=</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Config Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If use MySQL as datasource:</span></span><br><span class="line"> <span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"> <span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Naming Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### Data dispatch task execution period in milliseconds:</span></span><br><span class="line"><span class="comment"># nacos.naming.distro.taskDispatchPeriod=200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Data count of batch sync task:</span></span><br><span class="line"><span class="comment"># nacos.naming.distro.batchSyncKeyCount=1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Retry delay in milliseconds if sync task failed:</span></span><br><span class="line"><span class="comment"># nacos.naming.distro.syncRetryDelay=5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### If enable data warmup. If set to false, the server would accept request without local data preparation:</span></span><br><span class="line"><span class="comment"># nacos.naming.data.warmup=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### If enable the instance auto expiration, kind like of health check of instance:</span></span><br><span class="line"><span class="comment"># nacos.naming.expireInstance=true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">nacos.naming.empty-service.auto-clean</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">nacos.naming.empty-service.clean.initial-delay-ms</span>=<span class="string">50000</span></span><br><span class="line"><span class="meta">nacos.naming.empty-service.clean.period-time-ms</span>=<span class="string">30000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** CMDB Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### The interval to dump external CMDB in seconds:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.dumpTaskInterval=3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The interval of polling data change event in seconds:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.eventTaskInterval=10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The interval of loading labels in seconds:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.labelTaskInterval=300</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### If turn on data loading task:</span></span><br><span class="line"><span class="comment"># nacos.cmdb.loadDataAtStart=false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Metrics Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### Metrics for prometheus</span></span><br><span class="line"><span class="comment">#management.endpoints.web.exposure.include=*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Metrics for elastic search</span></span><br><span class="line"><span class="meta">management.metrics.export.elastic.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#management.metrics.export.elastic.host=http://localhost:9200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Metrics for influx</span></span><br><span class="line"><span class="meta">management.metrics.export.influx.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.db=springboot</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.uri=http://localhost:8086</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.auto-create-db=true</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.consistency=one</span></span><br><span class="line"><span class="comment">#management.metrics.export.influx.compressed=true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Access Log Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If turn on the access log:</span></span><br><span class="line"><span class="meta">server.tomcat.accesslog.enabled</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The access log pattern:</span></span><br><span class="line"><span class="meta">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i %&#123;Request-Source&#125;i</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The directory of access log:</span></span><br><span class="line"><span class="meta">server.tomcat.basedir</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Access Control Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If enable spring security, this option is deprecated in 1.2.0:</span></span><br><span class="line"><span class="comment">#spring.security.enabled=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The ignore urls of auth, is deprecated in 1.2.0:</span></span><br><span class="line"><span class="meta">nacos.security.ignore.urls</span>=<span class="string">/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The auth system to use, currently only &#x27;nacos&#x27; is supported:</span></span><br><span class="line"><span class="meta">nacos.core.auth.system.type</span>=<span class="string">nacos</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### If turn on auth system:</span></span><br><span class="line"><span class="meta">nacos.core.auth.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The token expiration in seconds:</span></span><br><span class="line"><span class="meta">nacos.core.auth.default.token.expire.seconds</span>=<span class="string">18000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### The default token:</span></span><br><span class="line"><span class="meta">nacos.core.auth.default.token.secret.key</span>=<span class="string">SecretKey012345678901234567890123456789012345678901234567890123456789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</span></span><br><span class="line"><span class="meta">nacos.core.auth.caching.enabled</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Istio Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If turn on the MCP server:</span></span><br><span class="line"><span class="meta">nacos.istio.mcp.server.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###*************** Add from 1.3.0 ***************###</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** Core Related Configurations ***************#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### set the WorkerID manually</span></span><br><span class="line"><span class="comment"># nacos.core.snowflake.worker-id=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Member-MetaData</span></span><br><span class="line"><span class="comment"># nacos.core.member.meta.site=</span></span><br><span class="line"><span class="comment"># nacos.core.member.meta.adweight=</span></span><br><span class="line"><span class="comment"># nacos.core.member.meta.weight=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### MemberLookup</span></span><br><span class="line"><span class="comment">### Addressing pattern category, If set, the priority is highest</span></span><br><span class="line"><span class="comment"># nacos.core.member.lookup.type=[file,address-server]</span></span><br><span class="line"><span class="comment">## Set the cluster list with a configuration file or command-line argument</span></span><br><span class="line"><span class="comment"># nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809</span></span><br><span class="line"><span class="comment">## for AddressServerMemberLookup</span></span><br><span class="line"><span class="comment"># Maximum number of retries to query the address server upon initialization</span></span><br><span class="line"><span class="comment"># nacos.core.address-server.retry=5</span></span><br><span class="line"><span class="comment">## Server domain name address of [address-server] mode</span></span><br><span class="line"><span class="comment"># address.server.domain=jmenv.tbsite.net</span></span><br><span class="line"><span class="comment">## Server port of [address-server] mode</span></span><br><span class="line"><span class="comment"># address.server.port=8080</span></span><br><span class="line"><span class="comment">## Request address of [address-server] mode</span></span><br><span class="line"><span class="comment"># address.server.url=/nacos/serverlist</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#*************** JRaft Related Configurations ***************#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Sets the Raft cluster election timeout, default value is 5 second</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.election_timeout_ms=5000</span></span><br><span class="line"><span class="comment">### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.snapshot_interval_secs=30</span></span><br><span class="line"><span class="comment">### raft internal worker threads</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.core_thread_num=8</span></span><br><span class="line"><span class="comment">### Number of threads required for raft business request processing</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.cli_service_thread_num=4</span></span><br><span class="line"><span class="comment">### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe</span></span><br><span class="line"><span class="comment">### rpc request timeout, default 5 seconds</span></span><br><span class="line"><span class="comment"># nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是我的整个application.properties文件,其中主要修改的地方有两处</p>
<p>修改端口号</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Default web server port:</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">3333</span></span><br></pre></td></tr></table></figure>
<p>修改数据库为mysql并配置mysql的url</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#*************** Config Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If use MySQL as datasource:</span></span><br><span class="line"> <span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"> <span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<p>这时候配置就差不多啦可以开始启动服务了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到nacos3333的bin目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nacos/nacos3333/bin</span><br><span class="line"><span class="comment"># 执行启动脚本 因为nacos启动脚本默认就是使用集群模式所以不用更改</span></span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>
<p>这时候我们可以查看nacos的启动状态</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nacos</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201130205818481.png" alt="在这里插入图片描述"></p>
</blockquote>
<p>这时候我们应该就可以通过 服务器ip:3333/nacos访问到nacos</p>
<blockquote>
<p><img src="https://img-blog.csdnimg.cn/20201130205828641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<p>成功的访问到了nacos代表成功了。</p>
<h3 id="nacos集群启动"><a href="#nacos集群启动" class="headerlink" title="nacos集群启动"></a>nacos集群启动</h3><p>这时候我们就可以回到nacos目录下拷贝之前的nacos3333文件夹来启动nacos4444和nacos5555</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nacos</span><br><span class="line"><span class="comment"># cp -r 代表递归拷贝</span></span><br><span class="line">cp -r nacos3333 nacos4444</span><br><span class="line">cp -r nacos3333 nacos5555</span><br></pre></td></tr></table></figure>
<p>这时候再分别将nacos4444和nacos5555文件夹下的conf目录中的application.properties中的server.port更改为3333、4444然后再启动，这里我就不再演示了，和之前配置一样。</p>
<p>随后我们再依次启动nacos4444，nacos5555</p>
<p>###########################################################################</p>
<p>启动后发现问题，nacos5555启动不起来，查看日志得到发现内存不足，nacos脚本默认给的最大内存是2G，我们可以去改小一点。</p>
<p><img src="https://img-blog.csdnimg.cn/20201130205845619.png" alt="在这里插入图片描述"></p>
<p>原红框中限制的内存是2g 最小1g 适当该小一点[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传<br><img src="https://img-blog.csdnimg.cn/20201130205903628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>然后再依次启动三个服务</p>
<p>登录任意一个nacos可以看到如下页面即集群启动成功</p>
<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>这配置nginx负载均衡访问nacos</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/conf</span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs&#x2F;error.log;</span><br><span class="line">#error_log  logs&#x2F;error.log  notice;</span><br><span class="line">#error_log  logs&#x2F;error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    #配置刚刚搭建好的nacos集群</span><br><span class="line">    upstream cluster&#123;                                                        </span><br><span class="line">	    server 127.0.0.1:3333;</span><br><span class="line">	    server 127.0.0.1:4444;</span><br><span class="line">	    server 127.0.0.1:5555;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       1111;</span><br><span class="line">        server_name  nacos_cluster;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            #root   html;</span><br><span class="line">            #index  index.html index.htm;</span><br><span class="line">            #将所有访问&#x2F;的都映射到配置好的集群</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;cluster;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#39;s document root</span><br><span class="line">        # concurs with nginx&#39;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ &#x2F;\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location &#x2F; &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location &#x2F; &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nginx启动"><a href="#nginx启动" class="headerlink" title="nginx启动"></a>nginx启动</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>
<p>这时候我们就可以通过服务器ip地址:1111/nacos 来访问nacos集群了</p>
<p><img src="https://img-blog.csdnimg.cn/20201130205927229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQ0ODU5OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>关于使用NACOS集群遇到问题 – CODE:503 MSG: SERVER IS STARTING NOW, PLEASE TRY AGAIN LATER!</p>
<p>这时又出现了问题……在服务提供者注册服务时会报错</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2020-11-30 00:36:59.492 ERROR 13140 --- [  restartedMain] c.a.c.n.registry.NacosServiceRegistry    : nacos registry, nacos-payment-provider register failed...NacosRegistration&#123;nacosDiscoveryProperties=NacosDiscoveryProperties&#123;serverAddr=&#x27;wsy.oopsw.top:1111&#x27;, endpoint=&#x27;&#x27;, namespace=&#x27;&#x27;, watchDelay=30000, logName=&#x27;&#x27;, service=&#x27;nacos-payment-provider&#x27;, weight=1.0, clusterName=&#x27;DEFAULT&#x27;, namingLoadCacheAtStart=&#x27;false&#x27;, metadata=&#123;preserved.register.source=SPRING_CLOUD&#125;, registerEnabled=true, ip=&#x27;10.175.6.100&#x27;, networkInterface=&#x27;&#x27;, port=9002, secure=false, accessKey=&#x27;&#x27;, secretKey=&#x27;&#x27;&#125;&#125;,</span><br><span class="line"></span><br><span class="line">java.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: failed to req API:wsy.oopsw.top:1111/nacos/v1/ns/instance. code:503 msg: server is DOWN now, please try again later!</span><br><span class="line">	at com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:464) ~[nacos-client-1.1.1.jar:na]</span><br><span class="line">	at com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:386) ~[nacos-client-1.1.1.jar:na]</span><br><span class="line">	at com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:188) ~[nacos-client-1.1.1.jar:na]</span><br><span class="line">	at com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:205) ~[nacos-client-1.1.1.jar:na]</span><br><span class="line">	at com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:184) ~[nacos-client-1.1.1.jar:na]</span><br><span class="line">	at com.alibaba.cloud.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:61) ~[spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]</span><br><span class="line">	at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.register(AbstractAutoServiceRegistration.java:239) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]</span><br><span class="line">	at com.alibaba.cloud.nacos.registry.NacosAutoServiceRegistration.register(NacosAutoServiceRegistration.java:74) [spring-cloud-alibaba-nacos-discovery-2.1.0.RELEASE.jar:2.1.0.RELEASE]</span><br><span class="line">	at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.start(AbstractAutoServiceRegistration.java:138) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]</span><br><span class="line">	at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.bind(AbstractAutoServiceRegistration.java:101) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]</span><br><span class="line">	at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:88) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]</span><br><span class="line">	at org.springframework.cloud.client.serviceregistry.AbstractAutoServiceRegistration.onApplicationEvent(AbstractAutoServiceRegistration.java:47) [spring-cloud-commons-2.2.1.RELEASE.jar:2.2.1.RELEASE]</span><br><span class="line">	at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:165) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">	at com.wsy.springcloud.AlibabaProviderApplication.main(AlibabaProviderApplication.java:15) [classes/:na]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_73]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_73]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_73]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_73]</span><br><span class="line">	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br></pre></td></tr></table></figure>
<p>像阿里云、腾讯云这种云服务器, 会提供一个外网ip和内网ip, 访问外网ip时会指向对应的内网ip来访问到该服务器, 由于nacos集群内部是指定的使用网卡ip地址来进行通信,但是由于三台服务器各自的内网ip不在同一网段, 所以造成无法通信, 也会造成以下问题</p>
<p>注册服务:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code:503 msg: server is STARTING now, please try again later!</span><br></pre></td></tr></table></figure>
<p>naming-raft.log 日志:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-05-15 00:02:00,000 WARN [IS LEADER] no leader is available now!</span><br></pre></td></tr></table></figure>
<p>这时只要修改启动参数, 设置本机ip地址就可以了<br>修改 nacos/bin/startup.sh 文件<br>找到 JVM Configuration 这部分, 在集群参数里增加 -Dnacos.server.ip=xx</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#===========================================================================================</span></span><br><span class="line"><span class="comment"># JVM Configuration</span></span><br><span class="line"><span class="comment">#===========================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单机模式对应的启动参数</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;MODE&#125;</span>&quot;</span> == <span class="string">&quot;standalone&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Xms512m -Xmx512m -Xmn256m&quot;</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.standalone=true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># 集群模式对应的启动参数</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class="variable">$&#123;BASE_DIR&#125;</span>/logs/java_heapdump.hprof&quot;</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -XX:-UseLargePages&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># *新增以下参数设置本机ip地址*</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.server.ip=本机ip&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;FUNCTION_MODE&#125;</span>&quot;</span> == <span class="string">&quot;config&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.functionMode=config&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="string">&quot;<span class="variable">$&#123;FUNCTION_MODE&#125;</span>&quot;</span> == <span class="string">&quot;naming&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    JAVA_OPT=<span class="string">&quot;<span class="variable">$&#123;JAVA_OPT&#125;</span> -Dnacos.functionMode=naming&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参考博客：<a href="https://www.freesion.com/article/33101142210/">https://www.freesion.com/article/33101142210/</a></p>
<p>服务注册时报BadRequest400 问题暂时还未解决</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">com.alibaba.nacos.api.exception.NacosException: failed to req API:/nacos/v1/ns/instance after all servers([wsy.oopsw.top:1111]) tried: ErrCode:400, ErrMsg:&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&lt;div id=&#x27;created&#x27;&gt;Mon Nov 30 01:33:45 CST 2020&lt;/div&gt;&lt;div&gt;There was an unexpected error (type=Bad Request, status=400).&lt;/div&gt;&lt;div&gt;receive invalid redirect request from peer 172.20.9.153&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>#############################################################</p>
<p>问题已解决，是nacos版本的问题，据群里老哥解释说是nacos需要使用与之对应的SpringCloudAlibaba的版本，不然就会报错，我更换版本到1.3.2问题解决服务注册正常</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>SpringCloudAlibaba</tag>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>排序学习笔记</title>
    <url>/2021/01/08/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-排序算法"><a href="#1-排序算法" class="headerlink" title="1.排序算法"></a>1.排序算法</h2><h3 id="1-1排序算法的介绍"><a href="#1-1排序算法的介绍" class="headerlink" title="1.1排序算法的介绍"></a>1.1排序算法的介绍</h3><p>排序也称排序算法(Sort Algorithm)，排序是将<strong>一组数据</strong>，依<strong>指定的顺序</strong>进行<strong>排列</strong>的<strong>过程</strong>。</p>
<h3 id="1-2排序的分类："><a href="#1-2排序的分类：" class="headerlink" title="1.2排序的分类："></a>1.2排序的分类：</h3><ol>
<li><p>内部排序: 指将需要处理的所有数据都加载到内部存储器(内存)中进行排序。 </p>
</li>
<li><p>外部排序法： 数据量过大，无法全部加载到内存中，需要借助外部存储(文件等)进行排序。 </p>
</li>
<li><p>常见的排序算法分类(见下图):</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182104.png" alt="image-20210108172259536"></p>
</li>
</ol>
<h3 id="1-3算法的时间复杂度"><a href="#1-3算法的时间复杂度" class="headerlink" title="1.3算法的时间复杂度"></a>1.3算法的时间复杂度</h3><h4 id="1-3-1度量一个程序-算法-执行时间的两种方法"><a href="#1-3-1度量一个程序-算法-执行时间的两种方法" class="headerlink" title="1.3.1度量一个程序(算法)执行时间的两种方法"></a>1.3.1度量一个程序(算法)执行时间的两种方法</h4><ol>
<li><p>事后统计的方法 这种方法可行, 但是有两个问题：一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；二是所 得时间的统计量依赖于计算机的硬件、软件等环境因素, 这种方式，要在同一台计算机的相同状态下运行，才能比 </p>
</li>
<li><p>事前估算的方法 通过分析某个算法的<strong>时间复杂度</strong>来判断哪个算法更优.</p>
</li>
</ol>
<h4 id="1-3-2时间频度"><a href="#1-3-2时间频度" class="headerlink" title="1.3.2时间频度"></a>1.3.2时间频度</h4><ul>
<li><p>基本介绍</p>
<p>时间频度：一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间 就多。一个算法中的语句执行次数称为语句频度或时间频度。记为 T(n)。[举例说明] </p>
</li>
<li><p>举例说明-基本案例</p>
<p> 比如计算 1-100 所有数字之和, 我们设计两种算法：</p>
</li>
</ul>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182105.png" alt="image-20210108172533069"></p>
<ul>
<li><p>举例说明-忽略常数项</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182106.png" alt="image-20210108172548099"></p>
</li>
</ul>
<blockquote>
<p>结论: </p>
<ol>
<li><p>2n+20 和 2n 随着 n 变大，执行曲线无限接近, 20 可以忽略</p>
</li>
<li><p>3n+10 和 3n 随着 n 变大，执行曲线无限接近, 10 可以忽略</p>
</li>
</ol>
</blockquote>
<ul>
<li><p>举例说明-忽略低次项</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182107.png" alt="image-20210108172617468"></p>
</li>
</ul>
<blockquote>
<p>结论: </p>
<ol>
<li><p>2n^2+3n+10 和 2n^2 随着 n 变大, 执行曲线无限接近, 可以忽略 3n+10 </p>
</li>
<li><p>n^2+5n+20 和 n^2 随着 n 变大,执行曲线无限接近, 可以忽略 5n+20</p>
</li>
</ol>
</blockquote>
<ul>
<li><p>举例说明-忽略系数</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182108.png" alt="image-20210108172652112"></p>
<blockquote>
<p>结论: </p>
<ol>
<li><p>随着 n 值变大，5n^2+7n 和 3n^2 + 2n ，执行曲线重合, 说明 这种情况下, 5 和 3 可以忽略。 </p>
</li>
<li><p>而 n^3+5n 和 6n^3+4n ，执行曲线分离，说明多少次方式关键</p>
</li>
</ol>
</blockquote>
</li>
</ul>
<h4 id="1-3-3时间复杂度"><a href="#1-3-3时间复杂度" class="headerlink" title="1.3.3时间复杂度"></a>1.3.3时间复杂度</h4><ol>
<li><p>一般情况下，算法中的基本操作语句的重复执行次数是问题规模 n 的某个函数，用 T(n)表示，若有某个辅 助函数 f(n)，使得当 n 趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称 f(n)是 T(n)的同数量级函数。 记作 T(n)=Ｏ( f(n) )，称Ｏ( f(n) ) 为算法的渐进时间复杂度，简称时间复杂度。 </p>
</li>
<li><p>T(n) 不同，但时间复杂度可能相同。 如：T(n)=n²+7n+6 与 T(n)=3n²+2n+2 它们的 T(n) 不同，但时间复杂 度相同，都为 O(n²)。 </p>
</li>
<li><p>计算时间复杂度的方法：</p>
<ul>
<li>用常数 1 代替运行时间中的所有加法常数 T(n)=n²+7n+6 =&gt; T(n)=n²+7n+1 </li>
<li>修改后的运行次数函数中，只保留最高阶项 T(n)=n²+7n+1 =&gt; T(n) = n² </li>
<li>去除最高阶项的系数 T(n) = n² =&gt; T(n) = n² =&gt; O(n²)</li>
</ul>
</li>
</ol>
<h4 id="1-3-4常见的时间复杂度"><a href="#1-3-4常见的时间复杂度" class="headerlink" title="1.3.4常见的时间复杂度"></a>1.3.4常见的时间复杂度</h4><ol>
<li><p>常数阶 O(1) </p>
</li>
<li><p>对数阶 O(log2n) </p>
</li>
<li><p>线性阶 O(n) </p>
</li>
<li><p>线性对数阶 O(nlog2n)  </p>
</li>
<li><p>平方阶 O(n^2) </p>
</li>
<li><p>立方阶 O(n^3) </p>
</li>
<li><p>k 次方阶 O(n^k) </p>
</li>
<li><p>指数阶 O(2^n)</p>
</li>
</ol>
<p>常见的时间复杂度对应的图:</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182109.png" alt="image-20210108173000288"></p>
<p><strong>说明：</strong></p>
<ol>
<li>常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜ Ο(nk) ＜ Ο(2n) ，随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低 </li>
<li>从图中可见，我们应该尽可能避免使用指数阶的算法</li>
</ol>
<ol>
<li><p>常数阶 O(1)</p>
<p>无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就是O(1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">2</span>;</span><br><span class="line">++i;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">int</span> m = i + j;</span><br></pre></td></tr></table></figure>
<p>上述代码在执行的时候，它小号的时候并不随着某个变量的增长而增长，那么无论这代码有多长，即使有几万几十万行，都可以用O(1)来表示它的时间复杂度。</p>
</li>
</ol>
<ol start="2">
<li><p>对数阶O(log2n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n) &#123;</span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182110.png" alt="image-20210108175210768"></p>
</li>
<li><p>线性阶 O(n）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">    j = i;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182111.png" alt="image-20210108175314799"></p>
</li>
<li><p>线性对数阶 O(nlogN)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(m=<span class="number">1</span>; m&lt;n; m++) &#123;</span><br><span class="line">    i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n) &#123;</span><br><span class="line">        i = i * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182112.png" alt="image-20210108175419234"></p>
</li>
<li><p>平方阶 O(n²)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(m=<span class="number">1</span>; m&lt;n; m++) &#123;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=n; k++) &#123;</span><br><span class="line">        j = k;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182113.png" alt="image-20210108175514195"></p>
</li>
<li><p>立方阶 O(n³)、K 次方阶 O(n^k)</p>
<p>说明：参考上面的 O(n²) 去理解就好了，O(n³)相当于三层 n 循环，其它的类似</p>
</li>
</ol>
<h4 id="1-3-5平均时间复杂度和最坏时间复杂度"><a href="#1-3-5平均时间复杂度和最坏时间复杂度" class="headerlink" title="1.3.5平均时间复杂度和最坏时间复杂度"></a>1.3.5平均时间复杂度和最坏时间复杂度</h4><ol>
<li><p>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。 </p>
</li>
<li><p>最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。这样做的 原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会 比最坏情况更长。 </p>
</li>
<li><p>平均时间复杂度和最坏时间复杂度是否一致，和算法有关(如图:)。</p>
</li>
</ol>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182114.png" alt="image-20210108175606298"></p>
<h3 id="1-4算法的空间复杂度简介"><a href="#1-4算法的空间复杂度简介" class="headerlink" title="1.4算法的空间复杂度简介"></a>1.4算法的空间复杂度简介</h3><h4 id="1-4-1基本介绍"><a href="#1-4-1基本介绍" class="headerlink" title="1.4.1基本介绍"></a>1.4.1基本介绍</h4><ol>
<li><p>类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是 问题规模 n 的函数。 </p>
</li>
<li><p>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的 临时工作单元数与解决问题的规模 n 有关，它随着 n 的增大而增大，当 n 较大时，将占用较多的存储单元，例 如<strong>快速排序</strong>和<strong>归并排序算法</strong>, <strong>基数排序</strong>就属于这种情况 </p>
</li>
<li><p>在做算法分析时，主要讨论的是时间复杂度。<strong>从用户使用体验上看，更看重的程序执行的速度。</strong>一些缓存产品 (redis, memcache)和算法(基数排序)<strong>本质就是用空间换时间.</strong></p>
</li>
</ol>
<h3 id="1-5冒泡排序"><a href="#1-5冒泡排序" class="headerlink" title="1.5冒泡排序"></a>1.5冒泡排序</h3><h4 id="1-5-1基本介绍"><a href="#1-5-1基本介绍" class="headerlink" title="1.5.1基本介绍"></a>1.5.1基本介绍</h4><p>冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始）,<strong>依次比较 相邻元素的值，若发现逆序则交换，</strong>使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒</p>
<p>优化：</p>
<p> 因为排序的过程中，各元素不断接近自己的位置，<strong>如果一趟比较下来没有进行过交换，就说明序列有序，</strong>因此要在 排序过程中设置一个标志 flag 判断元素是否进行过交换。从而减少不必要的比较。(这里说的优化，可以在冒泡排 序写好后，在进行)</p>
<h4 id="1-5-2演示冒泡过程的例子-图解"><a href="#1-5-2演示冒泡过程的例子-图解" class="headerlink" title="1.5.2演示冒泡过程的例子(图解)"></a>1.5.2演示冒泡过程的例子(图解)</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182115.png" alt="image-20210108175818086"></p>
<p>小结上面的图解过程: </p>
<p>(1) 一共进行 数组的大小-1 次 大的循环 </p>
<p>(2)每一趟排序的次数在逐渐的减少 </p>
<p>(3) 如果我们发现在某趟排序中，没有发生一次交换， 可以提前结束冒泡排序。这个就是优化</p>
<h4 id="1-5-3冒泡排序应用实例"><a href="#1-5-3冒泡排序应用实例" class="headerlink" title="1.5.3冒泡排序应用实例"></a>1.5.3冒泡排序应用实例</h4><p>我们举一个具体的案例来说明冒泡法。我们将五个无序的数：3, 9, -1, 10, -2 使用冒泡排序法将其排成一个从小 到大的有序数列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-03 9:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 冒泡排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">80000</span>];</span><br><span class="line">        <span class="comment">//随机生成80000个数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">            arr[i] = (<span class="keyword">int</span>)(Math.random() * <span class="number">80000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line"><span class="comment">//        System.out.println(Arrays.toString(arr));</span></span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        System.out.println(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     * 冒泡排序因需要使用两重循环 所以时间复杂度为O(n^2)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义临时变量</span></span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//标识此次循环是否进行了排序 默认为false</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//需要进行数组长度-1次排序 每次都确定后面元素的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//需要比较的元素 因为每次都会确定后面一个位置的元素 所以还需要-i</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//升序排序</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>] ) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;第&quot; + (i + 1) +&quot;次排序的结果是&quot; + Arrays.toString(arr));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6选择排序"><a href="#1-6选择排序" class="headerlink" title="1.6选择排序"></a>1.6选择排序</h3><h4 id="1-6-1基本介绍"><a href="#1-6-1基本介绍" class="headerlink" title="1.6.1基本介绍"></a>1.6.1基本介绍</h4><p>选择式排序也属于内部排序法，是从欲排序的数据中，按指定的规则选出某一元素，再依规定交换位置后达到 排序的目的。</p>
<h4 id="1-6-2选择排序思想"><a href="#1-6-2选择排序思想" class="headerlink" title="1.6.2选择排序思想"></a>1.6.2选择排序思想</h4><p>选择排序（select sorting）也是一种简单的排序方法。它的基本思想是：第一次从 arr[0]<del>arr[n-1]中选取最小值， 与 arr[0]交换，第二次从 arr[1]</del>arr[n-1]中选取最小值，与 arr[1]交换，第三次从 arr[2]<del>arr[n-1]中选取最小值，与 arr[2] 交换，…，第 i 次从 arr[i-1]</del>arr[n-1]中选取最小值，与 arr[i-1]交换，…, 第 n-1 次从 arr[n-2]~arr[n-1]中选取最小值， 与 arr[n-2]交换，总共通过 n-1 次，得到一个按排序码从小到大排列的有序序列。</p>
<h4 id="1-6-3选择排序思路分析图"><a href="#1-6-3选择排序思路分析图" class="headerlink" title="1.6.3选择排序思路分析图"></a>1.6.3选择排序思路分析图</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182116.png" alt="image-20210108180055495"></p>
<p>对一个数组的选择排序再进行讲解</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182117.png" alt="image-20210108180108018"></p>
<h4 id="1-6-4选择排序应用实例"><a href="#1-6-4选择排序应用实例" class="headerlink" title="1.6.4选择排序应用实例:"></a>1.6.4选择排序应用实例:</h4><p>有一群牛 , 颜值分别是 101, 34, 119, 1 请使用选择排序从低到高进行排序 [101, 34, 119, 1]</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182118.png" alt="image-20210108180138750"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-03 9:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 选择排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">80000</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">            arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">80000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        selectSort(arr);</span><br><span class="line">        System.out.println(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     * 因为也是嵌套两个循环所以时间复杂度也是O(n^2)</span></span><br><span class="line"><span class="comment">     * 但是通过测试可以发现 80000数据 选择排序花费的时间只有5秒左右 但是冒泡排序需要花费20秒左右</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//设置默认最小值下标</span></span><br><span class="line">            min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最小值不是默认值 就需要交换</span></span><br><span class="line">            <span class="keyword">if</span> (min != i) &#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">                arr[i] = arr[min];</span><br><span class="line">                arr[min] = temp;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;第&quot; + (i + 1) + &quot;次排序&quot; + Arrays.toString(arr));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-7插入排序"><a href="#1-7插入排序" class="headerlink" title="1.7插入排序"></a>1.7插入排序</h3><h4 id="1-7-1插入排序法介绍"><a href="#1-7-1插入排序法介绍" class="headerlink" title="1.7.1插入排序法介绍"></a>1.7.1插入排序法介绍</h4><p>插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。</p>
<h4 id="1-7-2插入排序法思想"><a href="#1-7-2插入排序法思想" class="headerlink" title="1.7.2插入排序法思想"></a>1.7.2插入排序法思想</h4><p>插入排序（Insertion Sorting）的基本思想是：<strong>把 n 个待排序的元素看成为一个有序表和一个无序表，</strong>开始时<strong>有序表中只包含一个元素，</strong>无序表中包含有 <strong>n-1 个元素，</strong>排序过程中每次从无序表中取出第一个元素，把它的排 序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p>
<h4 id="1-7-3插入排序思路图"><a href="#1-7-3插入排序思路图" class="headerlink" title="1.7.3插入排序思路图"></a>1.7.3插入排序思路图</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182119.png" alt="image-20210108180326474"></p>
<h4 id="1-7-4插入排序法应用实例"><a href="#1-7-4插入排序法应用实例" class="headerlink" title="1.7.4插入排序法应用实例"></a>1.7.4插入排序法应用实例</h4><p>有一群小牛, 考试成绩分别是 101, 34, 119, 1 请从小到大排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-03 9:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 插入排序</span></span><br><span class="line"><span class="comment"> * 插入排序是从第二个数开始插入 第一个数保留在数组中 用来组成有序列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//&#123;101, 43, 34, 119, 1, -1&#125;</span></span><br><span class="line">        <span class="comment">//第一轮 有序列表&#123;43,101&#125; 无序列表&#123;34,119,1,-1&#125;</span></span><br><span class="line">        <span class="comment">//第二轮 有序列表&#123;34,43,101&#125; 无序列表&#123;119,1,-1&#125;</span></span><br><span class="line">        <span class="comment">//第三轮 有序列表&#123;34,43,101,119&#125; 无序列表&#123;1,-1&#125;</span></span><br><span class="line">        <span class="comment">//第四轮 有序列表&#123;1,34,43,101,119&#125; 无序列表&#123;-1&#125;</span></span><br><span class="line">        <span class="comment">//第五轮 有序列表&#123;-1,1,34,43,101,119&#125; 无序列表&#123;&#125;</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">80000</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">            arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">80000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        insertSort(arr);</span><br><span class="line">        System.out.println(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     * 时间复杂度O(n^2) 但是执行速度比冒泡排序和选择排序快</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//arr[0]默认是已经有序的 因为只有一个元素 所以i从1开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//保存需要插入的值</span></span><br><span class="line">            <span class="keyword">int</span> insertVal = arr[i];</span><br><span class="line">            <span class="comment">//需要判断的插入位置的值 第一个判断的就是当前需要插入的值下标的前一个数</span></span><br><span class="line">            <span class="keyword">int</span> insertIndex = i - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//判断insertIndex 不能越界 然后判断arr[insertIndex]代表当前判断的位置的值 如果大于需要插入的值的话就需要往前继续判断</span></span><br><span class="line">            <span class="comment">//将arr[insertIndex] 移动到arr[insertIndex+1] 后移一位</span></span><br><span class="line">            <span class="keyword">while</span> (insertIndex &gt;= <span class="number">0</span> &amp;&amp; arr[insertIndex] &gt; insertVal) &#123;</span><br><span class="line">                arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">                insertIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (insertIndex != i) &#123;</span><br><span class="line">                arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            System.out.println(Arrays.toString(arr));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-8希尔排序"><a href="#1-8希尔排序" class="headerlink" title="1.8希尔排序"></a>1.8希尔排序</h3><h4 id="1-8-1简单插入排序存在的问题"><a href="#1-8-1简单插入排序存在的问题" class="headerlink" title="1.8.1简单插入排序存在的问题"></a>1.8.1简单插入排序存在的问题</h4><p>我们看简单的插入排序可能存在的问题. </p>
<p>数组 arr = {2,3,4,5,6,1} 这时需要插入的数 <strong>1(最小),</strong> 这样的过程是： </p>
<p>{2,3,4,5,6,6} </p>
<p>{2,3,4,5,5,6} </p>
<p>{2,3,4,4,5,6} </p>
<p>{2,3,3,4,5,6} </p>
<p>{2,2,3,4,5,6} </p>
<p>{1,2,3,4,5,6}</p>
<p><strong>结论: 当需要插入的数是较小的数时，后移的次数明显增多，对效率有影响</strong></p>
<h4 id="1-8-2希尔排序法介绍"><a href="#1-8-2希尔排序法介绍" class="headerlink" title="1.8.2希尔排序法介绍"></a>1.8.2希尔排序法介绍</h4><p>希尔排序是希尔（Donald Shell）于 1959 年提出的一种排序算法。希尔排序也是一种<strong>插入排序，</strong>它是简单插入排序经过改进之后的一个<strong>更高效的版本，</strong>也称为<strong>缩小增量排序。</strong></p>
<h4 id="1-8-3希尔排序法基本思想"><a href="#1-8-3希尔排序法基本思想" class="headerlink" title="1.8.3希尔排序法基本思想"></a>1.8.3希尔排序法基本思想</h4><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含 的关键词越来越多，<strong>当增量减至 1 时，</strong>整个文件恰被分成一组，算法便终止</p>
<h4 id="1-8-4希尔排序法的示意图"><a href="#1-8-4希尔排序法的示意图" class="headerlink" title="1.8.4希尔排序法的示意图"></a>1.8.4希尔排序法的示意图</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182120.png" alt="image-20210108180726319"></p>
<h4 id="1-8-5希尔排序法应用实例"><a href="#1-8-5希尔排序法应用实例" class="headerlink" title="1.8.5希尔排序法应用实例:"></a>1.8.5希尔排序法应用实例:</h4><p>有一群小牛, 考试成绩分别是 {8,9,1,7,2,3,5,4,6,0} 请从小到大排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-03 9:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 选择排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">80000</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">            arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">80000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        selectSort(arr);</span><br><span class="line">        System.out.println(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     * 因为也是嵌套两个循环所以时间复杂度也是O(n^2)</span></span><br><span class="line"><span class="comment">     * 但是通过测试可以发现 80000数据 选择排序花费的时间只有5秒左右 但是冒泡排序需要花费20秒左右</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//设置默认最小值下标</span></span><br><span class="line">            min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最小值不是默认值 就需要交换</span></span><br><span class="line">            <span class="keyword">if</span> (min != i) &#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">                arr[i] = arr[min];</span><br><span class="line">                arr[min] = temp;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;第&quot; + (i + 1) + &quot;次排序&quot; + Arrays.toString(arr));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-9快速排序"><a href="#1-9快速排序" class="headerlink" title="1.9快速排序"></a>1.9快速排序</h3><h4 id="1-9-1快速排序法介绍"><a href="#1-9-1快速排序法介绍" class="headerlink" title="1.9.1快速排序法介绍"></a>1.9.1快速排序法介绍</h4><p>快速排序（Quicksort）是对<strong>冒泡排序</strong>的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两 部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排 序，<strong>整个排序过程可以递归进行，</strong>以此达到整个数据变成有序序列</p>
<h4 id="1-9-2快速排序法示意图"><a href="#1-9-2快速排序法示意图" class="headerlink" title="1.9.2快速排序法示意图"></a>1.9.2快速排序法示意图</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182121.png" alt="image-20210108180905067"></p>
<h4 id="1-9-3快速排序法应用实例"><a href="#1-9-3快速排序法应用实例" class="headerlink" title="1.9.3快速排序法应用实例"></a>1.9.3快速排序法应用实例</h4><p>要求: 对 [-9,78,0,23,-567,70] 进行从小到大的排序，要求使用快速排序法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-03 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 快速排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//快速排序处理1000000个数排序需要时间2-3秒</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10000000</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">10000000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     * 快速排序是通过一个基准值来将所有小于基准值的数都放到基准值的左边 将所有大于基准值的数放到基准值的右边</span></span><br><span class="line"><span class="comment">     * 然后通过递归来实现排序的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="comment">// 找寻基准数据的正确索引</span></span><br><span class="line">            <span class="keyword">int</span> index = getIndex(arr, left, right);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 进行迭代对index之前和之后的数组进行相同的操作使整个数组变成有序</span></span><br><span class="line">            <span class="comment">//quickSort(arr, 0, index - 1); 之前的版本，这种姿势有很大的性能问题，谢谢大家的建议</span></span><br><span class="line">            <span class="comment">//index 是基准数的位置</span></span><br><span class="line">            <span class="comment">//分别再为基准数左边和右边进行递归快速排序</span></span><br><span class="line">            quickSort(arr, left, index - <span class="number">1</span>);</span><br><span class="line">            quickSort(arr, index + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得索引位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左边</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右边下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(Arrays.toString(arr));</span></span><br><span class="line">        <span class="comment">//以下标left的作为基准数</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[left];</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="comment">//当right方向的值大于等于基准值时使right向前移</span></span><br><span class="line">            <span class="comment">//判断与基准值大小的时候必须带上= 因为如果不带上的话如果排序数组中有重复的数的话就会出现死循环</span></span><br><span class="line">            <span class="keyword">while</span> (arr[right] &gt;= temp &amp;&amp; left &lt; right) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当退出循环时则是right方向的值有小于等于temp值的 或者left &lt;= right了</span></span><br><span class="line">            <span class="keyword">if</span> (left != right) &#123;</span><br><span class="line">                arr[left] = arr[right];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当right方向的值小于等于基准值时使left向后移</span></span><br><span class="line">            <span class="keyword">while</span> (arr[left] &lt;= temp &amp;&amp; left &lt; right) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当退出循环时则是left方向的值有大于等于temp值的 或者left &lt;= right了</span></span><br><span class="line">            <span class="keyword">if</span> (left != right) &#123;</span><br><span class="line">                arr[right] = arr[left];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//跳出循环时left == right 此时这里就是temp的位置 就是基准值的位置</span></span><br><span class="line">        <span class="comment">//此时是arr[left]或arr[right]都没关系 因为是相等的</span></span><br><span class="line">        arr[left] = temp;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-10归并排序"><a href="#1-10归并排序" class="headerlink" title="1.10归并排序"></a>1.10归并排序</h3><h4 id="1-10-1归并排序介绍"><a href="#1-10-1归并排序介绍" class="headerlink" title="1.10.1归并排序介绍"></a>1.10.1归并排序介绍</h4><p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的<strong>分治（divide-and-conquer） 策略</strong>（分治法将问题分(divide)成一些<strong>小的问题然后递归求解，</strong>而治(conquer)的阶段则将分的阶段得到的各答案”修 补”在一起，即分而治之)。</p>
<h4 id="1-10-2归并排序思想示意图-1-基本思想"><a href="#1-10-2归并排序思想示意图-1-基本思想" class="headerlink" title="1.10.2归并排序思想示意图 1-基本思想:"></a>1.10.2归并排序思想示意图 1-基本思想:</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182122.png" alt="image-20210108181127341"></p>
<h4 id="1-10-3归并排序思想示意图-2-合并相邻有序子序列"><a href="#1-10-3归并排序思想示意图-2-合并相邻有序子序列" class="headerlink" title="1.10.3归并排序思想示意图 2-合并相邻有序子序列:"></a>1.10.3归并排序思想示意图 2-合并相邻有序子序列:</h4><p>再来看看治阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将 [4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182123.png" alt="image-20210108181157413"></p>
<h4 id="1-10-4归并排序的应用实例"><a href="#1-10-4归并排序的应用实例" class="headerlink" title="1.10.4归并排序的应用实例"></a>1.10.4归并排序的应用实例</h4><p>给你一个数组, val arr = Array(8, 4, 5, 7, 1, 3, 6, 2 ), 请使用归并排序完成排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-04 8:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 归并排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, temp);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分治算法的分解操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp  临时数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="comment">//定义中间下标</span></span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            System.out.println(left + <span class="string">&quot; &quot;</span> + right);</span><br><span class="line">            <span class="comment">//向左递归进行分解</span></span><br><span class="line">            mergeSort(arr, left, mid, temp);</span><br><span class="line">            <span class="comment">//向右递归进行分解</span></span><br><span class="line">            mergeSort(arr, mid + <span class="number">1</span>, right, temp);</span><br><span class="line">            <span class="comment">//分解结束后开始合并</span></span><br><span class="line">            merge(arr, left, right, temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行两个有序数组的合并</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp  临时数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(arr) + <span class="string">&quot;=========&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> l = left;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//右边下标为中间下标的下一个开始</span></span><br><span class="line">        <span class="keyword">int</span> r = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//临时数组下标</span></span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//将两个有序数组按照规则依次填入temp数组</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt;= mid &amp;&amp; r &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[l] &lt; arr[r]) &#123;</span><br><span class="line">                temp[t++] = arr[l++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp[t++] = arr[r++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退出上一个循环时代表已经有一个数组为空了 现在应该将另一个数组的值传入到temp中</span></span><br><span class="line">        <span class="keyword">while</span> (l &lt;= mid) &#123;</span><br><span class="line">            temp[t++] = arr[l++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (r &lt;= right) &#123;</span><br><span class="line">            temp[t++] = arr[r++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这时候temp已经填入好 现在需要将temp数组拷贝到arr数组</span></span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempLeft = left;</span><br><span class="line">        <span class="comment">//将temp数组中的元素一个个遍历到left 到right下标</span></span><br><span class="line">        <span class="keyword">while</span> (tempLeft &lt;= right) &#123;</span><br><span class="line">            arr[tempLeft++] = temp[t++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-11基数排序"><a href="#1-11基数排序" class="headerlink" title="1.11基数排序"></a>1.11基数排序</h3><h4 id="1-11-1基数排序-桶排序-介绍"><a href="#1-11-1基数排序-桶排序-介绍" class="headerlink" title="1.11.1基数排序(桶排序)介绍"></a>1.11.1基数排序(桶排序)介绍</h4><ol>
<li><p>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或 bin sort，顾 名思义，它是通过键值的各个位的值，将要排序的元素分配至某些“桶”中，达到排序的作用 </p>
</li>
<li><p>基数排序法是属于稳定性的排序，基数排序法的是效率高的<strong>稳定性</strong>排序法 </p>
</li>
<li><p>基数排序(Radix Sort)是桶排序的扩展 4) 基数排序是 1887 年赫尔曼·何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个 位数分别比较。</p>
</li>
</ol>
<h4 id="1-11-2基数排序基本思想"><a href="#1-11-2基数排序基本思想" class="headerlink" title="1.11.2基数排序基本思想"></a>1.11.2基数排序基本思想</h4><ol>
<li><p>将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。 这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p>
</li>
<li><p>这样说明，比较难理解，下面我们看一个图文解释，理解基数排序的步骤</p>
</li>
</ol>
<h4 id="1-11-3基数排序图文说明"><a href="#1-11-3基数排序图文说明" class="headerlink" title="1.11.3基数排序图文说明"></a>1.11.3基数排序图文说明</h4><p>将数组 {53, 3, 542, 748, 14, 214} 使用基数排序, 进行升序排序</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182124.png" alt="image-20210108181421233"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182125.png" alt="image-20210108181427173"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182126.png" alt="image-20210108181433022"></p>
<h4 id="1-11-4基数排序代码实现"><a href="#1-11-4基数排序代码实现" class="headerlink" title="1.11.4基数排序代码实现"></a>1.11.4基数排序代码实现</h4><p>要求：将数组 {53, 3, 542, 748, 14, 214} 使用基数排序, 进行升序排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-04 9:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 基数排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">53</span>, <span class="number">3</span>, <span class="number">542</span>, <span class="number">748</span>, <span class="number">14</span>, <span class="number">214</span>,<span class="number">4142</span>,<span class="number">2314</span>,<span class="number">3415</span>&#125;;</span><br><span class="line">        radixSort(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基数排序</span></span><br><span class="line"><span class="comment">     * 原理是创建10个桶 执行数组中最大值的位数次循环</span></span><br><span class="line"><span class="comment">     * 然后分别将每个数中的个、十、百……放入桶中 然后再依次取出来</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//防止最坏的情况出现出现下标越界 全部在同一个桶中</span></span><br><span class="line">        <span class="keyword">int</span>[][] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line">        <span class="comment">//创建每个桶中的数据个数</span></span><br><span class="line">        <span class="keyword">int</span>[] bucketElementCount = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//获得最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得最大值的长度</span></span><br><span class="line">        <span class="keyword">int</span> maxLength = (max + <span class="string">&quot;&quot;</span>).length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">1</span>; i &lt; maxLength; i++, n *= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">                <span class="comment">//取得需要放入桶的数</span></span><br><span class="line">                <span class="keyword">int</span> bucketNum = value / n % <span class="number">10</span>;</span><br><span class="line">                <span class="comment">//将该数放入桶中</span></span><br><span class="line">                bucket[bucketNum][bucketElementCount[bucketNum]++] = value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//此时桶中已经存放好数据 再一次从桶中取出数据</span></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//遍历桶</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucket.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(bucketElementCount[j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果桶中的数不为空的话就从桶中取出数</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; bucketElementCount[j]; k++) &#123;</span><br><span class="line">                        arr[index++] = bucket[j][k];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//从桶中取出后需要将桶元素的个数置0 不然会出现问题</span></span><br><span class="line">                    bucketElementCount[j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-11-5基数排序的说明"><a href="#1-11-5基数排序的说明" class="headerlink" title="1.11.5基数排序的说明"></a>1.11.5基数排序的说明</h4><ol>
<li><p>基数排序是对传统桶排序的扩展，速度很快. </p>
</li>
<li><p>基数排序是经典的空间换时间的方式，占用内存很大, 当对海量数据排序时，容易造成 OutOfMemoryError 。 </p>
</li>
<li><p>基数排序时稳定的。[注:假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些 记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且 r[i]在 r[j]之前，而在排序后的序列中，r[i]仍在 r[j]之前， 则称这种排序算法是稳定的；否则称为不稳定的] </p>
</li>
<li><p>有负数的数组，我们不用基数排序来进行排序, 如果要支持负数，参考: <a href="https://code.i-harness.com/zh-CN/q/e98fa9">https://code.i-harness.com/zh-CN/q/e98fa9</a></p>
</li>
</ol>
<h3 id="1-12常用排序算法总结和对比"><a href="#1-12常用排序算法总结和对比" class="headerlink" title="1.12常用排序算法总结和对比"></a>1.12常用排序算法总结和对比</h3><h4 id="1-12-1一张排序算法的比较图"><a href="#1-12-1一张排序算法的比较图" class="headerlink" title="1.12.1一张排序算法的比较图"></a>1.12.1一张排序算法的比较图</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108182127.png" alt="image-20210108181557287"></p>
<h4 id="1-12-2相关术语解释"><a href="#1-12-2相关术语解释" class="headerlink" title="1.12.2相关术语解释"></a>1.12.2相关术语解释</h4><ol>
<li><p>稳定：如果 a 原本在 b 前面，而 a=b，排序之后 a 仍然在 b 的前面； </p>
</li>
<li><p>不稳定：如果 a 原本在 b 的前面，而 a=b，排序之后 a 可能会出现在 b 的后面； </p>
</li>
<li><p>内排序：所有排序操作都在内存中完成； </p>
</li>
<li><p>外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行； </p>
</li>
<li><p>时间复杂度： 一个算法执行所耗费的时间。 </p>
</li>
<li><p>空间复杂度：运行完一个程序所需内存的大小。 </p>
</li>
<li><p>n: 数据规模 </p>
</li>
<li><p>k: “桶”的个数 </p>
</li>
<li><p>In-place: 不占用额外内存 </p>
</li>
<li><p>Out-place: 占用额外内存</p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构</category>
        <category>Sort</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>栈学习笔记</title>
    <url>/2021/01/08/%E6%A0%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-栈"><a href="#1-栈" class="headerlink" title="1.栈"></a>1.栈</h2><h3 id="1-1栈的一个实际需求"><a href="#1-1栈的一个实际需求" class="headerlink" title="1.1栈的一个实际需求"></a>1.1栈的一个实际需求</h3><p>请输入一个表达式 计算式:[7<em>2</em>2-5+1-5+3-3] 点击计算【如下图】</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108131329.png" alt="image-20210108125921937"></p>
<p>请问: 计算机底层是如何运算得到结果的？ 注意不是简单的把算式列出运算,因为我们看这个算式 7 * 2 * 2 - 5, 但是计算机怎么理解这个算式的(对计算机而言，它接收到的就是一个字符串)，我们讨论的是这个问题。-&gt; 栈</p>
<h3 id="1-2栈的介绍"><a href="#1-2栈的介绍" class="headerlink" title="1.2栈的介绍"></a>1.2栈的介绍</h3><ol>
<li><p>栈的英文为(stack) </p>
</li>
<li><p>栈是一个先入后出(FILO-First In Last Out)的有序列表。 </p>
</li>
<li><p>栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的 一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom)。 </p>
</li>
<li><p>根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元 素最先删除，最先放入的元素最后删除 </p>
</li>
<li><p>图解方式说明出栈(pop)和入栈(push)的概念</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108131330.png" alt="image-20210108130034224"></p>
</li>
</ol>
<h3 id="1-3栈的应用场景"><a href="#1-3栈的应用场景" class="headerlink" title="1.3栈的应用场景"></a>1.3栈的应用场景</h3><ol>
<li><p>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以 回到原来的程序中。 </p>
</li>
<li><p>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆 栈中。 </p>
</li>
<li><p>表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。 </p>
</li>
<li><p>二叉树的遍历。 </p>
</li>
<li><p>图形的深度优先(depth 一 first)搜索法。</p>
</li>
</ol>
<h3 id="1-4栈的快速入门"><a href="#1-4栈的快速入门" class="headerlink" title="1.4栈的快速入门"></a>1.4栈的快速入门</h3><ol>
<li><p>用数组模拟栈的使用，由于栈是一种有序列表，当然可以使用数组的结构来储存栈的数据内容， 下面我们就用数组模拟栈的出栈，入栈等操作。 </p>
</li>
<li><p>实现思路分析,并画出示意图</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108131331.png" alt="image-20210108130241540"></p>
</li>
</ol>
<h4 id="1-4-1数组栈"><a href="#1-4-1数组栈" class="headerlink" title="1.4.1数组栈"></a>1.4.1数组栈</h4><p>ArrayStack</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-29 16:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 数组模拟栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] stack;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> top = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈满！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stack[++top] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;栈是空的&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack[top--];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">showTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack[top];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;栈是空的&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = top; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;stack[&quot;</span> + i + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;:&quot;</span> + stack[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArrayStackDemo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-29 16:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStackDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试一下ArrayStack 是否正确</span></span><br><span class="line">        <span class="comment">//先创建一个ArrayStack对象-&gt;表示栈</span></span><br><span class="line">        ArrayStack stack = <span class="keyword">new</span> ArrayStack(<span class="number">4</span>);</span><br><span class="line">        String key = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>; <span class="comment">//控制是否退出菜单</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(loop) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;show: 表示显示栈&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;exit: 退出程序&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;push: 表示添加数据到栈(入栈)&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;pop: 表示从栈取出数据(出栈)&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的选择&quot;</span>);</span><br><span class="line">            key = scanner.next();</span><br><span class="line">            <span class="keyword">switch</span> (key) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        stack.showStack();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;push&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    stack.push(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;pop&quot;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = stack.pop();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;出栈的数据是 %d\n&quot;</span>, res);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序退出~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-4-2链表栈"><a href="#1-4-2链表栈" class="headerlink" title="1.4.2链表栈"></a>1.4.2链表栈</h4><p>LinkedListStack</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-29 17:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 链式栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 栈大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 头节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> StackNode head = <span class="keyword">new</span> StackNode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 栈顶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> StackNode top = head;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedListStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getLength() == maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(StackNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isFull()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈满&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使新添加的节点插入到head后 成为第一个节点 并连接上后面的节点 也就是栈顶</span></span><br><span class="line">        node.next = head.next;</span><br><span class="line">        <span class="comment">//使head连接上新节点</span></span><br><span class="line">        head.next = node;</span><br><span class="line">        <span class="comment">//将栈顶指针指向node</span></span><br><span class="line">        top = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StackNode <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StackNode node = top;</span><br><span class="line">        top = top.next;</span><br><span class="line">        head.next = top;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StackNode cur = top;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(cur);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StackNode cur = head.next;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LinkedListStackDemo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-29 18:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListStackDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedListStack stack = <span class="keyword">new</span> LinkedListStack(<span class="number">3</span>);</span><br><span class="line">        StackNode stackNode1 = <span class="keyword">new</span> StackNode(<span class="number">1</span>);</span><br><span class="line">        StackNode stackNode2 = <span class="keyword">new</span> StackNode(<span class="number">2</span>);</span><br><span class="line">        StackNode stackNode3 = <span class="keyword">new</span> StackNode(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        stack.push(stackNode1);</span><br><span class="line">        stack.push(stackNode2);</span><br><span class="line">        stack.push(stackNode3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;原节点&quot;</span>);</span><br><span class="line">        stack.showStack();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;出栈：&quot;</span> + stack.pop());</span><br><span class="line">        System.out.println(<span class="string">&quot;现节点&quot;</span>);</span><br><span class="line">        stack.showStack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-5栈实现综合计算器-中缀表达式"><a href="#1-5栈实现综合计算器-中缀表达式" class="headerlink" title="1.5栈实现综合计算器(中缀表达式)"></a>1.5栈实现综合计算器(中缀表达式)</h3><p>使用栈来实现综合计算器</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108131332.png" alt="image-20210108130515371"></p>
<p>思路分析(图解)</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108131333.png" alt="image-20210108130533615"></p>
<p>代码实现[1. 先实现一位数的运算， 2. 扩展到多位数的运算]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-30 9:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 计算器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用栈完成表达式的计算 思路</span></span><br><span class="line"><span class="comment">     * 1. 通过一个 index  值（索引），来遍历我们的表达式</span></span><br><span class="line"><span class="comment">     * 2. 如果我们发现是一个数字, 就直接入数栈</span></span><br><span class="line"><span class="comment">     * 3. 如果发现扫描到是一个符号,  就分如下情况</span></span><br><span class="line"><span class="comment">     * 3.1 如果发现当前的符号栈为 空，就直接入栈</span></span><br><span class="line"><span class="comment">     * 3.2 如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符，</span></span><br><span class="line"><span class="comment">     * 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，</span></span><br><span class="line"><span class="comment">     * 然后将当前的操作符入符号栈， 如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</span></span><br><span class="line"><span class="comment">     * 4. 当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</span></span><br><span class="line"><span class="comment">     * 5. 最后在数栈只有一个数字，就是表达式的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String expression = <span class="string">&quot;30+2*6-2&quot;</span>;</span><br><span class="line">        ArrayStack numStack = <span class="keyword">new</span> ArrayStack(<span class="number">10</span>);</span><br><span class="line">        ArrayStack operStack = <span class="keyword">new</span> ArrayStack(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ch = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> oper = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        StringBuilder num = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; expression.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//获取当前遍历的值</span></span><br><span class="line">            ch = expression.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (isOper(ch)) &#123;</span><br><span class="line">                <span class="comment">//是符号   压入numStack</span></span><br><span class="line">                numStack.push(Integer.parseInt(num.toString()));</span><br><span class="line">                <span class="comment">//清空num</span></span><br><span class="line">                num.delete(<span class="number">0</span>,num.length());</span><br><span class="line">                <span class="keyword">if</span> (!operStack.isEmpty()) &#123;</span><br><span class="line">                    <span class="comment">//符号栈不为空 如果当前的操作符的优先级小于或者等于栈中的操作符</span></span><br><span class="line">                    <span class="keyword">if</span> (priority(ch) &lt;= priority(operStack.showTop())) &#123;</span><br><span class="line">                        <span class="comment">//当前的操作符的优先级小于或者等于栈中的操作符</span></span><br><span class="line">                        <span class="comment">// 3.2 如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符，</span></span><br><span class="line">                        <span class="comment">// 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，</span></span><br><span class="line">                        <span class="comment">// 然后将当前的操作符入符号栈， 如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</span></span><br><span class="line">                        num1 = numStack.pop();</span><br><span class="line">                        num2 = numStack.pop();</span><br><span class="line">                        oper = operStack.pop();</span><br><span class="line">                        res = calculation(num1, num2, oper);</span><br><span class="line">                        numStack.push(res);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                operStack.push(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//是数字就直接push到numStack</span></span><br><span class="line"><span class="comment">//                numStack.push(ch - 48);</span></span><br><span class="line">                <span class="comment">//解决数字为多位的情况    每次判断的是数字的时候就添加的StringBuild中 然后在是符号的时候就将值压入栈中并清空</span></span><br><span class="line">                num.append(ch-<span class="number">48</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一个数字压栈</span></span><br><span class="line">        numStack.push(Integer.parseInt(num.toString()));</span><br><span class="line">        <span class="comment">//清空num</span></span><br><span class="line">        num.delete(<span class="number">0</span>,num.length());</span><br><span class="line">        <span class="comment">//遍历表达式结束</span></span><br><span class="line">        <span class="comment">//开始计算结果 循环结束条件为符号栈为空</span></span><br><span class="line">        <span class="keyword">while</span> (!operStack.isEmpty()) &#123;</span><br><span class="line">            num1 = numStack.pop();</span><br><span class="line">            num2 = numStack.pop();</span><br><span class="line">            oper = operStack.pop();</span><br><span class="line">            res = calculation(num1, num2, oper);</span><br><span class="line">            numStack.push(res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算结束后num剩下最后一个数 则是结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;表达式：&quot;</span> + expression + <span class="string">&quot; 的结果是：&quot;</span> + numStack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否是符号  暂定只有加减乘除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ch 判断的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：是 false：不是</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOper</span><span class="params">(<span class="keyword">int</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch == <span class="string">&#x27;+&#x27;</span> || ch == <span class="string">&#x27;-&#x27;</span> || ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断优先级</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ch 判断的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值越大优先级越高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">priority</span><span class="params">(<span class="keyword">int</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span> || ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2, <span class="keyword">int</span> oper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>; <span class="comment">// res 用于存放计算的结果</span></span><br><span class="line">        <span class="keyword">switch</span> (oper) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                res = num1 + num2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                res = num2 - num1;<span class="comment">// 注意顺序</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                res = num1 * num2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                res = num2 / num1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-6逆波兰计算器"><a href="#1-6逆波兰计算器" class="headerlink" title="1.6逆波兰计算器"></a>1.6逆波兰计算器</h3><p>我们完成一个逆波兰计算器，要求完成如下任务:</p>
<ol>
<li><p>输入一个逆波兰表达式(后缀表达式)，使用栈(Stack), 计算其结果 </p>
</li>
<li><p>支持小括号和多位数整数，因为这里我们主要讲的是数据结构，因此计算器进行简化，只支持对整数的计算。 </p>
</li>
<li><p>思路分析</p>
</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">例如: (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</span><br><span class="line">1．从左至右扫描，将 3 和 4 压入堆栈；</span><br><span class="line">2．遇到+运算符，因此弹出 4 和 3（4 为栈顶元素，3 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈；</span><br><span class="line">3．将 5 入栈；</span><br><span class="line">4．接下来是×运算符，因此弹出 5 和 7，计算出 7×5=35，将 35 入栈；</span><br><span class="line">5．将 6 入栈；</span><br><span class="line">6．最后是-运算符，计算出 35-6 的值，即 29，由此得出最终结果</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-30 10:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 逆波兰计算器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolandNotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成将一个中缀表达式转成后缀表达式的功能</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1. 1+((2+3)×4)-5 =&gt; 转成  1 2 3 + 4 × + 5 –</span></span><br><span class="line">        <span class="comment">//2. 因为直接对str 进行操作，不方便，因此 先将  &quot;1+((2+3)×4)-5&quot; =》 中缀的表达式对应的List</span></span><br><span class="line">        <span class="comment">//   即 &quot;1+((2+3)×4)-5&quot; =&gt; ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class="line">        <span class="comment">//3. 将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class="line">        <span class="comment">//   即 ArrayList [1,+,(,(,2,+,3,),*,4,),-,5]  =》 ArrayList [1,2,3,+,4,*,+,5,–]</span></span><br><span class="line">        <span class="comment">//中缀表达式</span></span><br><span class="line">        String Expression = <span class="string">&quot;10+((23+33)*41)-5&quot;</span>;</span><br><span class="line">        <span class="comment">//字符串转换成List</span></span><br><span class="line">        List&lt;String&gt; list = stringParseList(Expression);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//转换成后缀表达式的list</span></span><br><span class="line">        list = parseSuffixExpression(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(calculation(list));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //定义一个后缀表达式</span></span><br><span class="line"><span class="comment">//        String suffixExpression = &quot;3 4 + 5 * 6 -&quot;;</span></span><br><span class="line"><span class="comment">//        //将后缀表达式分割成一个List</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = splitString(suffixExpression);</span></span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line"><span class="comment">//        int res = calculation(list);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;结果是：&quot; + res);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中缀表达式转后缀表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 中缀表达式list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 后缀表达式list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">parseSuffixExpression</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1) 初始化两个栈：运算符栈s1和储存中间结果的栈s2；</span></span><br><span class="line">        <span class="comment">//2) 从左至右扫描中缀表达式；</span></span><br><span class="line">        <span class="comment">//3) 遇到操作数时，将其压s2；</span></span><br><span class="line">        <span class="comment">//4) 遇到运算符时，比较其与s1栈顶运算符的优先级：</span></span><br><span class="line">        <span class="comment">//1.如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</span></span><br><span class="line">        <span class="comment">//2.否则，若优先级比栈顶运算符的高，也将运算符压入s1；</span></span><br><span class="line">        <span class="comment">//3.否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较；</span></span><br><span class="line">        <span class="comment">//5) 遇到括号时：(1) 如果是左括号“(”，则直接压入s1(2) 如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span></span><br><span class="line">        <span class="comment">//6) 重复步骤2至5，直到表达式的最右边</span></span><br><span class="line">        <span class="comment">//7) 将s1中剩余的运算符依次弹出并压入s2</span></span><br><span class="line">        <span class="comment">//8)  依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式</span></span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">//可以使用List来代替第二个栈，因为第二个栈没有出栈操作</span></span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//开始扫描表达式</span></span><br><span class="line">        <span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//匹配为数字直接加入到res</span></span><br><span class="line">                res.add(item);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//如果为左括号直接压栈到stack</span></span><br><span class="line">                stack.push(item);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;)&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//如果是右括号 则依次从符号栈中弹出元素并加入到res 直到弹出元素为(时结束</span></span><br><span class="line">                String temp;</span><br><span class="line">                <span class="keyword">while</span> (!(temp = stack.pop()).equals(<span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">                    res.add(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//item为运算符</span></span><br><span class="line">                <span class="comment">//4) 遇到运算符时，比较其与s1栈顶运算符的优先级：</span></span><br><span class="line">                <span class="comment">//1.如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</span></span><br><span class="line">                <span class="comment">//2.否则，若优先级比栈顶运算符的高，也将运算符压入s1；</span></span><br><span class="line">                <span class="comment">//3.否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较；</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (stack.isEmpty() || stack.peek().equals(<span class="string">&quot;(&quot;</span>) || Operation.getValue(item) &gt; Operation.getValue(stack.peek())) &#123;</span><br><span class="line">                        stack.push(item);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        res.add(stack.pop());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将栈中剩余符号添加到res</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            res.add(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组转List</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expression 表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">stringParseList</span><span class="params">(String expression)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; expression.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = expression.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="number">48</span> &amp;&amp; ch &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">                sb.append(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sb.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                list.add(sb.toString());</span><br><span class="line">                sb.delete(<span class="number">0</span>, sb.length());</span><br><span class="line">                list.add((ch + <span class="string">&quot;&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                list.add(ch + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(sb.toString());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算后缀表达式</span></span><br><span class="line"><span class="comment">     * 30 4 + 5 × 6</span></span><br><span class="line"><span class="comment">     * 1.遍历表达式list 先将30 、 4 压入栈</span></span><br><span class="line"><span class="comment">     * 2.遇到符号后出栈两个数</span></span><br><span class="line"><span class="comment">     * 3.计算结果后将结果压入栈中</span></span><br><span class="line"><span class="comment">     * 4.遍历结束后栈中剩下最后一个数 就是结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 后缀表达式的list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculation</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//如果是数字则直接压栈</span></span><br><span class="line">                stack.push(item);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                num1 = Integer.parseInt(stack.pop());</span><br><span class="line">                num2 = Integer.parseInt(stack.pop());</span><br><span class="line">                <span class="comment">//符号</span></span><br><span class="line">                <span class="keyword">switch</span> (item) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                        res = num1 + num2;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                        res = num2 - num1;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                        res = num1 * num2;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                        res = num2 / num1;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;运算符有误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将结果压栈</span></span><br><span class="line">                stack.push(res + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分割表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> suffixExpression 后缀表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分割后的list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">splitString</span><span class="params">(String suffixExpression)</span> </span>&#123;</span><br><span class="line">        String[] str = suffixExpression.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(str));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个类 Operation 可以返回一个运算符 对应的优先级</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ADD = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> SUB = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MUL = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DIV = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法，返回对应的优先级数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(String operation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (operation) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                result = ADD;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                result = SUB;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                result = MUL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                result = DIV;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;不存在该运算符&quot;</span> + operation);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-7中缀表达式转换为后缀表达式"><a href="#1-7中缀表达式转换为后缀表达式" class="headerlink" title="1.7中缀表达式转换为后缀表达式"></a>1.7中缀表达式转换为后缀表达式</h3><p>大家看到，后缀表达式适合计算式进行运算，但是人却不太容易写出来，尤其是表达式很长的情况下，因此在开发 中，我们需要将 中缀表达式转成后缀表达式。</p>
<h4 id="1-7-1具体步骤如下："><a href="#1-7-1具体步骤如下：" class="headerlink" title="1.7.1具体步骤如下："></a>1.7.1具体步骤如下：</h4><ol>
<li><p>初始化两个栈：运算符栈 s1 和储存中间结果的栈 s2； </p>
</li>
<li><p>从左至右扫描中缀表达式； </p>
</li>
<li><p>遇到操作数时，将其压 s2； </p>
</li>
<li><p>遇到运算符时，比较其与 s1 栈顶运算符的优先级：</p>
</li>
</ol>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108131334.png" alt="image-20210108130859020"></p>
<h4 id="1-7-2举例说明"><a href="#1-7-2举例说明" class="headerlink" title="1.7.2举例说明"></a>1.7.2举例说明</h4><p>将中缀表达式“1+((2+3)×4)-5”转换为后缀表达式的过程如下 </p>
<p>因此结果为 :”1 2 3 + 4 × + 5 –”</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108131335.png" alt="image-20210108130927103"></p>
<h4 id="1-7-3代码实现中缀表达式转为后缀表达式"><a href="#1-7-3代码实现中缀表达式转为后缀表达式" class="headerlink" title="1.7.3代码实现中缀表达式转为后缀表达式"></a>1.7.3代码实现中缀表达式转为后缀表达式</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210108131231.png" alt="image-20210108130943629"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中缀表达式转后缀表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 中缀表达式list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 后缀表达式list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">parseSuffixExpression</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1) 初始化两个栈：运算符栈s1和储存中间结果的栈s2；</span></span><br><span class="line">    <span class="comment">//2) 从左至右扫描中缀表达式；</span></span><br><span class="line">    <span class="comment">//3) 遇到操作数时，将其压s2；</span></span><br><span class="line">    <span class="comment">//4) 遇到运算符时，比较其与s1栈顶运算符的优先级：</span></span><br><span class="line">    <span class="comment">//1.如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</span></span><br><span class="line">    <span class="comment">//2.否则，若优先级比栈顶运算符的高，也将运算符压入s1；</span></span><br><span class="line">    <span class="comment">//3.否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较；</span></span><br><span class="line">    <span class="comment">//5) 遇到括号时：(1) 如果是左括号“(”，则直接压入s1(2) 如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span></span><br><span class="line">    <span class="comment">//6) 重复步骤2至5，直到表达式的最右边</span></span><br><span class="line">    <span class="comment">//7) 将s1中剩余的运算符依次弹出并压入s2</span></span><br><span class="line">    <span class="comment">//8)  依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式</span></span><br><span class="line">    Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="comment">//可以使用List来代替第二个栈，因为第二个栈没有出栈操作</span></span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//开始扫描表达式</span></span><br><span class="line">    <span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//匹配为数字直接加入到res</span></span><br><span class="line">            res.add(item);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果为左括号直接压栈到stack</span></span><br><span class="line">            stack.push(item);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;)&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//如果是右括号 则依次从符号栈中弹出元素并加入到res 直到弹出元素为(时结束</span></span><br><span class="line">            String temp;</span><br><span class="line">            <span class="keyword">while</span> (!(temp = stack.pop()).equals(<span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">                res.add(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//item为运算符</span></span><br><span class="line">            <span class="comment">//4) 遇到运算符时，比较其与s1栈顶运算符的优先级：</span></span><br><span class="line">            <span class="comment">//1.如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</span></span><br><span class="line">            <span class="comment">//2.否则，若优先级比栈顶运算符的高，也将运算符压入s1；</span></span><br><span class="line">            <span class="comment">//3.否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4.1)与s1中新的栈顶运算符相比较；</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty() || stack.peek().equals(<span class="string">&quot;(&quot;</span>) || Operation.getValue(item) &gt; Operation.getValue(stack.peek())) &#123;</span><br><span class="line">                    stack.push(item);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.add(stack.pop());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将栈中剩余符号添加到res</span></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        res.add(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构</category>
        <category>Stack</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>链表学习笔记</title>
    <url>/2021/01/07/%E9%93%BE%E8%A1%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-链表"><a href="#1-链表" class="headerlink" title="1.链表"></a>1.链表</h2><h3 id="1-1链表-Linked-List-介绍"><a href="#1-1链表-Linked-List-介绍" class="headerlink" title="1.1链表(Linked List)介绍"></a>1.1链表(Linked List)介绍</h3><p>链表是有序的列表，但是它在内存中是存储如下</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107184303.png" alt="image-20210107183050360"></p>
<ol>
<li><p>链表是以节点的方式来存储,是链式存储 </p>
</li>
<li><p>每个节点包含 data 域， next 域：指向下一个节点. </p>
</li>
<li><p>如图：发现链表的各个节点不一定是连续存储. </p>
</li>
<li><p>链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定</p>
</li>
</ol>
<ul>
<li><p>单链表(带头结点) 逻辑结构示意图如下</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107184304.png" alt="image-20210107183204753"></p>
</li>
</ul>
<h3 id="1-2单链表的实例"><a href="#1-2单链表的实例" class="headerlink" title="1.2单链表的实例"></a>1.2单链表的实例</h3><p>使用带 head 头的单向链表实现 –水浒英雄排行榜管理完成对英雄人物的增删改查操作， 注: 删除和修改,查找 可以考虑学员独立完成，也可带学员完成 </p>
<ol>
<li>第一种方法在添加英雄时，直接添加到链表的尾部 思路分析示意图：</li>
</ol>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107184305.png" alt="image-20210107183257300"></p>
<ol start="2">
<li>第二种方式在添加英雄时，根据排名将英雄插入到指定位置(如果有这个排名，则添加失败，并给出提示) 思路的分析示意图:</li>
</ol>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107184306.png" alt="image-20210107183315923"></p>
<ol start="3">
<li><p>修改节点功能：思路1、先找到该节点，通过遍历 2、 temp.name = newHeroNode.name ; temp.nickname= newHeroNode.nickname</p>
</li>
<li><p>删除节点 思路分析的示意图:</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107184307.png" alt="image-20210107183428446"></p>
</li>
</ol>
<p>HeroNode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-28 19:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 英雄节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 称号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指向下一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickname=&#x27;&quot;</span> + nickname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>SingleLinkedList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-28 19:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 单链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建空值的头节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(HeroNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.head = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedList</span><span class="params">(HeroNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.head = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加（创建）</span></span><br><span class="line"><span class="comment">     * 1. 先创建一个head 头节点， 作用就是表示单链表的头</span></span><br><span class="line"><span class="comment">     * 2. 后面我们每添加一个节点，就直接加入到  链表的最后</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先需要创建一个临时节点，需要移动到链表的最后，然后将需要添加的节点链接上</span></span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">//如果temp的next不为null的话代表有下一个节点 需要往后移</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退出时代表temp的next已经为null了 可以连接上需要添加的node节点了</span></span><br><span class="line">        temp.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要按照编号的顺序添加</span></span><br><span class="line"><span class="comment">     * 1. 首先找到新添加的节点的位置, 是通过辅助变量(指针), 通过遍历来搞定</span></span><br><span class="line"><span class="comment">     * 2. 新的节点.next = temp.next</span></span><br><span class="line"><span class="comment">     * 3. 将temp.next = 新的节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrderByNode</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先需要创建一个临时节点，需要移动到链表的最后，然后将需要添加的节点链接上</span></span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">//flag代表是否相同 默认为false</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//如果temp的next不为null的话代表有下一个节点 需要往后移</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果下一个节点的no大于新添加的no的话就代表需要插入到当前temp的后一个位置</span></span><br><span class="line">            <span class="keyword">if</span> (temp.next.no &gt; node.no) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp.next.no == node.no) &#123;</span><br><span class="line">                <span class="comment">//如果编号相同则改变flag为true</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前需要插入的节点：&quot;</span> + node + <span class="string">&quot;  编号已存在无法插入！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.next = temp.next;</span><br><span class="line">            temp.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新节点 根据no来更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newHeroNode 需要更新的节点的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode newHeroNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前链表为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">//flag标识是否找到 默认为false</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            <span class="keyword">if</span> (temp.no == newHeroNode.no) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            temp.name = newHeroNode.name;</span><br><span class="line">            temp.nickname = newHeroNode.nickname;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前编号：&quot;</span> + newHeroNode.no + <span class="string">&quot; 未找到！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从单链表中删除一个节点的思路</span></span><br><span class="line"><span class="comment">     * 1.  我们先找到 需要删除的这个节点的前一个节点 temp</span></span><br><span class="line"><span class="comment">     * 2.  temp.next = temp.next.next</span></span><br><span class="line"><span class="comment">     * 3. 被删除的节点，将不会有其它引用指向，会被垃圾回收机制回收</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前链表是空的！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//在这里temp是在判断的节点前一个位置</span></span><br><span class="line">            <span class="keyword">if</span> (temp.next.no == no) &#123;</span><br><span class="line">                <span class="comment">//如果匹配到了no就直接退出并将flag标识为true</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            temp.next = temp.next.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找不到编号为：&quot;</span> + no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得链表长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 链表长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode crr = head.next;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (crr.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            crr = crr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取倒数第index个节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 倒数的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 获取倒数第index个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode <span class="title">getLastIndexNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断index是否超出链表长度或不合法</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; <span class="keyword">this</span>.getLength()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;index超出链表长度或不合法&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode crr = head.next;</span><br><span class="line">        <span class="comment">//获取倒数第index个可以获取到从第一个节点到第倒数第index个节点需要的次数 链表长度-index = 需要的次数</span></span><br><span class="line">        <span class="comment">//例如：链表长度为4 index = 1 这里i小于3 执行i = 0 1 2三次 crr可以从第一个节点执行到第四个节点 就到达了倒数第一个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.getLength() - index; i++) &#123;</span><br><span class="line">            crr = crr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> crr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 思路:</span></span><br><span class="line"><span class="comment">     * 1. 先定义一个节点 reverseHead = new HeroNode();</span></span><br><span class="line"><span class="comment">     * 2. 从头到尾遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端.</span></span><br><span class="line"><span class="comment">     * 3. 原来的链表的head.next = reverseHead.next</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果没有节点或只有一个节点则不需要反转</span></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//临时节点指向第一个节点</span></span><br><span class="line">        HeroNode crr = head.next;</span><br><span class="line">        <span class="comment">//临时节点的后一个节点</span></span><br><span class="line">        HeroNode next = <span class="keyword">null</span>;</span><br><span class="line">        HeroNode reverseHead = <span class="keyword">new</span> HeroNode();</span><br><span class="line">        <span class="keyword">while</span> (crr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//首先保存crr.next</span></span><br><span class="line">            next = crr.next;</span><br><span class="line">            <span class="comment">//将crr这个节点取出并将crr的next赋值为反转节点的第一个节点</span></span><br><span class="line">            crr.next = reverseHead.next;</span><br><span class="line">            <span class="comment">//将反转节点的第一个节点赋值为刚刚取过来的crr节点</span></span><br><span class="line">            reverseHead.next = crr;</span><br><span class="line">            <span class="comment">//将之前保存的next节点赋值给crr</span></span><br><span class="line">            crr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将head赋值为reverseNode</span></span><br><span class="line">        head = reverseHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逆序打印思路</span></span><br><span class="line"><span class="comment">     * 1. 上面的题的要求就是逆序打印单链表.</span></span><br><span class="line"><span class="comment">     * 2. 方式1： 先将单链表进行反转操作，然后再遍历即可，这样的做的问题是会破坏原来的单链表的结构，不建议</span></span><br><span class="line"><span class="comment">     * 3. 方式2：可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印的效果.</span></span><br><span class="line"><span class="comment">     * 举例演示栈的使用 Stack</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reversePrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前链表是空的！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建临时节点</span></span><br><span class="line">        HeroNode crr = head.next;</span><br><span class="line">        Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历链表</span></span><br><span class="line">        <span class="keyword">while</span> (crr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//进行压栈操作</span></span><br><span class="line">            stack.push(crr);</span><br><span class="line">            crr = crr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并两个有序的链表 合并后仍然有序</span></span><br><span class="line"><span class="comment">     * 1.新建一个头结点 存放合并后的链表</span></span><br><span class="line"><span class="comment">     * 2.判断第一个链表的节点和第二个链表的节点 哪个小就从哪个取出节点放入新头结点</span></span><br><span class="line"><span class="comment">     * 3.返回新头结点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head1 链表1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head2 链表2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HeroNode <span class="title">mergeList</span><span class="params">(HeroNode head1, HeroNode head2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head1.next == <span class="keyword">null</span> &amp;&amp; head2.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;两个链表都为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head1.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果第一个链表为空则直接返回第二个链表</span></span><br><span class="line">            <span class="keyword">return</span> head2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head2.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head1;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode head = <span class="keyword">new</span> HeroNode();</span><br><span class="line">        <span class="comment">//临时节点0 head的临时节点</span></span><br><span class="line">        HeroNode crr0 = head;</span><br><span class="line">        <span class="comment">//临时节点一</span></span><br><span class="line">        HeroNode crr1 = head1.next;</span><br><span class="line">        <span class="comment">//next节点一</span></span><br><span class="line">        HeroNode next1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//临时节点二</span></span><br><span class="line">        HeroNode crr2 = head2.next;</span><br><span class="line">        <span class="comment">//next节点二</span></span><br><span class="line">        HeroNode next2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//只要有一个链表到了null就代表没有节点了 则直接将另一个链表的剩余节点赋值给头结点</span></span><br><span class="line">        <span class="keyword">while</span> (crr1 != <span class="keyword">null</span> &amp;&amp; crr2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (crr1.no &lt; crr2.no) &#123;</span><br><span class="line">                <span class="comment">//将crr1的节点赋值给新链表</span></span><br><span class="line">                crr0.next = crr1;</span><br><span class="line">                <span class="comment">//将crr1后移</span></span><br><span class="line">                crr1 = crr1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//将crr2的节点赋值给新链表</span></span><br><span class="line">                crr0.next = crr2;</span><br><span class="line">                <span class="comment">//将crr2后移</span></span><br><span class="line">                crr2 = crr2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//crr0往后移</span></span><br><span class="line">            crr0 = crr0.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(crr1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            crr0.next = crr2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(crr2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            crr0.next = crr1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历：</span></span><br><span class="line"><span class="comment">     * 1.  通过一个辅助变量遍历，帮助遍历整个链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先需要创建一个临时节点,来遍历整个链表</span></span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">//如果temp的next不为null的话代表有下一个节点可以往后移之后输出数据</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">            <span class="comment">//输出当前节点</span></span><br><span class="line">            System.out.println(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SingleLinkedListDemo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-28 19:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> demo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//进行测试</span></span><br><span class="line">        <span class="comment">//先创建节点</span></span><br><span class="line">        HeroNode hero1 = <span class="keyword">new</span> HeroNode(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>, <span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line">        HeroNode hero2 = <span class="keyword">new</span> HeroNode(<span class="number">2</span>, <span class="string">&quot;卢俊义&quot;</span>, <span class="string">&quot;玉麒麟&quot;</span>);</span><br><span class="line">        HeroNode hero3 = <span class="keyword">new</span> HeroNode(<span class="number">3</span>, <span class="string">&quot;吴用&quot;</span>, <span class="string">&quot;智多星&quot;</span>);</span><br><span class="line">        HeroNode hero4 = <span class="keyword">new</span> HeroNode(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>, <span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建要给链表</span></span><br><span class="line">        SingleLinkedList singleLinkedList = <span class="keyword">new</span> SingleLinkedList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入</span></span><br><span class="line"><span class="comment">//        singleLinkedList.addNode(hero1);</span></span><br><span class="line"><span class="comment">//        singleLinkedList.addNode(hero4);</span></span><br><span class="line"><span class="comment">//        singleLinkedList.addNode(hero2);</span></span><br><span class="line"><span class="comment">//        singleLinkedList.addNode(hero3);</span></span><br><span class="line">        <span class="comment">//加入</span></span><br><span class="line">        singleLinkedList.addOrderByNode(hero1);</span><br><span class="line">        singleLinkedList.addOrderByNode(hero4);</span><br><span class="line">        singleLinkedList.addOrderByNode(hero2);</span><br><span class="line">        singleLinkedList.addOrderByNode(hero3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HeroNode newHeroNode = <span class="keyword">new</span> HeroNode(<span class="number">3</span>, <span class="string">&quot;宋江update&quot;</span>, <span class="string">&quot;及时雨update&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出原链表</span></span><br><span class="line">        singleLinkedList.showList();</span><br><span class="line"></span><br><span class="line">        singleLinkedList.update(newHeroNode);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;update=====================================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出更新后链表</span></span><br><span class="line">        singleLinkedList.showList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除节点</span></span><br><span class="line">        singleLinkedList.del(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;delete=====================================================&quot;</span>);</span><br><span class="line">        singleLinkedList.showList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试获取链表长度</span></span><br><span class="line">        System.out.println(<span class="string">&quot;length=====================================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前链表长度为：&quot;</span> + singleLinkedList.getLength());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试获得倒数第index个节点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;lastIndex=====================================================&quot;</span>);</span><br><span class="line">        System.out.println(singleLinkedList.getLastIndexNode(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;reverseList=====================================================&quot;</span>);</span><br><span class="line">        singleLinkedList.reverseList();</span><br><span class="line">        singleLinkedList.showList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试逆序输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;reversePrint=====================================================&quot;</span>);</span><br><span class="line">        singleLinkedList.reversePrint();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试合并两个有序的链表</span></span><br><span class="line">        SingleLinkedList list1 = <span class="keyword">new</span> SingleLinkedList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HeroNode hero5 = <span class="keyword">new</span> HeroNode(<span class="number">5</span>, <span class="string">&quot;宋江&quot;</span>, <span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line">        HeroNode hero10 = <span class="keyword">new</span> HeroNode(<span class="number">10</span>, <span class="string">&quot;卢俊义&quot;</span>, <span class="string">&quot;玉麒麟&quot;</span>);</span><br><span class="line">        HeroNode hero8 = <span class="keyword">new</span> HeroNode(<span class="number">8</span>, <span class="string">&quot;吴用&quot;</span>, <span class="string">&quot;智多星&quot;</span>);</span><br><span class="line">        HeroNode hero7 = <span class="keyword">new</span> HeroNode(<span class="number">7</span>, <span class="string">&quot;林冲&quot;</span>, <span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list1.addOrderByNode(hero5);</span><br><span class="line">        list1.addOrderByNode(hero10);</span><br><span class="line">        list1.addOrderByNode(hero8);</span><br><span class="line">        list1.addOrderByNode(hero7);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;list1=====================================================&quot;</span>);</span><br><span class="line">        list1.showList();</span><br><span class="line"></span><br><span class="line">        SingleLinkedList list2 = <span class="keyword">new</span> SingleLinkedList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HeroNode hero1t = <span class="keyword">new</span> HeroNode(<span class="number">1</span>, <span class="string">&quot;sb&quot;</span>, <span class="string">&quot;zxc&quot;</span>);</span><br><span class="line">        HeroNode hero8t = <span class="keyword">new</span> HeroNode(<span class="number">8</span>, <span class="string">&quot;zxc&quot;</span>, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        HeroNode hero5t = <span class="keyword">new</span> HeroNode(<span class="number">5</span>, <span class="string">&quot;asd&quot;</span>, <span class="string">&quot;asd&quot;</span>);</span><br><span class="line">        HeroNode hero28 = <span class="keyword">new</span> HeroNode(<span class="number">28</span>, <span class="string">&quot;avv&quot;</span>, <span class="string">&quot;qwe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list2.addOrderByNode(hero1t);</span><br><span class="line">        list2.addOrderByNode(hero8t);</span><br><span class="line">        list2.addOrderByNode(hero5t);</span><br><span class="line">        list2.addOrderByNode(hero28);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;list2=====================================================&quot;</span>);</span><br><span class="line">        list2.showList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        System.out.println(<span class="string">&quot;mergeList=====================================================&quot;</span>);</span><br><span class="line">        HeroNode head = SingleLinkedList.mergeList(list1.getHead(), list2.getHead());</span><br><span class="line">        SingleLinkedList mergeList = <span class="keyword">new</span> SingleLinkedList(head);</span><br><span class="line">        mergeList.showList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3双向链表应用实例"><a href="#1-3双向链表应用实例" class="headerlink" title="1.3双向链表应用实例"></a>1.3双向链表应用实例</h3><p>管理单向链表的缺点分析</p>
<ol>
<li><p>单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。</p>
</li>
<li><p>单向链表不能自我删除，需要靠辅助节点 ，而双向链表，则可以自我删除，所以前面我们单链表删除 时节点，总是找到 temp,temp 是待删除节点的前一个节点(认真体会). </p>
</li>
<li><p>分析了双向链表如何完成遍历，添加，修改和删除的思路<img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107184308.png" alt="image-20210107183643754"></p>
</li>
</ol>
<p>对上图的说明: 分析 双向链表的遍历，添加，修改，删除的操作思路===》代码实现</p>
<ol>
<li><p>遍历 方和 单链表一样，只是可以向前，也可以向后查找 </p>
</li>
<li><p>添加 (默认添加到双向链表的最后) </p>
</li>
</ol>
<p>(1) 先找到双向链表的最后这个节点 </p>
<p>(2) temp.next = newHeroNode </p>
<p>(3) newHeroNode.pre = temp; </p>
<ol start="3">
<li><p>修改 思路和 原来的单向链表一样. </p>
</li>
<li><p>删除</p>
</li>
</ol>
<p>(1) 因为是双向链表，因此，我们可以实现自我删除某个节点</p>
<p>(2) 直接找到要删除的这个节点，比如 temp </p>
<p>(3) temp.pre.next = temp.next </p>
<p>(4) temp.next.pre = temp.pre;</p>
<p>双向链表的实现</p>
<p>HeroNode2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-29 9:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroNode2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 称号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指向下一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode2 next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  指向前一个节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode2 pre;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode2</span><span class="params">(<span class="keyword">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickname=&#x27;&quot;</span> + nickname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>DoubleLinkedList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-29 9:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 双向链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建空值的头节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> HeroNode2 head = <span class="keyword">new</span> HeroNode2();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HeroNode2 <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(HeroNode2 head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.head = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleLinkedList</span><span class="params">(HeroNode2 head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.head = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加（创建）</span></span><br><span class="line"><span class="comment">     * 1. 先创建一个head 头节点， 作用就是表示单链表的头</span></span><br><span class="line"><span class="comment">     * 2. 后面我们每添加一个节点，就直接加入到  链表的最后</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(HeroNode2 node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先需要创建一个临时节点，需要移动到链表的最后，然后将需要添加的节点链接上</span></span><br><span class="line">        HeroNode2 temp = head;</span><br><span class="line">        <span class="comment">//如果temp的next不为null的话代表有下一个节点 需要往后移</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退出时代表temp的next已经为null了 可以连接上需要添加的node节点了</span></span><br><span class="line">        temp.next = node;</span><br><span class="line">        <span class="comment">//设置前一个节点</span></span><br><span class="line">        node.pre = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按顺序添加（创建）</span></span><br><span class="line"><span class="comment">     * 1. 先创建一个head 头节点， 作用就是表示单链表的头</span></span><br><span class="line"><span class="comment">     * 2. 后面我们每添加一个节点，就直接加入到  链表的最后</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrderByNode</span><span class="params">(HeroNode2 node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先需要创建一个临时节点，需要移动</span></span><br><span class="line">        HeroNode2 temp = head;</span><br><span class="line">        <span class="comment">//如果temp的next不为null的话代表有下一个节点 需要往后移</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//比较temp的后一个节点</span></span><br><span class="line">            <span class="keyword">if</span>(temp.next.no &gt; node.no) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退出时代表temp已到达需要插入的节点的位置的</span></span><br><span class="line">        <span class="comment">//插入节点的下一个节点为temp的下一个节点</span></span><br><span class="line">        node.next = temp.next;</span><br><span class="line">        <span class="comment">//将temp的下一个节点更改为新插入的节点</span></span><br><span class="line">        temp.next = node;</span><br><span class="line">        <span class="comment">//设置插入节点的上一个节点</span></span><br><span class="line">        node.pre = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新节点 根据no来更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newHeroNode2 需要更新的节点的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode2 newHeroNode2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前链表为空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode2 temp = head;</span><br><span class="line">        <span class="comment">//flag标识是否找到 默认为false</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            <span class="keyword">if</span> (temp.no == newHeroNode2.no) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            temp.name = newHeroNode2.name;</span><br><span class="line">            temp.nickname = newHeroNode2.nickname;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前编号：&quot;</span> + newHeroNode2.no + <span class="string">&quot; 未找到！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> no 编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前链表是空的！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HeroNode2 temp = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//在这里temp是在判断的节点前一个位置</span></span><br><span class="line">            <span class="keyword">if</span> (temp.no == no) &#123;</span><br><span class="line">                <span class="comment">//如果匹配到了no就直接退出并将flag标识为true</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//temp后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            temp.pre.next = temp.next;</span><br><span class="line">            <span class="keyword">if</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                temp.next.pre = temp.pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找不到编号为：&quot;</span> + no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历：</span></span><br><span class="line"><span class="comment">     * 1.  通过一个辅助变量遍历，帮助遍历整个链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先需要创建一个临时节点,来遍历整个链表</span></span><br><span class="line">        HeroNode2 temp = head;</span><br><span class="line">        <span class="comment">//如果temp的next不为null的话代表有下一个节点可以往后移之后输出数据</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">            <span class="comment">//输出当前节点</span></span><br><span class="line">            System.out.println(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DoubleLinkedListDemo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.linkedlist;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-29 9:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;双向链表的测试&quot;</span>);</span><br><span class="line">        <span class="comment">// 先创建节点</span></span><br><span class="line">        HeroNode2 hero1 = <span class="keyword">new</span> HeroNode2(<span class="number">5</span>, <span class="string">&quot;宋江&quot;</span>, <span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line">        HeroNode2 hero2 = <span class="keyword">new</span> HeroNode2(<span class="number">1</span>, <span class="string">&quot;卢俊义&quot;</span>, <span class="string">&quot;玉麒麟&quot;</span>);</span><br><span class="line">        HeroNode2 hero3 = <span class="keyword">new</span> HeroNode2(<span class="number">2</span>, <span class="string">&quot;吴用&quot;</span>, <span class="string">&quot;智多星&quot;</span>);</span><br><span class="line">        HeroNode2 hero4 = <span class="keyword">new</span> HeroNode2(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>, <span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建一个双向链表</span></span><br><span class="line">        DoubleLinkedList doubleLinkedList = <span class="keyword">new</span> DoubleLinkedList();</span><br><span class="line">        doubleLinkedList.addOrderByNode(hero1);</span><br><span class="line">        doubleLinkedList.addOrderByNode(hero2);</span><br><span class="line">        doubleLinkedList.addOrderByNode(hero3);</span><br><span class="line">        doubleLinkedList.addOrderByNode(hero4);</span><br><span class="line"></span><br><span class="line">        doubleLinkedList.showList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改</span></span><br><span class="line">        HeroNode2 newHeroNode = <span class="keyword">new</span> HeroNode2(<span class="number">4</span>, <span class="string">&quot;公孙胜&quot;</span>, <span class="string">&quot;入云龙&quot;</span>);</span><br><span class="line">        doubleLinkedList.update(newHeroNode);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改后的链表情况&quot;</span>);</span><br><span class="line">        doubleLinkedList.showList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        doubleLinkedList.del(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除后的链表情况~~&quot;</span>);</span><br><span class="line">        doubleLinkedList.showList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-4单向环形链表应用场景"><a href="#1-4单向环形链表应用场景" class="headerlink" title="1.4单向环形链表应用场景"></a>1.4单向环形链表应用场景</h3><p>Josephu(约瑟夫、约瑟夫环) 问题 </p>
<p>Josephu 问题为：设编号为 1，2，… n 的 n 个人围坐一圈，约定编号为 k（1&lt;=k&lt;=n）的人从 1 开始报数，数 到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推，直到所有人出列为止，由 此产生一个出队编号的序列。</p>
<p>提示：用一个不带头结点的循环链表来处理 Josephu 问题：先构成一个有 n 个结点的单循环链表，然后由 k 结 点起从 1 开始计数，计到 m 时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从 1 开始计数，直 到最后一个结点从链表中删除算法结束。</p>
<h3 id="1-5单向环形链表介绍"><a href="#1-5单向环形链表介绍" class="headerlink" title="1.5单向环形链表介绍"></a>1.5单向环形链表介绍</h3><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107184309.png" alt="image-20210107183902646"></p>
<h3 id="1-6Josephu-问题"><a href="#1-6Josephu-问题" class="headerlink" title="1.6Josephu 问题"></a>1.6Josephu 问题</h3><p>约瑟夫问题的示意图:</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107184310.png" alt="image-20210107183921652"></p>
<h4 id="1-6-1Josephu-问题"><a href="#1-6-1Josephu-问题" class="headerlink" title="1.6.1Josephu 问题"></a>1.6.1Josephu 问题</h4><p>Josephu 问题为：设编号为 1，2，… n 的 n 个人围坐一圈，约定编号为 k（1&lt;=k&lt;=n）的人从 1 开始报数，数到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推，直到所有人出列为止，由此 产生一个出队编号的序列。</p>
<h4 id="1-6-2提示"><a href="#1-6-2提示" class="headerlink" title="1.6.2提示"></a>1.6.2提示</h4><p>用一个不带头结点的循环链表来处理 Josephu 问题：先构成一个有 n 个结点的单循环链表，然后由 k 结点起从 1 开 始计数，计到 m 时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从 1 开始计数，直到最后一个 尚硅谷 Java 数据结构和算法 更多 Java –大数据 –前端 –python 人工智能 -区块链资料下载，可访问百度：尚硅谷官网 第 55页 结点从链表中删除算法结束。</p>
<h4 id="1-6-3约瑟夫问题-创建环形链表的思路图解"><a href="#1-6-3约瑟夫问题-创建环形链表的思路图解" class="headerlink" title="1.6.3约瑟夫问题-创建环形链表的思路图解"></a>1.6.3约瑟夫问题-创建环形链表的思路图解</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107184311.png" alt="image-20210107184021342"></p>
<h4 id="1-6-4约瑟夫问题-小孩出圈的思路分析图"><a href="#1-6-4约瑟夫问题-小孩出圈的思路分析图" class="headerlink" title="1.6.4约瑟夫问题-小孩出圈的思路分析图"></a>1.6.4约瑟夫问题-小孩出圈的思路分析图</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107184312.png" alt="image-20210107184035914"></p>
<p>代码实现：</p>
<p>创建环形链表</p>
<p>CircleSingleLinkedList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-29 10:42</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleSingleLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第一个节点</span></span><br><span class="line">    <span class="keyword">private</span> Boy first = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个大小为num的单向环形链表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 单向环形链表的大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num值不合法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Boy cur = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            Boy node = <span class="keyword">new</span> Boy(i);</span><br><span class="line">            <span class="comment">//第一个节点创建需要特殊处理</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//第一个节点</span></span><br><span class="line">                first = node;</span><br><span class="line">                <span class="comment">//构成一个环形链表 使自己指向自己</span></span><br><span class="line">                first.next = first;</span><br><span class="line">                <span class="comment">//将辅助指针cur指向first</span></span><br><span class="line">                cur = first;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//另外的节点则使用cur来连接新节点</span></span><br><span class="line">                cur.next = node;</span><br><span class="line">                <span class="comment">//使新添加的节点的next赋值为第一个节点first</span></span><br><span class="line">                node.next = first;</span><br><span class="line">                <span class="comment">//将新添加的节点赋值给cur</span></span><br><span class="line">                cur = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Boy cur = first;</span><br><span class="line">        <span class="comment">//循环遍历  判断是否遍历完的条件是 cur的下一个节点是否是第一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(cur);</span><br><span class="line">            <span class="keyword">if</span> (cur.next == first) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startNo  表示从第几个小孩开始数数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> countNum 表示数几下</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums     表示最初有多少小孩在圈中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">joseph</span><span class="params">(<span class="keyword">int</span> startNo, <span class="keyword">int</span> countNum, <span class="keyword">int</span> nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先对数据进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (startNo &lt; <span class="number">1</span> || startNo &gt; nums) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数输入有误， 请重新输入&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建节点</span></span><br><span class="line">        <span class="keyword">this</span>.add(nums);</span><br><span class="line">        <span class="comment">//创建辅助节点 跟在first节点的后面</span></span><br><span class="line">        Boy helper = first;</span><br><span class="line">        <span class="comment">//将helper移动到最后一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (helper.next != first) &#123;</span><br><span class="line">            helper = helper.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据startNo开始数 所以first和helper需要同时移动startNo-1次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startNo - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            first = first.next;</span><br><span class="line">            helper = helper.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当first == helper时代表此时循环单链表中只剩下一个节点</span></span><br><span class="line">        <span class="keyword">while</span>(first != helper) &#123;</span><br><span class="line">            <span class="comment">//根据需要叫的次数来移动次数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;countNum ; i++) &#123;</span><br><span class="line">                first = first.next;</span><br><span class="line">                helper = helper.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//移动完后可以进行出圈操作</span></span><br><span class="line">            System.out.println(first + <span class="string">&quot;出圈&quot;</span>);</span><br><span class="line">            <span class="comment">//等价于删除操作</span></span><br><span class="line">            first = first.next;</span><br><span class="line">            helper.next = first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时只剩下最后一个节点 将它输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最后一个节点&quot;</span> + first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JosephDemo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-29 10:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JosephDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  创建循环单链表操作</span></span><br><span class="line"><span class="comment">//        CircleSingleLinkedList list = new CircleSingleLinkedList();</span></span><br><span class="line"><span class="comment">//        list.add(25);</span></span><br><span class="line"><span class="comment">//        list.showList();</span></span><br><span class="line">        CircleSingleLinkedList list = <span class="keyword">new</span> CircleSingleLinkedList();</span><br><span class="line">        list.joseph(<span class="number">10</span>,<span class="number">20</span>,<span class="number">125</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>数据结构</category>
        <category>LinkedList</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security学习笔记</title>
    <url>/2021/01/07/spring%20security%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-SpringSecurity-框架简介"><a href="#1-SpringSecurity-框架简介" class="headerlink" title="1.SpringSecurity 框架简介"></a>1.SpringSecurity 框架简介</h2><h3 id="1-1-概要"><a href="#1-1-概要" class="headerlink" title="1.1 概要"></a>1.1 概要</h3><p>Spring 是非常流行和成功的 Java 应用开发框架，Spring Security 正是 Spring 家族中的 成员。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方 案。</p>
<p>正如你可能知道的关于安全方面的两个主要区域是“认证”和“授权”（或者访问控 制），一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权 （Authorization）两个部分，这两点也是 Spring Security 重要核心功能。</p>
<ul>
<li>用户认证指的是：验证某个用户是否为系统中的合法主体，也就是说用户能否访问 该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认 证过程。通俗点说就是系统认为用户是否能登录 </li>
<li>用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户 所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以 进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的 权限。通俗点讲就是系统判断用户是否有权限去做某些事情。</li>
</ul>
<h3 id="1-2-同款产品对比"><a href="#1-2-同款产品对比" class="headerlink" title="1.2 同款产品对比"></a>1.2 同款产品对比</h3><h4 id="1-2-1SpringSecurity"><a href="#1-2-1SpringSecurity" class="headerlink" title="1.2.1SpringSecurity"></a>1.2.1SpringSecurity</h4><p>Spring 技术栈的组成部分。 通过提供完整可扩展的认证和授权支持保护你的应用程序。 <a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a> SpringSecurity 特点：</p>
<ul>
<li><p>和 Spring 无缝整合。 </p>
</li>
<li><p>全面的权限控制。 </p>
</li>
<li><p>专门为 Web 开发而设计。</p>
<ul>
<li> ◼旧版本不能脱离 Web 环境使用。 </li>
<li> ◼新版本对整个框架进行了分层抽取，分成了核心模块和 Web 模块。单独 引入核心模块就可以脱离 Web 环境。 </li>
</ul>
</li>
<li><p>重量级。</p>
</li>
</ul>
<h4 id="1-2-2-Shiro"><a href="#1-2-2-Shiro" class="headerlink" title="1.2.2 Shiro"></a>1.2.2 Shiro</h4><p>Apache 旗下的轻量级权限控制框架。 特点：</p>
<ul>
<li>轻量级。Shiro 主张的理念是把复杂的事情变简单。针对对性能有更高要求 的互联网应用有更好表现。</li>
<li>通用性。<ul>
<li> ◼好处：不局限于 Web 环境，可以脱离 Web 环境使用。</li>
<li> ◼缺陷：在 Web 环境下一些特定的需求需要手动编写代码定制</li>
</ul>
</li>
</ul>
<p>Spring Security 是 Spring 家族中的一个安全管理框架，实际上，在 Spring Boot 出现之 前，Spring Security 就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直 是 Shiro 的天下。 相对于 Shiro，在 SSM 中整合 Spring Security 都是比较麻烦的操作，所以，Spring Security 虽然功能比 Shiro 强大，但是使用反而没有 Shiro 多（Shiro 虽然功能没有 Spring Security 多，但是对于大部分项目而言，Shiro 也够用了）。 自从有了 Spring Boot 之后，Spring Boot 对于 Spring Security 提供了自动化配置方 案，可以使用更少的配置来使用 Spring Security。</p>
<h3 id="1-3模块划分"><a href="#1-3模块划分" class="headerlink" title="1.3模块划分"></a>1.3模块划分</h3><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094740.png" alt="image-20201203225522207"></p>
<h2 id="2-SpringBoot-对-Security-的自动配置"><a href="#2-SpringBoot-对-Security-的自动配置" class="headerlink" title="2 SpringBoot 对 Security 的自动配置"></a>2 SpringBoot 对 Security 的自动配置</h2><p><a href="https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/#servlet-hello">https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/#servlet-hello</a></p>
<h2 id="3-SpringSecurity-入门案例"><a href="#3-SpringSecurity-入门案例" class="headerlink" title="3.SpringSecurity 入门案例"></a>3.SpringSecurity 入门案例</h2><h3 id="3-1创建一个项目"><a href="#3-1创建一个项目" class="headerlink" title="3.1创建一个项目"></a>3.1创建一个项目</h3><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094741.png" alt="image-20201203225637468"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094742.png" alt="image-20201203225632123"></p>
<h3 id="3-2改pom"><a href="#3-2改pom" class="headerlink" title="3.2改pom"></a>3.2改pom</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入springsecurity依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-3创建application-yml文件"><a href="#3-3创建application-yml文件" class="headerlink" title="3.3创建application.yml文件"></a>3.3创建application.yml文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8011</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094743.png" alt="image-20201203230028148"></p>
</blockquote>
<h3 id="3-4创建controller接口"><a href="#3-4创建controller接口" class="headerlink" title="3.4创建controller接口"></a>3.4创建controller接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.springsecurity.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-03 23:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 测试控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello security&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-测试接口"><a href="#3-5-测试接口" class="headerlink" title="3.5 测试接口"></a>3.5 测试接口</h3><h4 id="3-5-1启动Application"><a href="#3-5-1启动Application" class="headerlink" title="3.5.1启动Application"></a>3.5.1启动Application</h4><h4 id="3-5-2访问接口"><a href="#3-5-2访问接口" class="headerlink" title="3.5.2访问接口"></a>3.5.2访问接口</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">localhost:8011/test/hello</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094744.png" alt="image-20201203230437681"></p>
<p>给我们的页面却是一个登录界面，需要我们登录。</p>
<p>默认用户名:user</p>
<p>密码在项目启动的时候在控制台会打印，<code>注意每次启动的时候密码都回发生变化！</code></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094745.png" alt="image-20201203231002485"></p>
<p>登录后自动跳转到了需要访问的路径</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094746.png" alt="image-20201203231038540"></p>
</blockquote>
<h2 id="4-SpringSecurity基本原理"><a href="#4-SpringSecurity基本原理" class="headerlink" title="4. SpringSecurity基本原理"></a>4. SpringSecurity基本原理</h2><p>SpringSecurity 本质是一个过滤器链： 从启动是可以获取到过滤器链：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter</span><br><span class="line">org.springframework.security.web.context.SecurityContextPersistenceFilter</span><br><span class="line">org.springframework.security.web.header.HeaderWriterFilter</span><br><span class="line">org.springframework.security.web.csrf.CsrfFilter</span><br><span class="line">org.springframework.security.web.authentication.logout.LogoutFilter</span><br><span class="line">org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</span><br><span class="line">org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter</span><br><span class="line">org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter</span><br><span class="line">org.springframework.security.web.savedrequest.RequestCacheAwareFilter</span><br><span class="line">org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter</span><br><span class="line">org.springframework.security.web.authentication.AnonymousAuthenticationFilter</span><br><span class="line">org.springframework.security.web.session.SessionManagementFilter</span><br><span class="line">org.springframework.security.web.access.ExceptionTranslationFilter</span><br><span class="line">org.springframework.security.web.access.intercept.FilterSecurityInterceptor</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094747.png" alt="image-20201204003002108"></p>
</blockquote>
<p>代码底层流程：重点看三个过滤器： </p>
<p>FilterSecurityInterceptor：是一个方法级的权限过滤器, 基本位于过滤链的最底部。</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094748.png" alt="image-20201204001709655"></p>
<p>super.beforeInvocation(fi) 表示查看之前的 filter 是否通过。 fi.getChain().doFilter(fi.getRequest(), fi.getResponse());表示真正的调用后台的服务。</p>
</blockquote>
<p>ExceptionTranslationFilter：是个异常过滤器，用来处理在认证授权过程中抛出的异常</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094749.png" alt="image-20201204001838848"></p>
</blockquote>
<p>UsernamePasswordAuthenticationFilter ：对/login 的 POST 请求做拦截，校验表单中用户 名，密码。</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094750.png" alt="image-20201204001932106"></p>
</blockquote>
<p>两个重要的接口</p>
<p>UserDetailsService：当什么也没有配置的时候，账号和密码是由 Spring Security 定义生成的。而在实际项目中 账号和密码都是从数据库中查询出来的。 所以我们要通过自定义逻辑控制认证逻辑。</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094751.png" alt="image-20201204011401664"></p>
<p>返回值 UserDetails：这个类是系统默认的用户“主体”</p>
</blockquote>
<p>PasswordEncoder：数据加密接口，用于返回User对象里面的密码加密</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示把参数按照特定的解析规则进行解析</span></span><br><span class="line"><span class="function">String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span></span>;</span><br><span class="line"><span class="comment">// 表示验证从存储中获取的编码密码与编码后提交的原始密码是否匹配。如果密码匹</span></span><br><span class="line">配，则返回 <span class="keyword">true</span>；如果不匹配，则返回 <span class="keyword">false</span>。第一个参数表示需要被解析的密码。第二个</span><br><span class="line">参数表示存储的密码。</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span></span>;</span><br><span class="line"><span class="comment">// 表示如果解析的密码能够再次进行解析且达到更安全的结果则返回 true，否则返回</span></span><br><span class="line"><span class="keyword">false</span>。默认返回 <span class="keyword">false</span>。</span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">upgradeEncoding</span><span class="params">(String encodedPassword)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094752.png" alt="image-20201204011620814"></p>
<p>BCryptPasswordEncoder 是 Spring Security 官方推荐的密码解析器，平时多使用这个解析器。 BCryptPasswordEncoder 是对 bcrypt 强散列方法的具体实现。是基于 Hash 算法实现的单向加密。可以通过 strength 控制加密强度，默认 10.</p>
</blockquote>
<h3 id="4-1-实现用户名和密码的自定义"><a href="#4-1-实现用户名和密码的自定义" class="headerlink" title="4.1 实现用户名和密码的自定义"></a>4.1 实现用户名和密码的自定义</h3><p>实现自定义用户，首先先创建<code>UserDtailsService</code>的实现类，实现<code>loadUserByUsername</code>方法来加载自定义用户名和密码，返回值为Security包中提供的User对象,然后创建Security的配置类，继承<code>WebSecurityConfigurerAdapter</code>重写其中的configure方法</p>
<p>创建<code>UserDtailsServiceImp</code>l实现<code>UserDtailsService</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.springsecurity.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-04 1:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 设置登录的用户名和密码实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载用户名和密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 可能为前台传入的用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 登录的用户名和密码对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException 用户名未找到异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;wsy&quot;</span>, <span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>), auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<code>SecurityConfig</code>继承<code>WebSecurityConfigurerAdapter</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.springsecurity.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-04 0:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Security配置类 配置登录时的用户名和密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityConfig</span><span class="params">(<span class="meta">@Qualifier(&quot;userDetailsServiceImpl&quot;)</span> UserDetailsService userDetailsService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建PasswordEncoder对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BCryptPasswordEncoder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">getPasswordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置认证的用户名和密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth 认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//设置用户和密码加密对象</span></span><br><span class="line">        auth.userDetailsService(<span class="keyword">this</span>.userDetailsService).passwordEncoder(getPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094753.png" alt="image-20201204012600477"></p>
</blockquote>
<h3 id="4-2-实现数据库认证来完成用户登录"><a href="#4-2-实现数据库认证来完成用户登录" class="headerlink" title="4.2 实现数据库认证来完成用户登录"></a>4.2 实现数据库认证来完成用户登录</h3><p>添加pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入Mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>yml文件添加数据库配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8011</span></span><br><span class="line"><span class="comment"># 配置数据库信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/security?serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">wsy112233</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>创建实体类User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.springsecurity.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-04 17:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用户实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.springsecurity.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wsy.springsecurity.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-04 17:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 用户mapper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名获得用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByUsername</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wsy.springsecurity.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.wsy.springsecurity.entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wsy.springsecurity.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select id, username, password</span><br><span class="line">        where users where username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094754.png" alt="image-20201204174206039"></p>
</blockquote>
<p>修改UserDetailsServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.springsecurity.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wsy.springsecurity.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-04 1:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 设置登录的用户名和密码实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDetailsServiceImpl</span><span class="params">(UserMapper userMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper = userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载用户名和密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 前台传入的用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 登录的用户名和密码对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UsernameNotFoundException 用户名未找到异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        com.wsy.springsecurity.entity.User user = <span class="keyword">this</span>.userMapper.getUserByUsername(username);</span><br><span class="line">        <span class="comment">//如果用户名不存在则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == user) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;该用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(user.getUsername(), <span class="keyword">new</span> BCryptPasswordEncoder().encode(user.getPassword()), auths);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-实现自定义登录页面"><a href="#4-3-实现自定义登录页面" class="headerlink" title="4.3 实现自定义登录页面"></a>4.3 实现自定义登录页面</h3><p>更改SecurityConfig配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.springsecurity.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-04 0:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Security配置类 配置登录时的用户名和密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityConfig</span><span class="params">(<span class="meta">@Qualifier(&quot;userDetailsServiceImpl&quot;)</span> UserDetailsService userDetailsService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建PasswordEncoder对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BCryptPasswordEncoder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">getPasswordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置认证的用户名和密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth 认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//设置用户和密码加密对象</span></span><br><span class="line">        auth.userDetailsService(<span class="keyword">this</span>.userDetailsService).passwordEncoder(getPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以修改登录路径和设置访问白名单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http HttpSecurity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//定义自己的登录页面</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                <span class="comment">//设置自己的登录页面</span></span><br><span class="line">                .loginPage(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line">                <span class="comment">//设置点击登录时提交的路径  不需要自己编写Security由提供</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">                <span class="comment">//登录成功后自动跳转到/test/index</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()</span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                <span class="comment">//设置不需要登录就可以访问的路径</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/test/hello&quot;</span>, <span class="string">&quot;/user/login&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">//对http所有的请求必须通过授权认证才可以访问</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                <span class="comment">//关闭csrf防护</span></span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改TestController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.springsecurity.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-03 23:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 测试控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello security&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>添加index.html页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此时可以直接访问localhost:8011/test/hello 不需要登录</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094755.png" alt="image-20201204183249656"></p>
</blockquote>
<p>访问localhost:8011/test/index 需要登录 因为在配置时我们没有配置该路径可以不用认证就可以访问</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094756.png" alt="image-20201204183329791"></p>
</blockquote>
<h3 id="4-4-基于角色或权限进行访问控制"><a href="#4-4-基于角色或权限进行访问控制" class="headerlink" title="4.4 基于角色或权限进行访问控制"></a>4.4 基于角色或权限进行访问控制</h3><h4 id="4-4-1-hasAuthority方法"><a href="#4-4-1-hasAuthority方法" class="headerlink" title="4.4.1 hasAuthority方法"></a>4.4.1 hasAuthority方法</h4><p>如果当前的主体具有指定的权限，则返回 true,否则返回 false</p>
<p>修改SecurityConfig配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以修改登录路径和设置访问白名单</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> http HttpSecurity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//定义自己的登录页面</span></span><br><span class="line">    http.formLogin()</span><br><span class="line">            <span class="comment">//设置自己的登录页面</span></span><br><span class="line">            .loginPage(<span class="string">&quot;/index.html&quot;</span>)</span><br><span class="line">            <span class="comment">//设置点击登录时提交的路径  不需要自己编写Security由提供</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">            <span class="comment">//登录成功后自动跳转到/test/index</span></span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()</span><br><span class="line">            .and().authorizeRequests()</span><br><span class="line">            <span class="comment">//设置不需要登录就可以访问的路径</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/test/hello&quot;</span>, <span class="string">&quot;/user/login&quot;</span>).permitAll()</span><br><span class="line">            <span class="comment">//需要验证是否拥有admins这个权限</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAuthority(<span class="string">&quot;admins&quot;</span>)</span><br><span class="line">            <span class="comment">//对http所有的请求必须通过授权认证才可以访问</span></span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            <span class="comment">//关闭csrf防护</span></span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这时候我们设置的权限是abc，而不是admins所以应该是无法访问的</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094757.png" alt="image-20201204205752397"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094758.png" alt="image-20201204205847528"></p>
<p>这时候访问报错，提示403没有权限访问</p>
<p>这时候我们再将权限改为admins登录试一试</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094759.png" alt="image-20201204205933640"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094800.png" alt="image-20201204205949253">访问成功</p>
</blockquote>
<h4 id="4-4-2-hasAnyAuthority-方法"><a href="#4-4-2-hasAnyAuthority-方法" class="headerlink" title="4.4.2  hasAnyAuthority 方法"></a>4.4.2  hasAnyAuthority 方法</h4><p>如果当前的主体有任何提供的角色（给定的作为一个逗号分隔的字符串列表）的话，返回 true.</p>
<p>修改SecurityConfig配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以修改登录路径和设置访问白名单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http HttpSecurity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//定义自己的登录页面</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                <span class="comment">//设置自己的登录页面</span></span><br><span class="line">                .loginPage(<span class="string">&quot;/index.html&quot;</span>)</span><br><span class="line">                <span class="comment">//设置点击登录时提交的路径  不需要自己编写Security由提供</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/user/login&quot;</span>)</span><br><span class="line">                <span class="comment">//登录成功后自动跳转到/test/index</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/test/index&quot;</span>).permitAll()</span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                <span class="comment">//设置不需要登录就可以访问的路径</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/test/hello&quot;</span>, <span class="string">&quot;/user/login&quot;</span>).permitAll()</span><br><span class="line"><span class="comment">//                //需要验证是否拥有admins这个权限</span></span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)</span></span><br><span class="line">                <span class="comment">//需要验证是否在这些权限之中</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/test/index&quot;</span>).hasAnyAuthority(<span class="string">&quot;admins&quot;</span>,<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                <span class="comment">//对http所有的请求必须通过授权认证才可以访问</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                <span class="comment">//关闭csrf防护</span></span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此时权限有admins或者user的就都可以访问该路径了，这里就不再截图演示了</p>
</blockquote>
<h4 id="4-4-3-hasRole-方法"><a href="#4-4-3-hasRole-方法" class="headerlink" title="4.4.3 hasRole 方法"></a>4.4.3 hasRole 方法</h4><p>如果用户具备给定角色就允许访问,否则出现 403。 如果当前主体具有指定的角色，则返回 true。 </p>
<p>底层源码：</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094801.png" alt="image-20201204214302849">在实现方法的地方发现返回的字符串前加了一个ROLE_这个前缀，所以我们在设置角色的时候也需要加上这个前缀</p>
</blockquote>
<p>修改UserDetailsServiceImpl</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094802.png" alt="image-20201204214459873"></p>
<p>修改SecurityConfig配置类</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094803.png" alt="image-20201204214532040"></p>
<p>修改配置文件： 注意配置文件中不需要添加”ROLE_“，因为上述的底层代码会自动添加与之进行匹配。</p>
<h4 id="4-4-4-hasAnyRole方法"><a href="#4-4-4-hasAnyRole方法" class="headerlink" title="4.4.4 hasAnyRole方法"></a>4.4.4 hasAnyRole方法</h4><p>表示用户具备任何一个条件都可以访问 这里与以上类似就不再做演示</p>
<h3 id="4-5-实现自定义403页面"><a href="#4-5-实现自定义403页面" class="headerlink" title="4.5 实现自定义403页面"></a>4.5 实现自定义403页面</h3><p>创建unauth.html页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>很抱歉您没有访问的权限！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改SecurityConfig配置类</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094804.png" alt="image-20201204215423083"></p>
<p>测试结果：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094805.png" alt="image-20201204215444779"></p>
</blockquote>
<h3 id="4-6-SpringSecurity-注解的使用"><a href="#4-6-SpringSecurity-注解的使用" class="headerlink" title="4.6  SpringSecurity 注解的使用"></a>4.6  SpringSecurity 注解的使用</h3><h4 id="4-6-1-Secured"><a href="#4-6-1-Secured" class="headerlink" title="4.6.1 @Secured"></a>4.6.1 @Secured</h4><p>首先在启动类上加上注解<code>@EnableGlobalMethodSecurity(securedEnabled = true)</code></p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094806.png" alt="image-20201204220301281"></p>
</blockquote>
<p>修改TestController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello security&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Secured(&#123;&quot;ROLE_sale&quot;,&quot;ROLE_admin&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时访问localhost:8011/test/update时就会检查是否拥有注解配置的角色</p>
<h4 id="4-6-2-PreAuthorize"><a href="#4-6-2-PreAuthorize" class="headerlink" title="4.6.2  @PreAuthorize"></a>4.6.2  @PreAuthorize</h4><p>首先在启动类上加上注解<code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094807.png" alt="image-20201204221454216"></p>
<p>@PreAuthorize：注解适合进入方法前的权限验证， @PreAuthorize 可以将登录用户的 roles/permissions 参数传到方法中。</p>
<p>在TestController中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;ROLE_sale&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/delete&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello delete&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-6-3-PostAuthorize"><a href="#4-6-3-PostAuthorize" class="headerlink" title="4.6.3 @PostAuthorize"></a>4.6.3 @PostAuthorize</h4><p>先开启注解功能： <code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code></p>
<p>@PostAuthorize 注解使用并不多，在方法执行后再进行权限验证，适合验证带有返回值 的权限.</p>
<p>在TestController中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostAuthorize(&quot;hasAnyAuthority(&#x27;ROLE_sale1&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/delete1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//没有权限时方法会执行，但是返回值无法返回</span></span><br><span class="line">    log.info(<span class="string">&quot;delete1 方法执行了-----------------&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello delete1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094808.png" alt="image-20201204221912894"></p>
<p>因为当前登录的用户没有ROLE_sale1这个权限所有返回的为自定义403页面</p>
<p>但是我们可以看到控制台打印了delete1方法中的日志</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094809.png" alt="image-20201204222021306"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094810.png" alt="image-20201204222031255"></p>
</blockquote>
<h4 id="4-6-4-PostFilter"><a href="#4-6-4-PostFilter" class="headerlink" title="4.6.4 @PostFilter"></a>4.6.4 @PostFilter</h4><p>@PostFilter ：权限验证之后对数据进行过滤 留下用户名是 admin 的数据</p>
<p>在TestController中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostFilter(&quot;filterObject.username == &#x27;admin&#x27;&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/getUsers&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">&quot;user&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;111111&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094811.png" alt="image-20201204222458720"></p>
<p>可以看到在返回的值中没有第二条数据，是因为我们的注解<code>@PostFilter(&quot;filterObject.username == &#39;admin&#39;&quot;)</code>，这里是过滤判断是否返回值的username字段的值是否为’admin’，是的话才返回</p>
</blockquote>
<h4 id="4-6-5-PreFilter"><a href="#4-6-5-PreFilter" class="headerlink" title="4.6.5 @PreFilter"></a>4.6.5 @PreFilter</h4><p>@PreFilter: 进入控制器之前对数据进行过滤</p>
<p>在TestController中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreFilter(&quot;filterObject.contains(&#x27;wsy&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/printInfo&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; info)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String s : info) &#123;</span><br><span class="line">        log.info(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先访问localhost:8011/index.html登录</p>
<p>然后按F12键打开开发者工具</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094812.png" alt="image-20201204223229881"></p>
<p>将存入的cookie写入到postman的cookies中</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094813.png" alt="image-20201204223349365"></p>
</blockquote>
<p>这时候我们使用postman测试</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094814.png" alt="image-20201204225511012"></p>
<p>控制台输出：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094815.png" alt="image-20201204225524632"></p>
<p><code>@PreFilter(&quot;filterObject.contains(&#39;wsy&#39;)&quot;)</code>该注解为我们过滤了只要传入的参数里含有”wsy”该子串的数据</p>
</blockquote>
<h3 id="4-7-退出"><a href="#4-7-退出" class="headerlink" title="4.7 退出"></a>4.7 退出</h3><p>修改SecurityConfig配置类</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094816.png" alt="image-20201205122127514"></p>
<p>创建success.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    登陆成功</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>登录成功后可以成功访问localhost:8011/test/index</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094817.png" alt="image-20201205122242200"></p>
<p>这时候我们点击退出后再访问试一试</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094818.png" alt="image-20201205122304640"></p>
<p>此时访问需要重新登陆</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094819.png" alt="image-20201205122318678"></p>
</blockquote>
<h3 id="4-8-自动登录"><a href="#4-8-自动登录" class="headerlink" title="4.8 自动登录"></a>4.8 自动登录</h3><h4 id="4-8-1-原理分析"><a href="#4-8-1-原理分析" class="headerlink" title="4.8.1 原理分析"></a>4.8.1 原理分析</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094820.png" alt="image-20201205123553489"></p>
<h4 id="4-8-2-具体实现"><a href="#4-8-2-具体实现" class="headerlink" title="4.8.2 具体实现"></a>4.8.2 具体实现</h4><p>首先创建数据库表，其实是可以不用创建的，在SpringSecurity中源码有帮我们创建数据库的方法，但是我们这边为了演示的明显一点，所以我们手动创建数据库</p>
<p><code>JdbcTokenRepositoryImpl</code>该类中提供了操作表的语句</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094821.png" alt="image-20201205125557913"></p>
<p>这里我们手动创建表，其实就是复制上图中的CREATE_TABLE_SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> persistent_logins (</span><br><span class="line">	username <span class="type">VARCHAR</span> ( <span class="number">64</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	series <span class="type">VARCHAR</span> ( <span class="number">64</span> ) <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">token <span class="type">VARCHAR</span> ( <span class="number">64</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">last_used <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094822.png" alt="image-20201205125747914"></p>
<p>创建JdbcTokenRepositoryConfig配置类 我们这里需要注入一个<code>JdbcTokenRepositoryImpl</code>到Spring容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wsy.springsecurity.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wsy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-05 13:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 创建JdbcTokenRepositoryImpl对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTokenRepositoryConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建JdbcTokenRepositoryImpl对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JdbcTokenRepositoryImpl</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTokenRepositoryImpl <span class="title">getJdbcTokenRepositoryImpl</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        JdbcTokenRepositoryImpl jdbcTokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">        <span class="comment">//设置数据源</span></span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//设置启动时创建表，因为我们手动创建了就不用写这条语句了</span></span><br><span class="line"><span class="comment">//        jdbcTokenRepository.setCreateTableOnStartup(true);</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改SecurityConfig配置类</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094823.png" alt="image-20201205131330189"></p>
</blockquote>
<p>修改登录页面 添加记住我复选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span>记住我<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094824.png" alt="image-20201205131124181"></p>
<p>登录成功后按F12打开开发者工具可以看到Cookie中存入了一个rememer-me的键值对</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094825.png" alt="image-20201205131207429"></p>
<p>数据库中也成功的存储了信息</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094826.png" alt="image-20201205131705201"></p>
<p>此时我们关闭浏览器后，再次访问需要登录认证的路径时发现可以直接访问</p>
<p>在点击退出时，会删除cookie和数据库中的数据</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094827.png" alt="image-20201205135626972"></p>
</blockquote>
<h3 id="4-9-CSRF"><a href="#4-9-CSRF" class="headerlink" title="4.9 CSRF"></a>4.9 CSRF</h3><h4 id="4-9-1-CSRF理解"><a href="#4-9-1-CSRF理解" class="headerlink" title="4.9.1 CSRF理解"></a>4.9.1 CSRF理解</h4><p>跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已 登录的 Web 应用程序上执行非本意的操作的攻击方法。跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。 跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个 自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买 商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。 这利用了 web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的 浏览器，却不能保证请求本身是用户自愿发出的。 从 Spring Security 4.0 开始，默认情况下会启用 CSRF 保护，以防止 CSRF 攻击应用 程序，Spring Security CSRF 会针对 PATCH，POST，PUT 和 DELETE 方法进行防护。</p>
<h4 id="4-9-2-案例"><a href="#4-9-2-案例" class="headerlink" title="4.9.2 案例"></a>4.9.2 案例</h4><p>在登录页面添加一个隐藏域：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span><span class="attr">th:if</span>=<span class="string">&quot;$&#123;_csrf&#125;!=null&quot;</span><span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span><span class="attr">name</span>=<span class="string">&quot;_csrf&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>关闭安全配置的类中的 csrf</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http.csrf().disable();</span></span><br></pre></td></tr></table></figure>
<h4 id="4-9-3-Spring-Security-实现-CSRF-的原理"><a href="#4-9-3-Spring-Security-实现-CSRF-的原理" class="headerlink" title="4.9.3 Spring Security 实现 CSRF 的原理"></a>4.9.3 Spring Security 实现 CSRF 的原理</h4><ol>
<li>生成 csrfToken 保存到 HttpSession 或者 Cookie 中</li>
</ol>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094828.png" alt="image-20201205141219922"></p>
<p>SaveOnAccessCsrfToken 类有个接口 CsrfTokenRepository</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094829.png" alt="image-20201205141234148"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094830.png" alt="image-20201205141355532"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094831.png" alt="image-20201205141409767"></p>
<ol start="2">
<li>请求到来时，从请求中提取 csrfToken，和保存的 csrfToken 做比较，进而判断当 前请求是否合法。主要通过 CsrfFilter 过滤器来完成。</li>
</ol>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094832.png" alt="image-20201205141524397"></p>
<h2 id="5-SpringSecurity-微服务权限方案"><a href="#5-SpringSecurity-微服务权限方案" class="headerlink" title="5. SpringSecurity 微服务权限方案"></a>5. SpringSecurity 微服务权限方案</h2><h3 id="5-1-微服务认证与授权实现思路"><a href="#5-1-微服务认证与授权实现思路" class="headerlink" title="5.1 微服务认证与授权实现思路"></a>5.1 微服务认证与授权实现思路</h3><ol>
<li>认证授权过程分析 （1）如果是基于 Session，那么 Spring-security 会对 cookie 里的 sessionid 进行解析，找 到服务器存储的 session 信息，然后判断当前用户是否符合请求的要求。 （2）如果是 token，则是解析出 token，然后将当前请求加入到 Spring-security 管理的权限 信息中去</li>
</ol>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094833.png" alt="image-20201205145809724"></p>
</blockquote>
<p>如果系统的模块众多，每个模块都需要进行授权与认证，所以我们选择基于 token 的形式 进行授权与认证，用户根据用户名密码认证成功，然后获取当前用户角色的一系列权限 值，并以用户名为 key，权限列表为 value 的形式存入 redis 缓存中，根据用户名相关信息 生成 token 返回，浏览器将 token 记录到 cookie 中，每次调用 api 接口都默认将 token 携带 到 header 请求头中，Spring-security 解析 header 头获取 token 信息，解析 token 获取当前 用户名，根据用户名就可以从 redis 中获取权限列表，这样 Spring-security 就能够判断当前 请求是否有权限访问</p>
<ol start="2">
<li><p>权限管理数据模型</p>
<blockquote>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094834.png" alt="image-20201205145836211"></p>
</blockquote>
</li>
</ol>
<h3 id="5-2-jwt-介绍"><a href="#5-2-jwt-介绍" class="headerlink" title="5.2 jwt 介绍"></a>5.2 jwt 介绍</h3><h4 id="5-2-1-访问令牌的类型"><a href="#5-2-1-访问令牌的类型" class="headerlink" title="5.2.1 访问令牌的类型"></a>5.2.1 访问令牌的类型</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094835.png" alt="image-20201205145949305"></p>
<h4 id="5-2-2-jwt的组成"><a href="#5-2-2-jwt的组成" class="headerlink" title="5.2.2 jwt的组成"></a>5.2.2 jwt的组成</h4><p>典型的，一个 JWT 看起来如下图：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107094836.png" alt="image-20201205150011360"></p>
<p>该对象为一个很长的字符串，字符之间通过”.”分隔符分为三个子串。 每一个子串表示了一个功能块，总共有以下三个部分：JWT 头、有效载荷和签名</p>
<h5 id="JWT-头"><a href="#JWT-头" class="headerlink" title="JWT 头"></a>JWT 头</h5><p> JWT 头部分是一个描述 JWT 元数据的 JSON 对象，通常如下所示。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，alg 属性表示签名使用的算法，默认为 HMAC SHA256（写为 HS256）； typ 属性表示令牌的类型，JWT 令牌统一写为 JWT。最后，使用 Base64 URL 算法将上述 JSON 对象转换为字符串保存。</p>
<h5 id="有效载荷"><a href="#有效载荷" class="headerlink" title="有效载荷"></a>有效载荷</h5><p>有效载荷部分，是 JWT 的主体内容部分，也是一个 JSON 对象，包含需要传递的数据。 JWT 指定七个默认字段供选择。</p>
<ul>
<li><p>iss：发行人 </p>
</li>
<li><p>xp：到期时间 </p>
</li>
<li><p>sub：主题 </p>
</li>
<li><p>aud：用户 </p>
</li>
<li><p>nbf：在此之前不可用</p>
</li>
<li><p>iat：发布时间 </p>
</li>
<li><p>jti：JWT ID 用于标识该 JWT </p>
<p>除以上默认字段外，我们还可以自定义私有字段，如下例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Helen&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;admin&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>  请注意，默认情况下 JWT 是未加密的，任何人都可以解读其内容，因此不要构建隐私信息 字段，存放保密信息，以防止信息泄露。</p>
<p> JSON 对象也使用 Base64 URL 算法转换为字符串保存。</p>
<h5 id="签名哈希"><a href="#签名哈希" class="headerlink" title="签名哈希"></a>签名哈希</h5><p>   签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。</p>
<p>   首先，需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公 开。然后，使用标头中指定的签名算法（默认情况下为 HMAC SHA256）根据以下公式生成签名。 </p>
<p>  HMACSHA256(base64UrlEncode(header) + “.” + base64UrlEncode(claims), secret) 在计算出签名哈希后，JWT 头，有效载荷和签名哈希的三个部分组合成一个字符串，每个 部分用”.”分隔，就构成整个 JWT 对象。</p>
<h5 id="Base64URL-算法"><a href="#Base64URL-算法" class="headerlink" title="Base64URL 算法"></a>Base64URL 算法</h5><p>  如前所述，JWT 头和有效载荷序列化的算法都用到了 Base64URL。该算法和常见 Base64 算 法类似，稍有差别。</p>
<p>  作为令牌的 JWT 可以放在 URL 中（例如 api.example/?token=xxx）。 Base64 中用的三个 字符是”+”，”/“和”=”，由于在 URL 中有特殊含义，因此 Base64URL 中对他们做了替换： “=”去掉，”+”用”-“替换，”/“用”_”替换，这就是 Base64URL 算法。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Spring Security</category>
      </categories>
      <tags>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch学习笔记</title>
    <url>/2021/01/07/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ElasticSearch安装与介绍"><a href="#ElasticSearch安装与介绍" class="headerlink" title="ElasticSearch安装与介绍"></a>ElasticSearch安装与介绍</h1><h2 id="Elastic-Stack简介"><a href="#Elastic-Stack简介" class="headerlink" title="Elastic Stack简介"></a>Elastic Stack简介</h2><p>如果你没有听说过Elastic Stack，那你一定听说过ELK，实际上ELK是三款软件的简称，分别是Elasticsearch、<br>Logstash、Kibana组成，在发展的过程中，又有新成员Beats的加入，所以就形成了Elastic Stack。所以说，ELK是旧的称呼，Elastic Stack是新的名字。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095121.png" alt="image-20200922092403279"></p>
<p>全系的Elastic Stack技术栈包括：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095122.png" alt="image-20200922092505011"></p>
<h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p>Elasticsearch 基于java，是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p>
<h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><p>Logstash 基于java，是一个开源的用于收集,分析和存储日志的工具。</p>
<h3 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h3><p>Kibana 基于nodejs，也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的Web 界面，可以汇总、分析和搜索重要数据日志。</p>
<h3 id="Beats"><a href="#Beats" class="headerlink" title="Beats"></a>Beats</h3><p>Beats是elastic公司开源的一款采集系统监控数据的代理agent，是在被监控服务器上以客户端形式运行的数据收集器的统称，可以直接把数据发送给Elasticsearch或者通过Logstash发送给Elasticsearch，然后进行后续的数据分析活动。Beats由如下组成:</p>
<ul>
<li>Packetbeat：是一个网络数据包分析器，用于监控、收集网络流量信息，Packetbeat嗅探服务器之间的流量，解析应用层协议，并关联到消息的处理，其支 持ICMP (v4 and v6)、DNS、HTTP、Mysql、PostgreSQL、Redis、MongoDB、Memcache等协议；</li>
<li>Filebeat：用于监控、收集服务器日志文件，其已取代 logstash forwarder；</li>
<li>Metricbeat：可定期获取外部系统的监控指标信息，其可以监控、收集 Apache、HAProxy、MongoDB<br>MySQL、Nginx、PostgreSQL、Redis、System、Zookeeper等服务；</li>
</ul>
<blockquote>
<p>Beats和Logstash其实都可以进行数据的采集，但是目前主流的是使用Beats进行数据采集，然后使用 Logstash进行数据的分割处理等，早期没有Beats的时候，使用的就是Logstash进行数据的采集。</p>
</blockquote>
<h2 id="ElasticSearch快速入门"><a href="#ElasticSearch快速入门" class="headerlink" title="ElasticSearch快速入门"></a>ElasticSearch快速入门</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>官网：<a href="https://www.elastic.co/">https://www.elastic.co/</a></p>
<p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>
<p>我们建立一个网站或应用程序，并要添加搜索功能，但是想要完成搜索工作的创建是非常困难的。我们希望搜索解决方案要运行速度快，我们希望能有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP来索引数据，我们希望我们的搜索服务器始终可用，我们希望能够从一台开始并扩展到数百台，我们要实时搜索，我们要简单的多租户，我们希望建立一个云的解决方案。因此我们利用Elasticsearch来解决所有这些问题及可能出现的更多其它问题。</p>
<p>ElasticSearch是Elastic Stack的核心，同时Elasticsearch 是一个分布式、RESTful风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。作为Elastic Stack的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Elasticsearch的发展是非常快速的，所以在ES5.0之前，ELK的各个版本都不统一，出现了版本号混乱的状态，所以从5.0开始，所有Elastic Stack中的项目全部统一版本号。目前最新版本是6.5.4，我们将基于这一版本进行学习。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095123.png" alt="image-20200922093432839"></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>到官网下载：<a href="https://www.elastic.co/cn/downloads/">https://www.elastic.co/cn/downloads/</a></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095124.png" alt="image-20200922094003384"></p>
<p>选择对应版本的数据，这里我使用的是Linux来进行安装，所以就先下载好ElasticSearch的Linux安装包</p>
<h3 id="拉取Docker容器"><a href="#拉取Docker容器" class="headerlink" title="拉取Docker容器"></a>拉取Docker容器</h3><p>因为我们需要部署在Linux下，为了以后迁移ElasticStack环境方便，我们就使用Docker来进行部署，首先我们拉取一个带有ssh的centos docker镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull moxi/centos_ssh</span><br><span class="line"><span class="comment"># 制作容器</span></span><br><span class="line">docker run --privileged -d -it -h ElasticStack --name ElasticStack -p 11122:22 -p 9200:9200 -p 5601:5601 -p 9300:9300 -v /etc/localtime:/etc/localtime:ro  moxi/centos_ssh /usr/sbin/init</span><br></pre></td></tr></table></figure>
<p>然后直接远程连接11122端口即可</p>
<h3 id="单机版安装"><a href="#单机版安装" class="headerlink" title="单机版安装"></a>单机版安装</h3><p>因为ElasticSearch不支持Root用户直接操作，因此我们需要创建一个elsearch用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加新用户</span></span><br><span class="line">useradd elsearch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个soft目录，存放下载的软件</span></span><br><span class="line">mkdir /soft</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入，然后通过xftp工具，将刚刚下载的文件拖动到该目录下</span></span><br><span class="line"><span class="built_in">cd</span> /soft</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -zxvf elasticsearch-7.9.1-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名</span></span><br><span class="line">mv elasticsearch-7.9.1/ elsearch</span><br></pre></td></tr></table></figure>
<p>因为刚刚我们是使用root用户操作的，所以我们还需要更改一下/soft文件夹的所属，改为elsearch用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown elsearch:elsearch /soft/ -R</span><br></pre></td></tr></table></figure>
<p>然后在切换成elsearch用户进行操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su - elsearch</span><br></pre></td></tr></table></figure>
<p>然后我们就可以对我们的配置文件进行修改了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到 elsearch下的config目录</span></span><br><span class="line"><span class="built_in">cd</span> /soft/elsearch/config</span><br></pre></td></tr></table></figure>
<p>然后找到下面的配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开配置文件</span></span><br><span class="line"><span class="string">vim</span> <span class="string">elasticsearch.yml</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置ip地址，任意网络均可访问</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> </span><br></pre></td></tr></table></figure>
<p>在Elasticsearch中如果，network.host不是localhost或者127.0.0.1的话，就会认为是生产环境，会对环境的要求比较高，我们的测试环境不一定能够满足，一般情况下需要修改2处配置，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改jvm启动参数</span></span><br><span class="line">vim conf/jvm.options</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据自己机器情况修改</span></span><br><span class="line">-Xms128m </span><br><span class="line">-Xmx128m</span><br></pre></td></tr></table></figure>
<p>然后在修改第二处的配置，这个配置要求我们到宿主机器上来进行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 到宿主机上打开文件</span></span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line"><span class="comment"># 增加这样一条配置，一个进程在VMAs(虚拟内存区域)创建内存映射最大数量</span></span><br><span class="line">vm.max_map_count=655360</span><br><span class="line"><span class="comment"># 让配置生效</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<h3 id="启动ElasticSearch"><a href="#启动ElasticSearch" class="headerlink" title="启动ElasticSearch"></a>启动ElasticSearch</h3><p>首先我们需要切换到 elsearch用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - elsearch</span><br></pre></td></tr></table></figure>
<p>然后在到bin目录下，执行下面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入bin目录</span></span><br><span class="line"><span class="built_in">cd</span> /soft/elsearch/bin</span><br><span class="line"><span class="comment"># 后台启动</span></span><br><span class="line">./elasticsearch -d</span><br></pre></td></tr></table></figure>
<p>启动成功后，访问下面的URL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://202.193.56.222:9200/</span><br></pre></td></tr></table></figure>
<p>如果出现了下面的信息，就表示已经成功启动了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095125.png" alt="image-20200922150758205"></p>
<p>如果你在启动的时候，遇到过问题，那么请参考下面的错误分析~</p>
<h2 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h2><h3 id="错误情况1"><a href="#错误情况1" class="headerlink" title="错误情况1"></a>错误情况1</h3><p>如果出现下面的错误信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:111)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:178)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:393)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161)</span><br><span class="line">	at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">	at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:127)</span><br><span class="line">	at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:126)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92)</span><br><span class="line">For complete error details, refer to the log at &#x2F;soft&#x2F;elsearch&#x2F;logs&#x2F;elasticsearch.log</span><br><span class="line">[root@e588039bc613 bin]# 2020-09-22 02:59:39,537121 UTC [536] ERROR CLogger.cc@310 Cannot log to named pipe &#x2F;tmp&#x2F;elasticsearch-5834501324803693929&#x2F;controller_log_381 as it could not be opened for writing</span><br><span class="line">2020-09-22 02:59:39,537263 UTC [536] INFO  Main.cc@103 Parent process died - ML controller exiting</span><br></pre></td></tr></table></figure>
<p>就说明你没有切换成 elsearch用户，因为不能使用root操作es</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su - elsearch</span><br></pre></td></tr></table></figure>
<h3 id="错误情况2"><a href="#错误情况2" class="headerlink" title="错误情况2"></a>错误情况2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[1]:max file descriptors [4096] <span class="keyword">for</span> elasticsearch process is too low, increase to at least[65536]</span><br></pre></td></tr></table></figure>
<p>解决方法：切换到root用户，编辑limits.conf添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># ElasticSearch添加如下内容:</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure>
<h3 id="错误情况3"><a href="#错误情况3" class="headerlink" title="错误情况3"></a>错误情况3</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2]: max number of threads [1024] <span class="keyword">for</span> user [elsearch] is too low, increase to at least</span><br><span class="line">[4096]</span><br></pre></td></tr></table></figure>
<p>也就是最大线程数设置的太低了，需要改成4096</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解决：切换到root用户，进入limits.d目录下修改配置文件。</span></span><br><span class="line">vi /etc/security/limits.d/90-nproc.conf</span><br><span class="line"><span class="comment">#修改如下内容：</span></span><br><span class="line">* soft nproc 1024</span><br><span class="line"><span class="comment">#修改为</span></span><br><span class="line">* soft nproc 4096</span><br></pre></td></tr></table></figure>
<h3 id="错误情况4"><a href="#错误情况4" class="headerlink" title="错误情况4"></a>错误情况4</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[3]: system call filters failed to install; check the logs and fix your configuration</span><br><span class="line">or <span class="built_in">disable</span> system call filters at your own risk</span><br></pre></td></tr></table></figure>
<p>解决：Centos6不支持SecComp，而ES5.2.0默认bootstrap.system_call_filter为true</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim config/elasticsearch.yml</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">bootstrap.system_call_filter: <span class="literal">false</span></span><br><span class="line">bootstrap.memory_lock: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="错误情况5"><a href="#错误情况5" class="headerlink" title="错误情况5"></a>错误情况5</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[elsearch@e588039bc613 bin]$ Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> org.elasticsearch.bootstrap.BootstrapException: java.nio.file.AccessDeniedException: /soft/elsearch/config/elasticsearch.keystore</span><br><span class="line">Likely root cause: java.nio.file.AccessDeniedException: /soft/elsearch/config/elasticsearch.keystore</span><br><span class="line">	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:90)</span><br><span class="line">	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)</span><br><span class="line">	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)</span><br><span class="line">	at java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:219)</span><br><span class="line">	at java.base/java.nio.file.Files.newByteChannel(Files.java:375)</span><br><span class="line">	at java.base/java.nio.file.Files.newByteChannel(Files.java:426)</span><br><span class="line">	at org.apache.lucene.store.SimpleFSDirectory.openInput(SimpleFSDirectory.java:79)</span><br><span class="line">	at org.elasticsearch.common.settings.KeyStoreWrapper.load(KeyStoreWrapper.java:220)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.loadSecureSettings(Bootstrap.java:240)</span><br><span class="line">	at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:349)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161)</span><br><span class="line">	at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)</span><br><span class="line">	at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:127)</span><br><span class="line">	at org.elasticsearch.cli.Command.main(Command.java:90)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:126)</span><br><span class="line">	at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们通过排查，发现是因为 /soft/elsearch/config/elasticsearch.keystore 存在问题</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095126.png" alt="image-20200922111823740"></p>
<p>也就是说该文件还是所属于root用户，而我们使用elsearch用户无法操作，所以需要把它变成elsearch</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown elsearch:elsearch elasticsearch.keystore</span><br></pre></td></tr></table></figure>
<h3 id="错误情况6"><a href="#错误情况6" class="headerlink" title="错误情况6"></a>错误情况6</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[1]: the default discovery settings are unsuitable <span class="keyword">for</span> production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</span><br><span class="line">ERROR: Elasticsearch did not <span class="built_in">exit</span> normally - check the logs at /soft/elsearch/logs/elasticsearch.log</span><br></pre></td></tr></table></figure>
<p>继续修改配置 elasticsearch.yaml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取消注释，并保留一个节点</span></span><br><span class="line">node.name: node-1</span><br><span class="line">cluster.initial_master_nodes: [<span class="string">&quot;node-1&quot;</span>]</span><br></pre></td></tr></table></figure>


<h2 id="ElasticSearchHead可视化工具"><a href="#ElasticSearchHead可视化工具" class="headerlink" title="ElasticSearchHead可视化工具"></a>ElasticSearchHead可视化工具</h2><p>由于ES官方没有给ES提供可视化管理工具，仅仅是提供了后台的服务，elasticsearch-head是一个为ES开发的一个页面客户端工具，其源码托管于Github，地址为 <a href="https://github.com/mobz/elasticsearch-head">传送门</a></p>
<p>head提供了以下安装方式</p>
<ul>
<li>源码安装，通过npm run start启动（不推荐）</li>
<li>通过docker安装（推荐）</li>
<li>通过chrome插件安装（推荐）</li>
<li>通过ES的plugin方式安装（不推荐）</li>
</ul>
<h3 id="通过Docker方式安装"><a href="#通过Docker方式安装" class="headerlink" title="通过Docker方式安装"></a>通过Docker方式安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull mobz/elasticsearch-head:5</span><br><span class="line"><span class="comment">#创建容器</span></span><br><span class="line">docker create --name elasticsearch-head -p 9100:9100 mobz/elasticsearch-head:5</span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">docker start elasticsearch-head</span><br></pre></td></tr></table></figure>
<p>通过浏览器进行访问：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095127.png" alt="image-20200922151529269"></p>
<p>注意：<br>由于前后端分离开发，所以会存在跨域问题，需要在服务端做CORS的配置，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim elasticsearch.yml</span><br><span class="line"></span><br><span class="line">http.cors.enabled: <span class="literal">true</span> http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>
<p>通过chrome插件的方式安装不存在该问题</p>
<h3 id="通过Chrome插件安装"><a href="#通过Chrome插件安装" class="headerlink" title="通过Chrome插件安装"></a>通过Chrome插件安装</h3><p>打开chrome的应用商店，即可安装 <a href="https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm">https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm</a></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095128.png" alt="image-20200922152428838"></p>
<p>我们也可以新建索引</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095129.png" alt="image-20200922152534471"></p>
<p>建议：推荐使用chrome插件的方式安装，如果网络环境不允许，就采用其它方式安装。</p>
<h2 id="ElasticSearch中的基本概念"><a href="#ElasticSearch中的基本概念" class="headerlink" title="ElasticSearch中的基本概念"></a>ElasticSearch中的基本概念</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul>
<li>索引（index）是Elasticsearch对逻辑数据的逻辑存储，所以它可以分为更小的部分。</li>
<li>可以把索引看成关系型数据库的表，索引的结构是为快速有效的全文索引准备的，特别是它不存储原始值。</li>
<li>Elasticsearch可以把索引存放在一台机器或者分散在多台服务器上，每个索引有一或多个分片（shard），每个分片可以有多个副本（replica）。</li>
</ul>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul>
<li>存储在Elasticsearch中的主要实体叫文档（document）。用关系型数据库来类比的话，一个文档相当于数据库表中的一行记录。</li>
<li>Elasticsearch和MongoDB中的文档类似，都可以有不同的结构，但Elasticsearch的文档中，相同字段必须有相同类型。</li>
<li>文档由多个字段组成，每个字段可能多次出现在一个文档里，这样的字段叫多值字段（multivalued）。<br>每个字段的类型，可以是文本、数值、日期等。字段类型也可以是复杂类型，一个字段包含其他子文档或者数<br>组。</li>
</ul>
<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>所有文档写进索引之前都会先进行分析，如何将输入的文本分割为词条、哪些词条又会被过滤，这种行为叫做<br>映射（mapping）。一般由用户自己定义规则。</p>
<h3 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h3><ul>
<li>在Elasticsearch中，一个索引对象可以存储很多不同用途的对象。例如，一个博客应用程序可以保存文章和评<br>论。</li>
<li>每个文档可以有不同的结构。</li>
<li>不同的文档类型不能为相同的属性设置不同的类型。例如，在同一索引中的所有文档类型中，一个叫title的字段必须具有相同的类型。</li>
</ul>
<h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><p>在Elasticsearch中，提供了功能丰富的RESTful API的操作，包括基本的CRUD、创建索引、删除索引等操作。</p>
<h3 id="创建非结构化索引"><a href="#创建非结构化索引" class="headerlink" title="创建非结构化索引"></a>创建非结构化索引</h3><p>在Lucene中，创建索引是需要定义字段名称以及字段的类型的，在Elasticsearch中提供了非结构化的索引，就是不需要创建索引结构，即可写入数据到索引中，实际上在Elasticsearch底层会进行结构化操作，此操作对用户是透明的。</p>
<h3 id="创建空索引"><a href="#创建空索引" class="headerlink" title="创建空索引"></a>创建空索引</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PUT /haoke</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;index&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;number_of_shards&quot;</span>: <span class="string">&quot;2&quot;</span>, <span class="comment">#分片数</span></span><br><span class="line">        <span class="string">&quot;number_of_replicas&quot;</span>: <span class="string">&quot;0&quot;</span> <span class="comment">#副本数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除索引</span></span><br><span class="line">DELETE /haoke</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;acknowledged&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><blockquote>
<p>URL规则：<br>POST /{索引}/{类型}/{id}</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /haoke/user/1001</span><br><span class="line"><span class="comment">#数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>:1001,</span><br><span class="line"><span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>:20,</span><br><span class="line"><span class="string">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用postman操作成功后</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095130.png" alt="image-20200922155642306"></p>
<p>我们通过ElasticSearchHead进行数据预览就能够看到我们刚刚插入的数据了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095131.png" alt="image-20200922155843314"></p>
<p>说明：非结构化的索引，不需要事先创建，直接插入数据默认创建索引。不指定id插入数据：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095132.png" alt="image-20200922155935366"></p>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>在Elasticsearch中，文档数据是不为修改的，但是可以通过覆盖的方式进行更新。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PUT /haoke/user/1001</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>:1001,</span><br><span class="line"><span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>:21,</span><br><span class="line"><span class="string">&quot;sex&quot;</span>:<span class="string">&quot;女&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更新结果如下：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095133.png" alt="image-20200922160154599"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095134.png" alt="image-20200922160201130"></p>
<p>可以看到数据已经被覆盖了。问题来了，可以局部更新吗？ – 可以的。前面不是说，文档数据不能更新吗？ 其实是这样的：在内部，依然会查询到这个文档数据，然后进行覆盖操作，步骤如下：</p>
<ol>
<li>从旧文档中检索JSON</li>
<li>修改它</li>
<li>删除旧文档</li>
<li>索引新文档</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意：这里多了_update标识</span></span><br><span class="line">POST /haoke/user/1001/_update</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;doc&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;age&quot;</span>:23</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095135.png" alt="image-20200922160709463"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095136.png" alt="image-20200922160717001"></p>
<p>可以看到，数据已经是局部更新了</p>
<h3 id="删除索引-1"><a href="#删除索引-1" class="headerlink" title="删除索引"></a>删除索引</h3><p>在Elasticsearch中，删除文档数据，只需要发起DELETE请求即可，不用额外的参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DELETE 1 /haoke/user/1001</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095137.png" alt="image-20200922160752862"></p>
<p>需要注意的是，result表示已经删除，version也增加了。</p>
<p>如果删除一条不存在的数据，会响应404</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095138.png" alt="image-20200922161627716"></p>
<blockquote>
<p>删除一个文档也不会立即从磁盘上移除，它只是被标记成已删除。Elasticsearch将会在你之后添加更多索引的时候才会在后台进行删除内容的清理。【相当于批量操作】</p>
</blockquote>
<h3 id="搜索数据"><a href="#搜索数据" class="headerlink" title="搜索数据"></a>搜索数据</h3><h4 id="根据id搜索数据"><a href="#根据id搜索数据" class="headerlink" title="根据id搜索数据"></a>根据id搜索数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /haoke/user/BbPe_WcB9cFOnF3uebvr</span><br><span class="line"><span class="comment">#返回的数据如下</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;haoke&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;BbPe_WcB9cFOnF3uebvr&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_version&quot;</span>: 8,</span><br><span class="line">    <span class="string">&quot;found&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;_source&quot;</span>: &#123; <span class="comment">#原始数据在这里</span></span><br><span class="line">        <span class="string">&quot;id&quot;</span>: 1002,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: 40,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="搜索全部数据"><a href="#搜索全部数据" class="headerlink" title="搜索全部数据"></a>搜索全部数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET 1 /haoke/user/_search</span><br></pre></td></tr></table></figure>
<p>注意，使用查询全部数据的时候，默认只会返回10条</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095139.png" alt="image-20200922162228822"></p>
<h4 id="关键字搜索数据"><a href="#关键字搜索数据" class="headerlink" title="关键字搜索数据"></a>关键字搜索数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询年龄等于20的用户</span></span><br><span class="line">GET /haoke/user/_search?q=age:20</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095140.png" alt="image-20200922162309797"></p>
<h3 id="DSL搜索"><a href="#DSL搜索" class="headerlink" title="DSL搜索"></a>DSL搜索</h3><p>Elasticsearch提供丰富且灵活的查询语言叫做DSL查询(Query DSL),它允许你构建更加复杂、强大的查询。<br>DSL(Domain Specific Language特定领域语言)以JSON请求体的形式出现。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /haoke/user/_search</span><br><span class="line"><span class="comment">#请求体</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span> : &#123; <span class="comment">#match只是查询的一种</span></span><br><span class="line">        	<span class="string">&quot;age&quot;</span> : 20</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现：查询年龄大于30岁的男性用户。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095141.png" alt="image-20200922162943539"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /haoke/user/_search</span><br><span class="line"><span class="comment">#请求数据</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;filter&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;age&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;gt&quot;</span>: 30</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;must&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">                	<span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询出来的结果</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095142.png" alt="image-20200922163109515"></p>
<h4 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /haoke/user/_search</span><br><span class="line"><span class="comment">#请求数据</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">        	<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三 李四&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095143.png" alt="image-20200922163315285"></p>
<p>高亮显示，只需要在添加一个 highlight即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /haoke/user/_search</span><br><span class="line"><span class="comment">#请求数据</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">        	<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三 李四&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">        	<span class="string">&quot;name&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095144.png" alt="image-20200922163432853"></p>
<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>在Elasticsearch中，支持聚合操作，类似SQL中的group by操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /haoke/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;all_interests&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;field&quot;</span>: <span class="string">&quot;age&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下，我们通过年龄进行聚合</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095145.png" alt="image-20200922163614708"></p>
<p>从结果可以看出，年龄30的有2条数据，20的有一条，40的一条。</p>
<h2 id="ElasticSearch核心详解"><a href="#ElasticSearch核心详解" class="headerlink" title="ElasticSearch核心详解"></a>ElasticSearch核心详解</h2><h3 id="文档-1"><a href="#文档-1" class="headerlink" title="文档"></a>文档</h3><p>在Elasticsearch中，文档以JSON格式进行存储，可以是复杂的结构，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;haoke&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;1005&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_version&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;_score&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: 1005,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;孙七&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: 37,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span>: <span class="string">&quot;女&quot;</span>,</span><br><span class="line">        <span class="string">&quot;card&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;card_number&quot;</span>: <span class="string">&quot;123456789&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，card是一个复杂对象，嵌套的Card对象</p>
<h4 id="元数据（metadata）"><a href="#元数据（metadata）" class="headerlink" title="元数据（metadata）"></a>元数据（metadata）</h4><p>一个文档不只有数据。它还包含了元数据(metadata)——关于文档的信息。三个必须的元数据节点是：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095146.png" alt="image-20200922165956176"></p>
<h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>索引(index)类似于关系型数据库里的“数据库”——它是我们存储和索引关联数据的地方。</p>
<blockquote>
<p>提示：事实上，我们的数据被存储和索引在分片(shards)中，索引只是一个把一个或多个分片分组在一起的逻辑空间。然而，这只是一些内部细节——我们的程序完全不用关心分片。对于我们的程序而言，文档存储在索引(index)中。剩下的细节由Elasticsearch关心既可。</p>
</blockquote>
<h4 id="type"><a href="#type" class="headerlink" title="_type"></a>_type</h4><p>在应用中，我们使用对象表示一些“事物”，例如一个用户、一篇博客、一个评论，或者一封邮件。每个对象都属于一个类(class)，这个类定义了属性或与对象关联的数据。user 类的对象可能包含姓名、性别、年龄和Email地址。<br>在关系型数据库中，我们经常将相同类的对象存储在一个表里，因为它们有着相同的结构。同理，在Elasticsearch<br>中，我们使用相同类型(type)的文档表示相同的“事物”，因为他们的数据结构也是相同的。</p>
<p>每个类型(type)都有自己的映射(mapping)或者结构定义，就像传统数据库表中的列一样。所有类型下的文档被存储在同一个索引下，但是类型的映射(mapping)会告诉Elasticsearch不同的文档如何被索引。</p>
<p>_type 的名字可以是大写或小写，不能包含下划线或逗号。我们将使用blog 做为类型名。</p>
<h4 id="id"><a href="#id" class="headerlink" title="_id"></a>_id</h4><p>id仅仅是一个字符串，它与_index 和_type 组合时，就可以在Elasticsearch中唯一标识一个文档。当创建一个文<br>档，你可以自定义_id ，也可以让Elasticsearch帮你自动生成（32位长度）</p>
<h3 id="查询响应"><a href="#查询响应" class="headerlink" title="查询响应"></a>查询响应</h3><h4 id="pretty"><a href="#pretty" class="headerlink" title="pretty"></a>pretty</h4><p>可以在查询url后面添加pretty参数，使得返回的json更易查看。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095147.png" alt="image-20200923101056932"></p>
<h4 id="指定响应字段"><a href="#指定响应字段" class="headerlink" title="指定响应字段"></a>指定响应字段</h4><p>在响应的数据中，如果我们不需要全部的字段，可以指定某些需要的字段进行返回。通过添加 _source</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /haoke/user/1005?_source=id,name</span><br><span class="line"><span class="comment">#响应</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;haoke&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;1005&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_version&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;found&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;孙七&quot;</span>,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: 1005</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如不需要返回元数据，仅仅返回原始数据，可以这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /haoke/1 user/1005/_source</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095148.png" alt="image-20200923101239226"></p>
<p>还可以这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /haoke/user/1005/_source?_1 <span class="built_in">source</span>=id,name</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095149.png" alt="image-20200923101319728"></p>
<h4 id="判断文档是否存在"><a href="#判断文档是否存在" class="headerlink" title="判断文档是否存在"></a>判断文档是否存在</h4><p>如果我们只需要判断文档是否存在，而不是查询文档内容，那么可以这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HEAD /haoke/user/1005</span><br></pre></td></tr></table></figure>
<p>通过发送一个head请求，来判断数据是否存在</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095150.png" alt="image-20200923101354992"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HEAD 1 /haoke/user/1006</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095151.png" alt="image-20200923101433608"></p>
<blockquote>
<p>当然，这只表示你在查询的那一刻文档不存在，但并不表示几毫秒后依旧不存在。另一个进程在这期间可能创建新文档。</p>
</blockquote>
<h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><p>有些情况下可以通过批量操作以减少网络请求。如：批量查询、批量插入数据。</p>
<h4 id="批量查询"><a href="#批量查询" class="headerlink" title="批量查询"></a>批量查询</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /haoke/user/_mget</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;ids&quot;</span> : [ <span class="string">&quot;1001&quot;</span>, <span class="string">&quot;1003&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095152.png" alt="image-20200923101540616"></p>
<p>如果，某一条数据不存在，不影响整体响应，需要通过found的值进行判断是否查询到数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /haoke/user/_mget</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;ids&quot;</span> : [ <span class="string">&quot;1001&quot;</span>, <span class="string">&quot;1006&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095153.png" alt="image-20200923101721344"></p>
<blockquote>
<p>也就是说，一个数据的存在不会影响其它数据的返回</p>
</blockquote>
<h4 id="bulk操作"><a href="#bulk操作" class="headerlink" title="_bulk操作"></a>_bulk操作</h4><p>在Elasticsearch中，支持批量的插入、修改、删除操作，都是通过_bulk的api完成的。</p>
<p>请求格式如下：（请求格式不同寻常）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; action: &#123; metadata &#125;&#125;</span><br><span class="line">&#123; request body &#125;</span><br><span class="line">&#123; action: &#123; metadata &#125;&#125;</span><br><span class="line">&#123; request body &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>批量插入数据： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;create&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="string">&quot;_id&quot;</span>:2001&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:2001,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;age&quot;</span>: 20,<span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;create&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="string">&quot;_id&quot;</span>:2002&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:2002,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;age&quot;</span>: 20,<span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;create&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="string">&quot;_id&quot;</span>:2003&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:2003,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;age&quot;</span>: 20,<span class="string">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>注意最后一行的回车。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095154.png" alt="image-20200923101946147"></p>
<p>批量删除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;delete&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="string">&quot;_id&quot;</span>:2001&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;delete&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="string">&quot;_id&quot;</span>:2002&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;delete&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="string">&quot;_id&quot;</span>:2003&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>由于delete没有请求体，所以，action的下一行直接就是下一个action。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095155.png" alt="image-20200923102044231"></p>
<p>其他操作就类似了。一次请求多少性能最高？</p>
<ul>
<li>整个批量请求需要被加载到接受我们请求节点的内存里，所以请求越大，给其它请求可用的内存就越小。有一<br>个最佳的bulk请求大小。超过这个大小，性能不再提升而且可能降低。</li>
<li>最佳大小，当然并不是一个固定的数字。它完全取决于你的硬件、你文档的大小和复杂度以及索引和搜索的负<br>载。</li>
<li>幸运的是，这个最佳点(sweetspot)还是容易找到的：试着批量索引标准的文档，随着大小的增长，当性能开始<br>降低，说明你每个批次的大小太大了。开始的数量可以在1000~5000个文档之间，如果你的文档非常大，可以使用较小的批次。</li>
<li>通常着眼于你请求批次的物理大小是非常有用的。一千个1kB的文档和一千个1MB的文档大不相同。一个好的<br>批次最好保持在5-15MB大小间。</li>
</ul>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>和SQL使用LIMIT 关键字返回只有一页的结果一样，Elasticsearch接受from 和size 参数：</p>
<ul>
<li>size: 结果数，默认10</li>
<li>from: 跳过开始的结果数，默认0</li>
</ul>
<p>如果你想每页显示5个结果，页码从1到3，那请求如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /_search?size=5</span><br><span class="line">GET /_search?size=5&amp;from=5</span><br><span class="line">GET /_search?size=5&amp;from=10</span><br></pre></td></tr></table></figure>
<p>应该当心分页太深或者一次请求太多的结果。结果在返回前会被排序。但是记住一个搜索请求常常涉及多个分<br>片。每个分片生成自己排好序的结果，它们接着需要集中起来排序以确保整体排序正确。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /haoke/user/_1 search?size=1&amp;from=2</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095156.png" alt="image-20200923102611567"></p>
<h4 id="在集群系统中深度分页"><a href="#在集群系统中深度分页" class="headerlink" title="在集群系统中深度分页"></a>在集群系统中深度分页</h4><p>为了理解为什么深度分页是有问题的，让我们假设在一个有5个主分片的索引中搜索。当我们请求结果的第一<br>页（结果1到10）时，每个分片产生自己最顶端10个结果然后返回它们给请求节点(requesting node)，它再<br>排序这所有的50个结果以选出顶端的10个结果。</p>
<p>现在假设我们请求第1000页——结果10001到10010。工作方式都相同，不同的是每个分片都必须产生顶端的<br>10010个结果。然后请求节点排序这50050个结果并丢弃50040个！</p>
<p>你可以看到在分布式系统中，排序结果的花费随着分页的深入而成倍增长。这也是为什么网络搜索引擎中任何<br>语句不能返回多于1000个结果的原因。</p>
<h3 id="映射-1"><a href="#映射-1" class="headerlink" title="映射"></a>映射</h3><p>前面我们创建的索引以及插入数据，都是由Elasticsearch进行自动判断类型，有些时候我们是需要进行明确字段类型的，否则，自动判断的类型和实际需求是不相符的。</p>
<p>自动判断的规则如下：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095157.png" alt="image-20200923103848097"></p>
<p>Elasticsearch中支持的类型如下：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095158.png" alt="image-20200923103917807"></p>
<ul>
<li>string类型在ElasticSearch 旧版本中使用较多，从ElasticSearch 5.x开始不再支持string，由text和<br>keyword类型替代。</li>
<li>text 类型，当一个字段是要被全文搜索的，比如Email内容、产品描述，应该使用text类型。设置text类型<br>以后，字段内容会被分析，在生成倒排索引以前，字符串会被分析器分成一个一个词项。text类型的字段<br>不用于排序，很少用于聚合。</li>
<li>keyword类型适用于索引结构化的字段，比如email地址、主机名、状态码和标签。如果字段需要进行过<br>滤(比如查找已发布博客中status属性为published的文章)、排序、聚合。keyword类型的字段只能通过精<br>确值搜索到。</li>
</ul>
<h4 id="创建明确类型的索引："><a href="#创建明确类型的索引：" class="headerlink" title="创建明确类型的索引："></a>创建明确类型的索引：</h4><blockquote>
<p> 如果你要像之前旧版版本一样兼容自定义 type ,需要将 *<em>i*</em>nclude_type_name=true 携带</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">put http://202.193.56.222:9200/itcast?include_type_name=<span class="literal">true</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;index&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;number_of_shards&quot;</span>:<span class="string">&quot;2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;number_of_replicas&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;mappings&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;person&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;properties&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;age&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;integer&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;mail&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看映射</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /itcast/_mapping</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095159.png" alt="image-20200923104201613"></p>
<p>插入数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/_bulk</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;person&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>: 20,<span class="string">&quot;mail&quot;</span>: <span class="string">&quot;111@qq.com&quot;</span>,<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;羽毛球、乒乓球、足球&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;person&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;age&quot;</span>: 21,<span class="string">&quot;mail&quot;</span>: <span class="string">&quot;222@qq.com&quot;</span>,<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;羽毛球、乒乓球、足球、篮球&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;person&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;age&quot;</span>: 22,<span class="string">&quot;mail&quot;</span>: <span class="string">&quot;333@qq.com&quot;</span>,<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;羽毛球、篮球、游泳、听音乐&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;person&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;age&quot;</span>: 23,<span class="string">&quot;mail&quot;</span>: <span class="string">&quot;444@qq.com&quot;</span>,<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;跑步、游泳&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;person&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;孙七&quot;</span>,<span class="string">&quot;age&quot;</span>: 24,<span class="string">&quot;mail&quot;</span>: <span class="string">&quot;555@qq.com&quot;</span>,<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;听音乐、看电影&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095200.png" alt="image-20200923104551405"></p>
<h4 id="测试搜索"><a href="#测试搜索" class="headerlink" title="测试搜索"></a>测试搜索</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;音乐&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095201.png" alt="image-20200923104653427"></p>
<h3 id="结构化查询"><a href="#结构化查询" class="headerlink" title="结构化查询"></a>结构化查询</h3><h4 id="term查询"><a href="#term查询" class="headerlink" title="term查询"></a>term查询</h4><p>term 主要用于精确匹配哪些值，比如数字，日期，布尔值或 not_analyzed 的字符串(未经分析的文本数据类型)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&quot;term&quot;</span>: &#123; <span class="string">&quot;age&quot;</span>: 26 &#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;term&quot;</span>: &#123; <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2014-09-01&quot;</span> &#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;term&quot;</span>: &#123; <span class="string">&quot;public&quot;</span>: <span class="literal">true</span> &#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;term&quot;</span>: &#123; <span class="string">&quot;tag&quot;</span>: <span class="string">&quot;full_text&quot;</span> &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;term&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;age&quot;</span>:20</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095202.png" alt="image-20200923104851159"></p>
<h4 id="terms查询"><a href="#terms查询" class="headerlink" title="terms查询"></a>terms查询</h4><p>terms 跟 term 有点类似，但 terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一起去<br>做匹配：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;terms&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;tag&quot;</span>:[</span><br><span class="line">            <span class="string">&quot;search&quot;</span>,</span><br><span class="line">            <span class="string">&quot;full_text&quot;</span>,</span><br><span class="line">            <span class="string">&quot;nosql&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;terms&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;age&quot;</span>:[</span><br><span class="line">                20,</span><br><span class="line">                21</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095203.png" alt="image-20200923105030182"></p>
<h4 id="range查询"><a href="#range查询" class="headerlink" title="range查询"></a>range查询</h4><p>range 过滤允许我们按照指定范围查找一批数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;range&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;age&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;gte&quot;</span>:20,</span><br><span class="line">            <span class="string">&quot;lt&quot;</span>:30</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>范围操作符包含：</p>
<ul>
<li>gt : 大于</li>
<li>gte:: 大于等于</li>
<li>lt : 小于</li>
<li>lte: 小于等于</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;range&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;age&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;gte&quot;</span>:20,</span><br><span class="line">                <span class="string">&quot;lte&quot;</span>:22</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="exists-查询"><a href="#exists-查询" class="headerlink" title="exists 查询"></a>exists 查询</h4><p>exists 查询可以用于查找文档中是否包含指定字段或没有某个字段，类似于SQL语句中的IS_NULL 条件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;exists&quot;</span>: &#123;</span><br><span class="line">    	<span class="string">&quot;field&quot;</span>: <span class="string">&quot;title&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两个查询只是针对已经查出一批数据来，但是想区分出某个字段是否存在的时候使用。示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /haoke/user/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;exists&quot;</span>: &#123; <span class="comment">#必须包含</span></span><br><span class="line">        	<span class="string">&quot;field&quot;</span>: <span class="string">&quot;card&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095204.png" alt="image-20200923105416339"></p>
<h4 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h4><p>match 查询是一个标准查询，不管你需要全文本查询还是精确查询基本上都要用到它。</p>
<p>如果你使用 match 查询一个全文本字段，它会在真正查询之前用分析器先分析match 一下查询字符：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">    	<span class="string">&quot;tweet&quot;</span>: <span class="string">&quot;About Search&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果用match 下指定了一个确切值，在遇到数字，日期，布尔值或者not_analyzed 的字符串时，它将为你搜索你<br>给定的值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&quot;match&quot;</span>: &#123; <span class="string">&quot;age&quot;</span>: 26 &#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;match&quot;</span>: &#123; <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2014-09-01&quot;</span> &#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;match&quot;</span>: &#123; <span class="string">&quot;public&quot;</span>: <span class="literal">true</span> &#125;&#125;</span><br><span class="line">&#123; <span class="string">&quot;match&quot;</span>: &#123; <span class="string">&quot;tag&quot;</span>: <span class="string">&quot;full_text&quot;</span> &#125;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="bool查询"><a href="#bool查询" class="headerlink" title="bool查询"></a>bool查询</h4><ul>
<li>bool 查询可以用来合并多个条件查询结果的布尔逻辑，它包含一下操作符：</li>
<li>must :: 多个查询条件的完全匹配,相当于 and 。</li>
<li>must_not :: 多个查询条件的相反匹配，相当于 not 。</li>
<li>should :: 至少有一个查询条件匹配, 相当于 or 。</li>
</ul>
<p>这些参数可以分别继承一个查询条件或者一个查询条件的数组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;must&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;term&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;folder&quot;</span>:<span class="string">&quot;inbox&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;must_not&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;term&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;tag&quot;</span>:<span class="string">&quot;spam&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;should&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;term&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;starred&quot;</span>:<span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;term&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;unread&quot;</span>:<span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="过滤查询"><a href="#过滤查询" class="headerlink" title="过滤查询"></a>过滤查询</h3><p>前面讲过结构化查询，Elasticsearch也支持过滤查询，如term、range、match等。</p>
<p>示例：查询年龄为20岁的用户。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;filter&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;term&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;age&quot;</span>:20</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="查询和过滤的对比"><a href="#查询和过滤的对比" class="headerlink" title="查询和过滤的对比"></a>查询和过滤的对比</h4><ul>
<li>一条过滤语句会询问每个文档的字段值是否包含着特定值。</li>
<li>查询语句会询问每个文档的字段值与特定值的匹配程度如何。</li>
<li>一条查询语句会计算每个文档与查询语句的相关性，会给出一个相关性评分 _score，并且 按照相关性对匹<br>配到的文档进行排序。 这种评分方式非常适用于一个没有完全配置结果的全文本搜索。</li>
<li>一个简单的文档列表，快速匹配运算并存入内存是十分方便的， 每个文档仅需要1个字节。这些缓存的过滤结果集与后续请求的结合使用是非常高效的。</li>
<li>查询语句不仅要查找相匹配的文档，还需要计算每个文档的相关性，所以一般来说查询语句要比 过滤语句更耗时，并且查询结果也不可缓存。</li>
</ul>
<h4 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h4><p>做精确匹配搜索时，最好用过滤语句，因为过滤语句可以缓存数据。</p>
<h2 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h2><h3 id="什么是分词"><a href="#什么是分词" class="headerlink" title="什么是分词"></a>什么是分词</h3><p>分词就是指将一个文本转化成一系列单词的过程，也叫文本分析，在Elasticsearch中称之为Analysis。</p>
<p>举例：我是中国人 –&gt; 我/是/中国人</p>
<h3 id="分词api"><a href="#分词api" class="headerlink" title="分词api"></a>分词api</h3><p>指定分词器进行分词</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>:<span class="string">&quot;standard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>:<span class="string">&quot;hello world&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095205.png" alt="image-20200923110814505"></p>
<p>在结果中不仅可以看出分词的结果，还返回了该词在文本中的位置。</p>
<blockquote>
<p>指定索引分词</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;field&quot;</span>: <span class="string">&quot;hobby&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;听音乐&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095206.png" alt="image-20200923110905001"></p>
<h3 id="中文分词难点"><a href="#中文分词难点" class="headerlink" title="中文分词难点"></a>中文分词难点</h3><p>中文分词的难点在于，在汉语中没有明显的词汇分界点，如在英语中，空格可以作为分隔符，如果分隔不正确就会造成歧义。如：</p>
<ul>
<li>我/爱/炒肉丝</li>
<li>我/爱/炒/肉丝</li>
</ul>
<p>常用中文分词器，IK、jieba、THULAC等，推荐使用IK分词器。</p>
<p>IK Analyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。从2006年12月推出1.0版开始，IKAnalyzer已经推出了3个大版本。最初，它是以开源项目Luence为应用主体的，结合词典分词和文法分析算法的中文分词组件。新版本的IK Analyzer 3.0则发展为面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。</p>
<p>采用了特有的“正向迭代最细粒度切分算法“，具有80万字/秒的高速处理能力 采用了多子处理器分析模式，支持：英文字母（IP地址、Email、URL）、数字（日期，常用中文数量词，罗马数字，科学计数法），中文词汇（姓名、地名处理）等分词处理。 优化的词典存储，更小的内存占用。</p>
<p>IK分词器 Elasticsearch插件地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p>
<h3 id="安装分词器"><a href="#安装分词器" class="headerlink" title="安装分词器"></a>安装分词器</h3><p>首先下载到最新的ik分词器：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.9.1">下载地址</a></p>
<p>下载完成后，使用xftp工具，拷贝到服务器上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装方法：将下载到的 es/plugins/ik 目录下</span></span><br><span class="line">mkdir es/plugins/ik</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">unzip elasticsearch-analysis-ik-7.9.1.zip</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure>
<p>我们通过日志，发现它已经成功加载了ik分词器插件</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095207.png" alt="image-20200923113200826"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;我是中国人&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们发现ik分词器已经成功分词完成</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095208.png" alt="image-20200923113222937"></p>
<h2 id="全文搜索-1"><a href="#全文搜索-1" class="headerlink" title="全文搜索"></a>全文搜索</h2><p>全文搜索两个最重要的方面是：</p>
<ul>
<li>相关性（Relevance） 它是评价查询与其结果间的相关程度，并根据这种相关程度对结果排名的一种能力，这<br>种计算方式可以是 TF/IDF 方法、地理位置邻近、模糊相似，或其他的某些算法。</li>
<li>分词（Analysis） 它是将文本块转换为有区别的、规范化的 token 的一个过程，目的是为了创建倒排索引以及查询倒排索引。</li>
</ul>
<h3 id="构造数据"><a href="#构造数据" class="headerlink" title="构造数据"></a>构造数据</h3><blockquote>
<p>ES 7.4 默认不在支持指定索引类型，默认索引类型是_doc</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://202.193.56.222:9200/itcast?include_type_name=<span class="literal">true</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;index&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;number_of_shards&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;number_of_replicas&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;mappings&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;person&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;properties&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;age&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;integer&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;mail&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;analyzer&quot;</span>:<span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后插入数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST http://202.193.56.222:9200/itcast/_bulk</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;person&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>: 20,<span class="string">&quot;mail&quot;</span>: <span class="string">&quot;111@qq.com&quot;</span>,<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;羽毛球、乒乓球、足球&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;person&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;age&quot;</span>: 21,<span class="string">&quot;mail&quot;</span>: <span class="string">&quot;222@qq.com&quot;</span>,<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;羽毛球、乒乓球、足球、篮球&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;person&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;age&quot;</span>: 22,<span class="string">&quot;mail&quot;</span>: <span class="string">&quot;333@qq.com&quot;</span>,<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;羽毛球、篮球、游泳、听音乐&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;person&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;age&quot;</span>: 23,<span class="string">&quot;mail&quot;</span>: <span class="string">&quot;444@qq.com&quot;</span>,<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;跑步、游泳、篮球&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;itcast&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;person&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;孙七&quot;</span>,<span class="string">&quot;age&quot;</span>: 24,<span class="string">&quot;mail&quot;</span>: <span class="string">&quot;555@qq.com&quot;</span>,<span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;听音乐、看电影、羽毛球&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095209.png" alt="image-20200923141912153"></p>
<h3 id="单词搜索"><a href="#单词搜索" class="headerlink" title="单词搜索"></a>单词搜索</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;音乐&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;highlight&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查询出来的结果如下，并且还带有高亮</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095210.png" alt="image-20200923142131426"></p>
<p>过程说明：</p>
<ul>
<li>检查字段类型<ul>
<li>爱好 hobby 字段是一个 text 类型（ 指定了IK分词器），这意味着查询字符串本身也应该被分词。</li>
</ul>
</li>
<li>分析查询字符串 。<ul>
<li>将查询的字符串 “音乐” 传入IK分词器中，输出的结果是单个项 音乐。因为只有一个单词项，所以 match 查询执行的是单个底层 term 查询。</li>
</ul>
</li>
<li>查找匹配文档 。<ul>
<li>用 term 查询在倒排索引中查找 “音乐” 然后获取一组包含该项的文档，本例的结果是文档：3 、5 。</li>
</ul>
</li>
<li>为每个文档评分 。<ul>
<li>用 term 查询计算每个文档相关度评分 _score ，这是种将 词频（term frequency，即词 “音乐” 在相关文档的hobby 字段中出现的频率）和 反向文档频率（inverse document frequency，即词 “音乐” 在所有文档的hobby 字段中出现的频率），以及字段的长度（即字段越短相关度越高）相结合的计算方式。</li>
</ul>
</li>
</ul>
<h3 id="多词搜索"><a href="#多词搜索" class="headerlink" title="多词搜索"></a>多词搜索</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;音乐 篮球&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;highlight&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，包含了“音乐”、“篮球”的数据都已经被搜索到了。可是，搜索的结果并不符合我们的预期，因为我们想搜索的是既包含“音乐”又包含“篮球”的用户，显然结果返回的“或”的关系。在Elasticsearch中，可以指定词之间的逻辑关系，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;query&quot;</span>: <span class="string">&quot;音乐 羽毛球&quot;</span>,</span><br><span class="line">                <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;and&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过这样的话，就会让两个关键字之间存在and关系了</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095211.png" alt="image-20200923142538105"></p>
<p>可以看到结果符合预期。</p>
<p>前面我们测试了“OR” 和 “AND”搜索，这是两个极端，其实在实际场景中，并不会选取这2个极端，更有可能是选取这种，或者说，只需要符合一定的相似度就可以查询到数据，在Elasticsearch中也支持这样的查询，通过<br>minimum_should_match来指定匹配度，如：70%；</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;query&quot;</span>:<span class="string">&quot;游泳 羽毛球&quot;</span>,</span><br><span class="line">            <span class="string">&quot;minimum_should_match&quot;</span>:<span class="string">&quot;80%&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;hobby&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#结果：省略显示</span></span><br><span class="line"><span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;total&quot;</span>: 4, <span class="comment">#相似度为80%的情况下，查询到4条数据</span></span><br><span class="line"><span class="string">&quot;max_score&quot;</span>: 1.621458,</span><br><span class="line"><span class="string">&quot;hits&quot;</span>: [</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#设置40%进行测试：</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;query&quot;</span>:<span class="string">&quot;游泳 羽毛球&quot;</span>,</span><br><span class="line">            <span class="string">&quot;minimum_should_match&quot;</span>:<span class="string">&quot;40%&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line"><span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;total&quot;</span>: 5, <span class="comment">#相似度为40%的情况下，查询到5条数据</span></span><br><span class="line"><span class="string">&quot;max_score&quot;</span>: 1.621458,</span><br><span class="line"><span class="string">&quot;hits&quot;</span>: [</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相似度应该多少合适，需要在实际的需求中进行反复测试，才可得到合理的值。</p>
<h3 id="组合搜索"><a href="#组合搜索" class="headerlink" title="组合搜索"></a>组合搜索</h3><p>在搜索时，也可以使用过滤器中讲过的bool组合查询，示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;must&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;篮球&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;must_not&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;音乐&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;should&quot;</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;游泳&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;highlight&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面搜索的意思是：<br>搜索结果中必须包含篮球，不能包含音乐，如果包含了游泳，那么它的相似度更高。</p>
</blockquote>
<p>结果：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095212.png" alt="image-20200923145310698"></p>
<blockquote>
<p>评分的计算规则</p>
<p>bool 查询会为每个文档计算相关度评分 _score ， 再将所有匹配的 must 和 should 语句的分数 _score 求和，最后除以 must 和 should 语句的总数。</p>
<p>must_not 语句不会影响评分； 它的作用只是将不相关的文档排除。</p>
</blockquote>
<p>默认情况下，should中的内容不是必须匹配的，如果查询语句中没有must，那么就会至少匹配其中一个。当然了，也可以通过minimum_should_match参数进行控制，该值可以是数字也可以的百分比。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;should&quot;</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;游泳&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;篮球&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;hobby&quot;</span>:<span class="string">&quot;音乐&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;minimum_should_match&quot;</span>:2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;highlight&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>minimum_should_match为2，意思是should中的三个词，至少要满足2个。</p>
<h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><p>有些时候，我们可能需要对某些词增加权重来影响该条数据的得分。如下：</p>
<p>搜索关键字为“游泳篮球”，如果结果中包含了“音乐”权重为10，包含了“跑步”权重为2。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /itcast/person/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;must&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;query&quot;</span>:<span class="string">&quot;游泳篮球&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;operator&quot;</span>:<span class="string">&quot;and&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;should&quot;</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line">                            <span class="string">&quot;query&quot;</span>:<span class="string">&quot;音乐&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;boost&quot;</span>:10</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;match&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line">                            <span class="string">&quot;query&quot;</span>:<span class="string">&quot;跑步&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;boost&quot;</span>:2</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;highlight&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="ElasticSearch集群"><a href="#ElasticSearch集群" class="headerlink" title="ElasticSearch集群"></a>ElasticSearch集群</h2><h3 id="集群节点"><a href="#集群节点" class="headerlink" title="集群节点"></a>集群节点</h3><p>ELasticsearch的集群是由多个节点组成的，通过cluster.name设置集群名称，并且用于区分其它的集群，每个节点通过node.name指定节点的名称。</p>
<p>在Elasticsearch中，节点的类型主要有4种：</p>
<ul>
<li>master节点<ul>
<li>配置文件中node.master属性为true(默认为true)，就有资格被选为master节点。master节点用于控制整个集群的操作。比如创建或删除索引，管理其它非master节点等。</li>
</ul>
</li>
<li>data节点<ul>
<li>配置文件中node.data属性为true(默认为true)，就有资格被设置成data节点。data节点主要用于执行数据相关的操作。比如文档的CRUD。</li>
</ul>
</li>
<li>客户端节点<ul>
<li>配置文件中node.master属性和node.data属性均为false。</li>
<li>该节点不能作为master节点，也不能作为data节点。</li>
<li>可以作为客户端节点，用于响应用户的请求，把请求转发到其他节点</li>
</ul>
</li>
<li>部落节点<ul>
<li>当一个节点配置tribe.*的时候，它是一个特殊的客户端，它可以连接多个集群，在所有连接的集群上执行<br>搜索和其他操作。</li>
</ul>
</li>
</ul>
<h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动3个虚拟机，分别在3台虚拟机上部署安装Elasticsearch</span></span><br><span class="line">mkdir /itcast/es-cluster</span><br><span class="line"></span><br><span class="line"><span class="comment">#分发到其它机器</span></span><br><span class="line">scp -r es-cluster elsearch@192.168.40.134:/itcast</span><br><span class="line"></span><br><span class="line"><span class="comment">#node01的配置：</span></span><br><span class="line">cluster.name: es-itcast-cluster</span><br><span class="line">node.name: node01</span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">&quot;192.168.40.133&quot;</span>,<span class="string">&quot;192.168.40.134&quot;</span>,<span class="string">&quot;192.168.40.135&quot;</span>]</span><br><span class="line"><span class="comment"># 最小节点数</span></span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line"><span class="comment"># 跨域专用</span></span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#node02的配置：</span></span><br><span class="line">cluster.name: es-itcast-cluster</span><br><span class="line">node.name: node02</span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">&quot;192.168.40.133&quot;</span>,<span class="string">&quot;192.168.40.134&quot;</span>,<span class="string">&quot;192.168.40.135&quot;</span>]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#node03的配置：</span></span><br><span class="line">cluster.name: es-itcast-cluster</span><br><span class="line">node.name: node02</span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">&quot;192.168.40.133&quot;</span>,<span class="string">&quot;192.168.40.134&quot;</span>,<span class="string">&quot;192.168.40.135&quot;</span>]</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分别启动3个节点</span></span><br><span class="line">./elasticsearch</span><br></pre></td></tr></table></figure>
<p>查看集群</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095213.png" alt="image-20200923151823672"></p>
<p>创建索引：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095214.png" alt="image-20200923151851785"></p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095215.png" alt="image-20200923151935283"></p>
<p>查询集群状态：/_cluster/health<br>响应：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095216.png" alt="image-20200923151953227"></p>
<p>集群中有三种颜色</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095217.png" alt="image-20200923152005930"></p>
<h3 id="分片和副本"><a href="#分片和副本" class="headerlink" title="分片和副本"></a>分片和副本</h3><p>为了将数据添加到Elasticsearch，我们需要索引(index)——一个存储关联数据的地方。实际上，索引只是一个用来指向一个或多个分片(shards)的“逻辑命名空间(logical namespace)”.</p>
<ul>
<li>一个分片(shard)是一个最小级别“工作单元(worker unit)”,它只是保存了索引中所有数据的一部分。</li>
<li>我们需要知道是分片就是一个Lucene实例，并且它本身就是一个完整的搜索引擎。应用程序不会和它直接通<br>信。</li>
<li>分片可以是主分片(primary shard)或者是复制分片(replica shard)。</li>
<li>索引中的每个文档属于一个单独的主分片，所以主分片的数量决定了索引最多能存储多少数据。</li>
<li>复制分片只是主分片的一个副本，它可以防止硬件故障导致的数据丢失，同时可以提供读请求，比如搜索或者从别的shard取回文档。</li>
<li>当索引创建完成的时候，主分片的数量就固定了，但是复制分片的数量可以随时调整。</li>
</ul>
<h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><h4 id="将data节点停止"><a href="#将data节点停止" class="headerlink" title="将data节点停止"></a>将data节点停止</h4><p>这里选择将node02停止：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095218.png" alt="image-20200923152229908"></p>
<p>当前集群状态为黄色，表示主节点可用，副本节点不完全可用，过一段时间观察，发现节点列表中看不到node02，副本节点分配到了node01和node03，集群状态恢复到绿色。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095219.png" alt="image-20200923152248547"></p>
<p>将node02恢复： ./node02/1 bin/elasticsearch</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095220.png" alt="image-20200923152328458"></p>
<p>可以看到，node02恢复后，重新加入了集群，并且重新分配了节点信息。</p>
<h4 id="将master节点停止"><a href="#将master节点停止" class="headerlink" title="将master节点停止"></a>将master节点停止</h4><p>接下来，测试将node01停止，也就是将主节点停止。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095221.png" alt="image-20200923152415890"></p>
<p>从结果中可以看出，集群对master进行了重新选举，选择node03为master。并且集群状态变成黄色。<br>等待一段时间后，集群状态从黄色变为了绿色：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095222.png" alt="image-20200923153343555"></p>
<p>恢复node01节点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./node01/1 bin/elasticsearch</span><br></pre></td></tr></table></figure>
<p>重启之后，发现node01可以正常加入到集群中，集群状态依然为绿色：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095223.png" alt="image-20200923153415117"></p>
<p>特别说明：</p>
<p>如果在配置文件中discovery.zen.minimum_master_nodes设置的不是N/2+1时，会出现脑裂问题，之前宕机<br>的主节点恢复后不会加入到集群。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095224.png" alt="image-20200923153441693"></p>
<h3 id="分布式文档"><a href="#分布式文档" class="headerlink" title="分布式文档"></a>分布式文档</h3><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>首先，来看个问题：</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095225.png" alt="image-20200923153556720"></p>
<p>如图所示：当我们想一个集群保存文档时，文档该存储到哪个节点呢？ 是随机吗？ 是轮询吗？实际上，在ELasticsearch中，会采用计算的方式来确定存储到哪个节点，计算公式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shard = <span class="built_in">hash</span>(routing) % number_1 of_primary_shards</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>routing值是一个任意字符串，它默认是_id但也可以自定义。</li>
<li>这个routing字符串通过哈希函数生成一个数字，然后除以主切片的数量得到一个余数(remainder)，余数<br>的范围永远是0到number_of_primary_shards - 1，这个数字就是特定文档所在的分片</li>
</ul>
<p>这就是为什么创建了主分片后，不能修改的原因。</p>
<h4 id="文档的写操作"><a href="#文档的写操作" class="headerlink" title="文档的写操作"></a>文档的写操作</h4><p>新建、索引和删除请求都是写（write）操作，它们必须在主分片上成功完成才能复制分片上</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095226.png" alt="image-20200923155314424"></p>
<p>下面我们罗列在主分片和复制分片上成功新建、索引或删除一个文档必要的顺序步骤：</p>
<ol>
<li>客户端给Node 1 发送新建、索引或删除请求。</li>
<li>节点使用文档的_id 确定文档属于分片0 。它转发请求到Node 3 ，分片0 位于这个节点上。</li>
<li>Node 3 在主分片上执行请求，如果成功，它转发请求到相应的位于Node 1 和Node 2 的复制节点上。当所有<br>的复制节点报告成功， Node 3 报告成功到请求的节点，请求的节点再报告给客户端。</li>
</ol>
<p>客户端接收到成功响应的时候，文档的修改已经被应用于主分片和所有的复制分片。你的修改生效了。</p>
<h3 id="搜索文档"><a href="#搜索文档" class="headerlink" title="搜索文档"></a>搜索文档</h3><p>文档能够从主分片或任意一个复制分片被检索。</p>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095227.png" alt="image-20200923160046962"></p>
<p>下面我们罗列在主分片或复制分片上检索一个文档必要的顺序步骤：</p>
<ol>
<li>客户端给Node 1 发送get请求。</li>
<li>节点使用文档的_id 确定文档属于分片0 。分片0 对应的复制分片在三个节点上都有。此时，它转发请求到<br>Node 2 。</li>
<li>Node 2 返回文档(document)给Node 1 然后返回给客户端。对于读请求，为了平衡负载，请求节点会为每个请求选择不同的分片——它会循环所有分片副本。可能的情况是，一个被索引的文档已经存在于主分片上却还没来得及同步到复制分片上。这时复制分片会报告文档未找到，主分片会成功返回文档。一旦索引请求成功返回给用户，文档则在主分片和复制分片都是可用的。</li>
</ol>
<h3 id="全文搜索-2"><a href="#全文搜索-2" class="headerlink" title="全文搜索"></a>全文搜索</h3><p>对于全文搜索而言，文档可能分散在各个节点上，那么在分布式的情况下，如何搜索文档呢？</p>
<p>搜索，分为2个阶段，</p>
<ul>
<li>搜索（query）</li>
<li>取回（fetch）</li>
</ul>
<h4 id="搜索（query）"><a href="#搜索（query）" class="headerlink" title="搜索（query）"></a>搜索（query）</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095228.png" alt="image-20200923161323235"></p>
<p>查询阶段包含以下三步：</p>
<ol>
<li>客户端发送一个search（搜索） 请求给Node 3 , Node 3 创建了一个长度为from+size 的空优先级队</li>
<li>Node 3 转发这个搜索请求到索引中每个分片的原本或副本。每个分片在本地执行这个查询并且结果将结果到<br>一个大小为from+size 的有序本地优先队列里去。</li>
<li>每个分片返回document的ID和它优先队列里的所有document的排序值给协调节点Node 3 。Node 3 把这些<br>值合并到自己的优先队列里产生全局排序结果。</li>
</ol>
<h4 id="取回-fetch"><a href="#取回-fetch" class="headerlink" title="取回 fetch"></a>取回 fetch</h4><p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095229.png" alt="image-20200923161447618"></p>
<p>分发阶段由以下步骤构成：</p>
<ol>
<li>协调节点辨别出哪个document需要取回，并且向相关分片发出GET 请求。</li>
<li>每个分片加载document并且根据需要丰富（enrich）它们，然后再将document返回协调节点。</li>
<li>一旦所有的document都被取回，协调节点会将结果返回给客户端。</li>
</ol>
<h2 id="Java客户端"><a href="#Java客户端" class="headerlink" title="Java客户端"></a>Java客户端</h2><p>在Elasticsearch中，为java提供了2种客户端，一种是REST风格的客户端，另一种是Java API的客户端</p>
<h3 id="REST客户端"><a href="#REST客户端" class="headerlink" title="REST客户端"></a>REST客户端</h3><p>Elasticsearch提供了2种REST客户端，一种是低级客户端，一种是高级客户端。</p>
<ul>
<li>Java Low Level REST Client：官方提供的低级客户端。该客户端通过http来连接Elasticsearch集群。用户在使<br>用该客户端时需要将请求数据手动拼接成Elasticsearch所需JSON格式进行发送，收到响应时同样也需要将返回的JSON数据手动封装成对象。虽然麻烦，不过该客户端兼容所有的Elasticsearch版本。</li>
<li>Java High Level REST Client：官方提供的高级客户端。该客户端基于低级客户端实现，它提供了很多便捷的<br>API来解决低级客户端需要手动转换数据格式的问题。</li>
</ul>
<h3 id="构造数据-1"><a href="#构造数据-1" class="headerlink" title="构造数据"></a>构造数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /haoke/house/_bulk</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;house&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1001&quot;</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;整租 · 南丹大楼 1居室 7500&quot;</span>,<span class="string">&quot;price&quot;</span>:<span class="string">&quot;7500&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;house&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1002&quot;</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;陆家嘴板块，精装设计一室一厅，可拎包入住诚意租。&quot;</span>,<span class="string">&quot;price&quot;</span>:<span class="string">&quot;8500&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;house&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1003&quot;</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;整租 · 健安坊 1居室 4050&quot;</span>,<span class="string">&quot;price&quot;</span>:<span class="string">&quot;7500&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;house&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1004&quot;</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;整租 · 中凯城市之光+视野开阔+景色秀丽+拎包入住&quot;</span>,<span class="string">&quot;price&quot;</span>:<span class="string">&quot;6500&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;house&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1005&quot;</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;整租 · 南京西路品质小区 21213三轨交汇 配套齐* 拎包入住&quot;</span>,<span class="string">&quot;price&quot;</span>:<span class="string">&quot;6000&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>:&#123;<span class="string">&quot;_index&quot;</span>:<span class="string">&quot;haoke&quot;</span>,<span class="string">&quot;_type&quot;</span>:<span class="string">&quot;house&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1006&quot;</span>,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;祥康里 简约风格 *南户型 拎包入住 看房随时&quot;</span>,<span class="string">&quot;price&quot;</span>:<span class="string">&quot;7000&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Pink_oops/image/raw/master/img/20210107095230.png" alt="image-20200923162419395"></p>
<h3 id="REST低级客户端"><a href="#REST低级客户端" class="headerlink" title="REST低级客户端"></a>REST低级客户端</h3><p>创建项目，加入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Study_ElasticSearch_Code<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.Request;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.Response;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClientBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用低级客户端 访问</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 陌溪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-09-23-16:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESApi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RestClient restClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestClientBuilder restClientBuilder = RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">&quot;202.193.56.222&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>));</span><br><span class="line">        <span class="keyword">this</span>.restClient = restClientBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询集群状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetInfo</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/_cluster/state&quot;</span>);</span><br><span class="line">        request.addParameter(<span class="string">&quot;pretty&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetHouseInfo</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/haoke/house/Z3CduXQBYpWein3CRFug&quot;</span>);</span><br><span class="line">        request.addParameter(<span class="string">&quot;pretty&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateData</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/haoke/house&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;2001&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;张江高科&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;price&quot;</span>, <span class="string">&quot;3500&quot;</span>);</span><br><span class="line">        <span class="comment">// 写成JSON</span></span><br><span class="line">        request.setJsonEntity(MAPPER.writeValueAsString(data));</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搜索数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearchData</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/haoke/house/_search&quot;</span>);</span><br><span class="line">        String searchJson = <span class="string">&quot;&#123;\&quot;query\&quot;: &#123;\&quot;match\&quot;: &#123;\&quot;title\&quot;: \&quot;拎包入住\&quot;&#125;&#125;&#125;&quot;</span>;</span><br><span class="line">        request.setJsonEntity(searchJson);</span><br><span class="line">        request.addParameter(<span class="string">&quot;pretty&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        Response response = <span class="keyword">this</span>.restClient.performRequest(request);</span><br><span class="line">        System.out.println(response.getStatusLine());</span><br><span class="line">        System.out.println(EntityUtils.toString(response.getEntity()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ESApi esApi = <span class="keyword">new</span> ESApi();</span><br><span class="line">        esApi.init();</span><br><span class="line"><span class="comment">//        esApi.testGetInfo();</span></span><br><span class="line"><span class="comment">//        esApi.testGetHouseInfo();</span></span><br><span class="line">        esApi.testCreateData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="REST高级客户端"><a href="#REST高级客户端" class="headerlink" title="REST高级客户端"></a>REST高级客户端</h3><p>创建项目，引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>编写测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.ActionListener;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.Strings;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.FetchSourceContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES高级客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 陌溪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-09-23-16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESHightApi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RestClientBuilder restClientBuilder = RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">&quot;202.193.56.222&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>));</span><br><span class="line">        <span class="keyword">this</span>.client = <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增文档，同步操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;2002&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;南京西路 拎包入住 一室一厅&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;price&quot;</span>, <span class="string">&quot;4500&quot;</span>);</span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;house&quot;</span>)</span><br><span class="line">                .source(data);</span><br><span class="line">        IndexResponse indexResponse = <span class="keyword">this</span>.client.index(indexRequest,</span><br><span class="line">                RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">&quot;id-&gt;&quot;</span> + indexResponse.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;index-&gt;&quot;</span> + indexResponse.getIndex());</span><br><span class="line">        System.out.println(<span class="string">&quot;type-&gt;&quot;</span> + indexResponse.getType());</span><br><span class="line">        System.out.println(<span class="string">&quot;version-&gt;&quot;</span> + indexResponse.getVersion());</span><br><span class="line">        System.out.println(<span class="string">&quot;result-&gt;&quot;</span> + indexResponse.getResult());</span><br><span class="line">        System.out.println(<span class="string">&quot;shardInfo-&gt;&quot;</span> + indexResponse.getShardInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步创建文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateAsync</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;2003&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;南京东路 最新房源 二室一厅&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;price&quot;</span>, <span class="string">&quot;5500&quot;</span>);</span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;house&quot;</span>)</span><br><span class="line">                .source(data);</span><br><span class="line">        <span class="keyword">this</span>.client.indexAsync(indexRequest, RequestOptions.DEFAULT, <span class="keyword">new</span></span><br><span class="line">                ActionListener&lt;IndexResponse&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(IndexResponse indexResponse)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;id-&gt;&quot;</span> + indexResponse.getId());</span><br><span class="line">                        System.out.println(<span class="string">&quot;index-&gt;&quot;</span> + indexResponse.getIndex());</span><br><span class="line">                        System.out.println(<span class="string">&quot;type-&gt;&quot;</span> + indexResponse.getType());</span><br><span class="line">                        System.out.println(<span class="string">&quot;version-&gt;&quot;</span> + indexResponse.getVersion());</span><br><span class="line">                        System.out.println(<span class="string">&quot;result-&gt;&quot;</span> + indexResponse.getResult());</span><br><span class="line">                        System.out.println(<span class="string">&quot;shardInfo-&gt;&quot;</span> + indexResponse.getShardInfo());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                        System.out.println(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;house&quot;</span>,</span><br><span class="line">                <span class="string">&quot;GkpdE2gBCKv8opxuOj12&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定返回的字段</span></span><br><span class="line">        String[] includes = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;title&quot;</span>, <span class="string">&quot;id&quot;</span>&#125;;</span><br><span class="line">        String[] excludes = Strings.EMPTY_ARRAY;</span><br><span class="line">        FetchSourceContext fetchSourceContext =</span><br><span class="line">                <span class="keyword">new</span> FetchSourceContext(<span class="keyword">true</span>, includes, excludes);</span><br><span class="line">        getRequest.fetchSourceContext(fetchSourceContext);</span><br><span class="line">        GetResponse response = <span class="keyword">this</span>.client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">&quot;数据 -&gt; &quot;</span> + response.getSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExists</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;house&quot;</span>,</span><br><span class="line">                <span class="string">&quot;GkpdE2gBCKv8opxuOj12&quot;</span>);</span><br><span class="line"><span class="comment">// 不返回的字段</span></span><br><span class="line">        getRequest.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">boolean</span> exists = <span class="keyword">this</span>.client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">&quot;exists -&gt; &quot;</span> + exists);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;house&quot;</span>,</span><br><span class="line">                <span class="string">&quot;GkpdE2gBCKv8opxuOj12&quot;</span>);</span><br><span class="line">        DeleteResponse response = <span class="keyword">this</span>.client.delete(deleteRequest,</span><br><span class="line">                RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(response.status());<span class="comment">// OK or NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;haoke&quot;</span>, <span class="string">&quot;house&quot;</span>,</span><br><span class="line">                <span class="string">&quot;G0pfE2gBCKv8opxuRz1y&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;张江高科2&quot;</span>);</span><br><span class="line">        data.put(<span class="string">&quot;price&quot;</span>, <span class="string">&quot;5000&quot;</span>);</span><br><span class="line">        updateRequest.doc(data);</span><br><span class="line">        UpdateResponse response = <span class="keyword">this</span>.client.update(updateRequest,</span><br><span class="line">                RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">&quot;version -&gt; &quot;</span> + response.getVersion());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试搜索</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;haoke&quot;</span>);</span><br><span class="line">        searchRequest.types(<span class="string">&quot;house&quot;</span>);</span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;拎包入住&quot;</span>));</span><br><span class="line">        sourceBuilder.from(<span class="number">0</span>);</span><br><span class="line">        sourceBuilder.size(<span class="number">5</span>);</span><br><span class="line">        sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line">        SearchResponse search = <span class="keyword">this</span>.client.search(searchRequest,</span><br><span class="line">                RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(<span class="string">&quot;搜索到 &quot;</span> + search.getHits().totalHits + <span class="string">&quot; 条数据.&quot;</span>);</span><br><span class="line">        SearchHits hits = search.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ESHightApi esHightApi = <span class="keyword">new</span> ESHightApi();</span><br><span class="line">        esHightApi.init();</span><br><span class="line">        esHightApi.testCreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
        <category>ELK</category>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ELK</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
</search>
